
TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  000009a0  00000a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001d0  008001d0  00000b04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc0  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a59  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000738  00000000  00000000  00002619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ea  00000000  00000000  0000336e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 ea       	ldi	r30, 0xA0	; 160
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <UDR0+0xa>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 3d       	cpi	r26, 0xD0	; 208
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <UDR0+0x6>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 ed       	ldi	r26, 0xD0	; 208
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 3d       	cpi	r26, 0xDC	; 220
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 6d 02 	call	0x4da	; 0x4da <main>
  ea:	0c 94 ce 04 	jmp	0x99c	; 0x99c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Mega328P_Init>:
.set	temp,0				//Sets the value of temp to 0, can be changed later

.section ".text"			//Defines a new section called .text
.global Mega328P_Init
Mega328P_Init:
		ldi	r16,0x07		;PB0(R*W),PB1(RS),PB2(E) as fixed outputs
  f2:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		//Sets all bits of Port B to outputs
  f4:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			//Zeroes the r16 register
  f6:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		//Sets all of Port B to zero
  f8:	05 b9       	out	0x05, r16	; 5
		out	U2X0,r16		;initialize UART, 8bits, no parity, 1 stop, 9600
  fa:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			//Loads 0x0 into r17
  fc:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		//Loads 0x67 into r16
  fe:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		//Sets high part of Baud Rate 
 100:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts	UBRR0L,r16		//Sets low part of Baud Rate
 104:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ldi	r16,24			//Loads 24 into r16
 108:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		//Stores r24 in the the configuration register for serial communications. Enables RX complete interrupt and TX complete interrupt
 10a:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi	r16,6			//loads 6 into r16
 10e:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		//sets characters size to 8-bits
 110:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi r16,0x87		//initialize ADC
 114:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		//stores 0x87 into ADC configuration SRAM  location
 116:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		ldi r16,0x40		//Loads 0x40 into r16
 11a:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		//Stores the value of r16 into the ADC multiplexer selection memory space in SRAM
 11c:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ldi r16,0			//Loads 0 into r16
 120:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		//Stores 0 into ADCSRB memory space which puts ADC in free roaming mode
 122:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ldi r16,0xFE		//Loads 0xFE int r16
 126:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		//Stores 0xFE into DIDR0 which is the data input disable register
 128:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		ldi r16,0xFF		//Loads 0xFF int r16
 12c:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		//Stores 0xFF into DIDR0 which is the data input disable register
 12e:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		ret					//Return from Mega328P_Init - I/O port and ADC configurations have been set
 132:	08 95       	ret

00000134 <LCD_Write_Command>:
	
.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 134:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0xFF		;PD0 - PD7 as outputs
 138:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//Set Data Direction Register D
 13a:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//Load contents of Label Data into r16
 13c:	00 91 d0 01 	lds	r16, 0x01D0	; 0x8001d0 <__data_end>
	out		PORTD,r16		//Move contents of Label Data into Port D from r16
 140:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			//Load constant 4 into r16
 142:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		//Move 4 from r16 into Port B
 144:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 146:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	ldi		r16,0			//Clear r16
 14a:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//Clear PortB
 14c:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 14e:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	call	UART_On			//Call subroutine UART_On to turn UART back on
 152:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//End of LCD_Write_Command
 156:	08 95       	ret

00000158 <LCD_Delay>:

LCD_Delay:
	ldi		r16,0xFA		//Load constant 250 into r16
 158:	0a ef       	ldi	r16, 0xFA	; 250

0000015a <D0>:
D0:	ldi		r17,0xFF		//Load constant 255 into r17
 15a:	1f ef       	ldi	r17, 0xFF	; 255

0000015c <D1>:
D1:	dec		r17				//Decrement r17
 15c:	1a 95       	dec	r17
	brne	D1				//Branch back to D1 while it's still not 0.
 15e:	f1 f7       	brne	.-4      	; 0x15c <D1>
	dec		r16				//Decrement r16
 160:	0a 95       	dec	r16
	brne	D0				//Branch back to D0 while it's still not 0.
 162:	d9 f7       	brne	.-10     	; 0x15a <D0>
	ret						//End of LCD_Delay
 164:	08 95       	ret

00000166 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 166:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0xFF		//Set r16
 16a:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//Set Data Direction Register D
 16c:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//Load contents of Label Data into r16
 16e:	00 91 d0 01 	lds	r16, 0x01D0	; 0x8001d0 <__data_end>
	out		PORTD,r16		//Move contents of Label Data into Port D
 172:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			//Load constant 6 into r16
 174:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		//Move 6 from r16 into Port B
 176:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 178:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	ldi		r16,0			//Clear r16
 17c:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//Clear PortB
 17e:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 180:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	call	UART_On			//Call subroutine UART_On to turn UART back on
 184:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//End of UART_Write_Data
 188:	08 95       	ret

0000018a <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 18a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0x00		//Clear r16
 18e:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		//Clear Data Direction Register D
 190:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			//Load constant 4 into Port B 
 192:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		//Read contents of Port D Data Register into r16
 194:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		//Store the contents of Port D Data Register into label Data
 196:	00 93 d0 01 	sts	0x01D0, r16	; 0x8001d0 <__data_end>
	out		PORTB,0			//clear Port B
 19a:	05 b8       	out	0x05, r0	; 5
	call	UART_On			//Call subroutine UART_On to turn UART back on
 19c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//End of LCD_Read_Data
 1a0:	08 95       	ret

000001a2 <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				//Load constant 2 into r16
 1a2:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			//Store 2 into Data Direction Register Port D
 1a4:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				//Load constant 24 into r16
 1a6:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			//Store 24 into USART Control and Status Register 0 B
 1a8:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//End of UART_On
 1ac:	08 95       	ret

000001ae <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					//Load constant 0 into r16
 1ae:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				//Move 0 from r16 into USART Control and Status Register 0 B
 1b0:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//End of UART_Off
 1b4:	08 95       	ret

000001b6 <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r16
 1b6:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//Skips the next line if USART Receive Complete is set
 1ba:	07 ff       	sbrs	r16, 7
	ret							//End of UART_Clear
 1bc:	08 95       	ret
	lds		r16,UDR0			//Store the contents of USART I/O Data Register 0 into r16
 1be:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	rjmp	UART_Clear			//Loop back to start while RXC0 = 1
 1c2:	f9 cf       	rjmp	.-14     	; 0x1b6 <UART_Clear>

000001c4 <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r16
 1c4:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//Skips the next line if USART Receive Complete is set
 1c8:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			//Loop back to start while RXC0 = 1
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <UART_Get>
	lds		r16,UDR0			//Store the contents of USART I/O Data Register 0 into r16
 1cc:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		ASCII,r16			//Move the contents of USART I/O Data Register 0 from r16 into label ASCII
 1d0:	00 93 d2 01 	sts	0x01D2, r16	; 0x8001d2 <ASCII>
	ret							//End of UART_Get
 1d4:	08 95       	ret

000001d6 <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r17
 1d6:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r17,UDRE0			//Skips the next instruction if USART Data Register Empty is set
 1da:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			//Loop back to start while UDRE0 = 1
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <UART_Put>
	lds		r16,ASCII			//Load Label ASCII into r16
 1de:	00 91 d2 01 	lds	r16, 0x01D2	; 0x8001d2 <ASCII>
	sts		UDR0,r16			//Move ASCII from r16 to USART Data Register
 1e2:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	ret							//End of UART_Put
 1e6:	08 95       	ret

000001e8 <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xC7			//Load 199 into r16
 1e8:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			//Move 199 from r16 to ADC Control and Status Register A
 1ea:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

000001ee <A2V1>:
A2V1:	lds		r16,ADCSRA			//Load the ADC Control and Status Register A into r16
 1ee:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbrc	r16,ADSC			//Skip the following instruction if the ADC Start Conversion bit is cleared
 1f2:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				//Loop back into A2V1, continually scanning for ADCSRA to be 1
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <A2V1>
		lds		r16,ADCL			//ADCL must be read first, then ADCH, to ensure that the content of the Data Registers belongsto the same conversion
 1f6:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		sts		LADC,r16			//Store ADCL into SRAM Label LADC
 1fa:	00 93 d9 01 	sts	0x01D9, r16	; 0x8001d9 <LADC>
		lds		r16,ADCH			//The rest of ADC is read
 1fe:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		sts		HADC,r16			//Store ADCH into SRAM Label HADC
 202:	00 93 d1 01 	sts	0x01D1, r16	; 0x8001d1 <HADC>
		ret							//End of ADC_Get
 206:	08 95       	ret

00000208 <EEPROM_Write>:

.global EEPROM_Write
EEPROM_Write:      
		sbic    EECR,EEPE
 208:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Write		; Wait for completion of previous write
 20a:	fe cf       	rjmp	.-4      	; 0x208 <EEPROM_Write>
		ldi		r18,0x00			; Set up address (r18:r17) in address register
 20c:	20 e0       	ldi	r18, 0x00	; 0
		ldi		r17,0x05 
 20e:	15 e0       	ldi	r17, 0x05	; 5
		ldi		r16,'F'				; Set up data in r16    
 210:	06 e4       	ldi	r16, 0x46	; 70
		out     EEARH, r18      
 212:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17			      
 214:	11 bd       	out	0x21, r17	; 33
		out     EEDR,r16			; Write data (r16) to Data Register  
 216:	00 bd       	out	0x20, r16	; 32
		sbi     EECR,EEMPE			; Write logical one to EEMPE
 218:	fa 9a       	sbi	0x1f, 2	; 31
		sbi     EECR,EEPE			; Start eeprom write by setting EEPE
 21a:	f9 9a       	sbi	0x1f, 1	; 31
		ret 
 21c:	08 95       	ret

0000021e <EEPROM_Read>:

.global EEPROM_Read
EEPROM_Read:					    
		sbic    EECR,EEPE    
 21e:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Read		; Wait for completion of previous write
 220:	fe cf       	rjmp	.-4      	; 0x21e <EEPROM_Read>
		ldi		r18,0x00		; Set up address (r18:r17) in EEPROM address register
 222:	20 e0       	ldi	r18, 0x00	; 0
		ldi		r17,0x05
 224:	15 e0       	ldi	r17, 0x05	; 5
		ldi		r16,0x00   
 226:	00 e0       	ldi	r16, 0x00	; 0
		out     EEARH, r18   
 228:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17		   
 22a:	11 bd       	out	0x21, r17	; 33
		sbi     EECR,EERE		; Start eeprom read by writing EERE
 22c:	f8 9a       	sbi	0x1f, 0	; 31
		in      r16,EEDR		; Read data from Data Register
 22e:	00 b5       	in	r16, 0x20	; 32
		sts		ASCII,r16  
 230:	00 93 d2 01 	sts	0x01D2, r16	; 0x8001d2 <ASCII>
		ret
 234:	08 95       	ret

00000236 <UART_Puts>:

char temperature[6];					//string buffer for ADC output
int Acc;						//Accumulator for ADC use

void UART_Puts(const char *str)	//Display a string in the PC Terminal Program
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
	while (*str)
 23c:	98 81       	ld	r25, Y
 23e:	99 23       	and	r25, r25
 240:	41 f0       	breq	.+16     	; 0x252 <UART_Puts+0x1c>
 242:	21 96       	adiw	r28, 0x01	; 1
	{
		ASCII = *str++;
 244:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <ASCII>
		UART_Put();
 248:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Put>
char temperature[6];					//string buffer for ADC output
int Acc;						//Accumulator for ADC use

void UART_Puts(const char *str)	//Display a string in the PC Terminal Program
{
	while (*str)
 24c:	99 91       	ld	r25, Y+
 24e:	91 11       	cpse	r25, r1
 250:	f9 cf       	rjmp	.-14     	; 0x244 <UART_Puts+0xe>
	{
		ASCII = *str++;
		UART_Put();
	}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <LCD_Puts>:

void LCD_Puts(const char *str)	//Display a string on the LCD Module
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
	while (*str)
 25e:	98 81       	ld	r25, Y
 260:	99 23       	and	r25, r25
 262:	41 f0       	breq	.+16     	; 0x274 <LCD_Puts+0x1c>
 264:	21 96       	adiw	r28, 0x01	; 1
	{
		DATA = *str++;
 266:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <__data_end>
		LCD_Write_Data();
 26a:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Write_Data>
	}
}

void LCD_Puts(const char *str)	//Display a string on the LCD Module
{
	while (*str)
 26e:	99 91       	ld	r25, Y+
 270:	91 11       	cpse	r25, r1
 272:	f9 cf       	rjmp	.-14     	; 0x266 <LCD_Puts+0xe>
	{
		DATA = *str++;
		LCD_Write_Data();
	}
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <Banner>:


void Banner(void)				//Display Tiny OS Banner on Terminal
{
	UART_Puts(MS1);
 27a:	82 eb       	ldi	r24, 0xB2	; 178
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
	UART_Puts(MS2);
 282:	8b e7       	ldi	r24, 0x7B	; 123
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
	UART_Puts(MS4);
 28a:	80 e5       	ldi	r24, 0x50	; 80
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
 292:	08 95       	ret

00000294 <HELP>:
}

void HELP(void)						//Display available Tiny OS Commands on Terminal
{
	UART_Puts(MS3);
 294:	8a e5       	ldi	r24, 0x5A	; 90
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
 29c:	08 95       	ret

0000029e <LCD>:
}

void LCD(void)						//Lite LCD demo
{
	DATA = 0x34;					//Student Comment Here
 29e:	84 e3       	ldi	r24, 0x34	; 52
 2a0:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
	LCD_Write_Command();
 2a4:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x08;					//Student Comment Here
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
	LCD_Write_Command();
 2ae:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x02;					//Student Comment Here
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
	LCD_Write_Command();
 2b8:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x06;					//Student Comment Here
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
	LCD_Write_Command();
 2c2:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x0f;					//Student Comment Here
 2c6:	8f e0       	ldi	r24, 0x0F	; 15
 2c8:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
	LCD_Write_Command();
 2cc:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	LCD_Puts("Hello ECE412!");
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_Puts>
 2d8:	08 95       	ret

000002da <log>:
	
}


float log(float n)
{
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	6b 01       	movw	r12, r22
 2e4:	7c 01       	movw	r14, r24
	return (n > 1.0f) ? 1.0f + log(n / 2.0f) : 0;
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e8       	ldi	r20, 0x80	; 128
 2ec:	5f e3       	ldi	r21, 0x3F	; 63
 2ee:	0e 94 10 04 	call	0x820	; 0x820 <__gesf2>
 2f2:	18 16       	cp	r1, r24
 2f4:	8c f4       	brge	.+34     	; 0x318 <log+0x3e>
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	5f e3       	ldi	r21, 0x3F	; 63
 2fe:	c7 01       	movw	r24, r14
 300:	b6 01       	movw	r22, r12
 302:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3>
 306:	0e 94 6d 01 	call	0x2da	; 0x2da <log>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e8       	ldi	r20, 0x80	; 128
 310:	5f e3       	ldi	r21, 0x3F	; 63
 312:	0e 94 75 02 	call	0x4ea	; 0x4ea <__addsf3>
 316:	03 c0       	rjmp	.+6      	; 0x31e <log+0x44>
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	cb 01       	movw	r24, r22
}
 31e:	ff 90       	pop	r15
 320:	ef 90       	pop	r14
 322:	df 90       	pop	r13
 324:	cf 90       	pop	r12
 326:	08 95       	ret

00000328 <ADC>:
	always be able to return to command line.
	*/
}

void ADC(void)						//Lite Demo of the Analog to Digital Converter
{
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
	double voltage = 0;
	float farenheit = 0;
	int tempVoltage1 = 0;
	int tempVoltage2 = 0;
	
	ADC_Get();
 334:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_Get>
	Acc = (((int)HADC) * 0x100 + (int)(LADC));
 338:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <HADC>
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	32 2f       	mov	r19, r18
 340:	22 27       	eor	r18, r18
 342:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <LADC>
 346:	28 0f       	add	r18, r24
 348:	31 1d       	adc	r19, r1
 34a:	30 93 db 01 	sts	0x01DB, r19	; 0x8001db <Acc+0x1>
 34e:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <Acc>
	//}

	//voltage = tempVoltage1;
	//voltage = voltage + tempVoltage2;
	
	float r = (10000 * Acc)/(1024 - Acc);
 352:	40 e1       	ldi	r20, 0x10	; 16
 354:	57 e2       	ldi	r21, 0x27	; 39
 356:	24 9f       	mul	r18, r20
 358:	c0 01       	movw	r24, r0
 35a:	25 9f       	mul	r18, r21
 35c:	90 0d       	add	r25, r0
 35e:	34 9f       	mul	r19, r20
 360:	90 0d       	add	r25, r0
 362:	11 24       	eor	r1, r1
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	74 e0       	ldi	r23, 0x04	; 4
 368:	62 1b       	sub	r22, r18
 36a:	73 0b       	sbc	r23, r19
 36c:	0e 94 a6 04 	call	0x94c	; 0x94c <__divmodhi4>
 370:	ec 01       	movw	r28, r24
 372:	07 2e       	mov	r0, r23
 374:	00 0c       	add	r0, r0
 376:	88 0b       	sbc	r24, r24
 378:	99 0b       	sbc	r25, r25
 37a:	0e 94 84 03 	call	0x708	; 0x708 <__floatsisf>
 37e:	6b 01       	movw	r12, r22
 380:	7c 01       	movw	r14, r24
	r = r + (10000 * Acc)%(1024 - Acc);
	const float t0 = 298.15;
	const float B = 3950;
	float r0 = (10000 * 512)/(1024 - 512);
	
	kelvin = (B * t0)/(t0 * log(r/r0) + B);
 382:	be 01       	movw	r22, r28
 384:	dd 0f       	add	r29, r29
 386:	88 0b       	sbc	r24, r24
 388:	99 0b       	sbc	r25, r25
 38a:	0e 94 84 03 	call	0x708	; 0x708 <__floatsisf>
 38e:	a7 01       	movw	r20, r14
 390:	96 01       	movw	r18, r12
 392:	0e 94 75 02 	call	0x4ea	; 0x4ea <__addsf3>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	40 e8       	ldi	r20, 0x80	; 128
 39c:	5d e3       	ldi	r21, 0x3D	; 61
 39e:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3>
 3a2:	0e 94 6d 01 	call	0x2da	; 0x2da <log>

	celsius = kelvin - 273.15;
	
	farenheit = celsius *(9.0f/5.0f) + 32;
 3a6:	23 e3       	ldi	r18, 0x33	; 51
 3a8:	33 e1       	ldi	r19, 0x13	; 19
 3aa:	45 e9       	ldi	r20, 0x95	; 149
 3ac:	53 e4       	ldi	r21, 0x43	; 67
 3ae:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3>
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 ee       	ldi	r19, 0xE0	; 224
 3b6:	46 e7       	ldi	r20, 0x76	; 118
 3b8:	55 e4       	ldi	r21, 0x45	; 69
 3ba:	0e 94 75 02 	call	0x4ea	; 0x4ea <__addsf3>
 3be:	9b 01       	movw	r18, r22
 3c0:	ac 01       	movw	r20, r24
 3c2:	64 ee       	ldi	r22, 0xE4	; 228
 3c4:	72 ec       	ldi	r23, 0xC2	; 194
 3c6:	8f e8       	ldi	r24, 0x8F	; 143
 3c8:	99 e4       	ldi	r25, 0x49	; 73
 3ca:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divsf3>
 3ce:	23 e3       	ldi	r18, 0x33	; 51
 3d0:	33 e9       	ldi	r19, 0x93	; 147
 3d2:	48 e8       	ldi	r20, 0x88	; 136
 3d4:	53 e4       	ldi	r21, 0x43	; 67
 3d6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__subsf3>
 3da:	26 e6       	ldi	r18, 0x66	; 102
 3dc:	36 e6       	ldi	r19, 0x66	; 102
 3de:	46 ee       	ldi	r20, 0xE6	; 230
 3e0:	5f e3       	ldi	r21, 0x3F	; 63
 3e2:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3>
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	52 e4       	ldi	r21, 0x42	; 66
 3ee:	0e 94 75 02 	call	0x4ea	; 0x4ea <__addsf3>
 3f2:	6b 01       	movw	r12, r22
 3f4:	7c 01       	movw	r14, r24
	char f3 = (char)(farenheit / .1);
	char f4 = (char)(farenheit / .01);

	
	
	temperature[0] = f1;
 3f6:	c3 ed       	ldi	r28, 0xD3	; 211
 3f8:	d1 e0       	ldi	r29, 0x01	; 1
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 e2       	ldi	r20, 0x20	; 32
 400:	51 e4       	ldi	r21, 0x41	; 65
 402:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divsf3>
 406:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fixunssfsi>
 40a:	68 83       	st	Y, r22
	temperature[1] = f2;
 40c:	c7 01       	movw	r24, r14
 40e:	b6 01       	movw	r22, r12
 410:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fixunssfsi>
 414:	69 83       	std	Y+1, r22	; 0x01
	temperature[2] = '.';
 416:	8e e2       	ldi	r24, 0x2E	; 46
 418:	8a 83       	std	Y+2, r24	; 0x02
	temperature[3] = f3;
 41a:	2d ec       	ldi	r18, 0xCD	; 205
 41c:	3c ec       	ldi	r19, 0xCC	; 204
 41e:	4c ec       	ldi	r20, 0xCC	; 204
 420:	5d e3       	ldi	r21, 0x3D	; 61
 422:	c7 01       	movw	r24, r14
 424:	b6 01       	movw	r22, r12
 426:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divsf3>
 42a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fixunssfsi>
 42e:	6b 83       	std	Y+3, r22	; 0x03
	temperature[4] = f4;
 430:	2a e0       	ldi	r18, 0x0A	; 10
 432:	37 ed       	ldi	r19, 0xD7	; 215
 434:	43 e2       	ldi	r20, 0x23	; 35
 436:	5c e3       	ldi	r21, 0x3C	; 60
 438:	c7 01       	movw	r24, r14
 43a:	b6 01       	movw	r22, r12
 43c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divsf3>
 440:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fixunssfsi>
 444:	6c 83       	std	Y+4, r22	; 0x04
	temperature[5] = ' ';
 446:	80 e2       	ldi	r24, 0x20	; 32
 448:	8d 83       	std	Y+5, r24	; 0x05

	
	UART_Puts(temperature);
 44a:	ce 01       	movw	r24, r28
 44c:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
	UART_Puts(MS6);
 450:	8a e2       	ldi	r24, 0x2A	; 42
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
		The potentiometer simulates a thermistor, its varying resistance simulates the
		varying resistance of a thermistor as it is heated and cooled. See the thermistor
		equations in the lab 3 folder. User must always be able to return to command line.
	*/
	
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
 460:	df 90       	pop	r13
 462:	cf 90       	pop	r12
 464:	08 95       	ret

00000466 <EEPROM>:
	return (n > 1.0f) ? 1.0f + log(n / 2.0f) : 0;
}

void EEPROM(void)
{
	UART_Puts("\r\nEEPROM Write and Read.");
 466:	8e e0       	ldi	r24, 0x0E	; 14
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
	during run-time via the command line and the same byte of data can be read back and verified after the power to
	the Xplained Mini board has been cycled. Ask the user to enter a valid EEPROM address and an
	8-bit data value. Utilize the following two given Assembly based drivers to communicate with the EEPROM. You
	may modify the EEPROM drivers as needed. User must be able to always return to command line.
	*/
	UART_Puts("\r\n");
 46e:	87 e2       	ldi	r24, 0x27	; 39
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
	EEPROM_Write();
 476:	0e 94 04 01 	call	0x208	; 0x208 <EEPROM_Write>
	UART_Puts("\r\n");
 47a:	87 e2       	ldi	r24, 0x27	; 39
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
	EEPROM_Read();
 482:	0e 94 0f 01 	call	0x21e	; 0x21e <EEPROM_Read>
	UART_Put();
 486:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Put>
	UART_Puts("\r\n");
 48a:	87 e2       	ldi	r24, 0x27	; 39
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
 492:	08 95       	ret

00000494 <Command>:
}


void Command(void)					//command interpreter
{
	UART_Puts(MS3);
 494:	8a e5       	ldi	r24, 0x5A	; 90
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
	ASCII = '\0';						
 49c:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 4a0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void Command(void)					//command interpreter
{
	UART_Puts(MS3);
	ASCII = '\0';						
	while (ASCII == '\0')
 4a4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <ASCII>
 4a8:	88 23       	and	r24, r24
 4aa:	d1 f3       	breq	.-12     	; 0x4a0 <Command+0xc>
	{
		UART_Get();
	}
	//ASCII = 'a';
	switch (ASCII)
 4ac:	85 36       	cpi	r24, 0x65	; 101
 4ae:	59 f0       	breq	.+22     	; 0x4c6 <Command+0x32>
 4b0:	8c 36       	cpi	r24, 0x6C	; 108
 4b2:	19 f0       	breq	.+6      	; 0x4ba <Command+0x26>
 4b4:	81 36       	cpi	r24, 0x61	; 97
 4b6:	51 f4       	brne	.+20     	; 0x4cc <Command+0x38>
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <Command+0x2c>
	{
		case 'L' | 'l': LCD();
 4ba:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD>
		break;
 4be:	08 95       	ret
		case 'A' | 'a': ADC();
 4c0:	0e 94 94 01 	call	0x328	; 0x328 <ADC>
		break;
 4c4:	08 95       	ret
		case 'E' | 'e': EEPROM();
 4c6:	0e 94 33 02 	call	0x466	; 0x466 <EEPROM>
		break;
 4ca:	08 95       	ret
		default:
		UART_Puts(MS5);
 4cc:	81 e3       	ldi	r24, 0x31	; 49
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 1b 01 	call	0x236	; 0x236 <UART_Puts>
		HELP();
 4d4:	0e 94 4a 01 	call	0x294	; 0x294 <HELP>
 4d8:	08 95       	ret

000004da <main>:
	}
}

int main(void)
{
	Mega328P_Init();
 4da:	0e 94 79 00 	call	0xf2	; 0xf2 <Mega328P_Init>
	Banner();
 4de:	0e 94 3d 01 	call	0x27a	; 0x27a <Banner>
	while (1)
	{
		Command();				//infinite command loop
 4e2:	0e 94 4a 02 	call	0x494	; 0x494 <Command>
 4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <main+0x8>

000004e8 <__subsf3>:
 4e8:	50 58       	subi	r21, 0x80	; 128

000004ea <__addsf3>:
 4ea:	bb 27       	eor	r27, r27
 4ec:	aa 27       	eor	r26, r26
 4ee:	0e 94 8c 02 	call	0x518	; 0x518 <__addsf3x>
 4f2:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_round>
 4f6:	0e 94 c8 03 	call	0x790	; 0x790 <__fp_pscA>
 4fa:	38 f0       	brcs	.+14     	; 0x50a <__addsf3+0x20>
 4fc:	0e 94 cf 03 	call	0x79e	; 0x79e <__fp_pscB>
 500:	20 f0       	brcs	.+8      	; 0x50a <__addsf3+0x20>
 502:	39 f4       	brne	.+14     	; 0x512 <__addsf3+0x28>
 504:	9f 3f       	cpi	r25, 0xFF	; 255
 506:	19 f4       	brne	.+6      	; 0x50e <__addsf3+0x24>
 508:	26 f4       	brtc	.+8      	; 0x512 <__addsf3+0x28>
 50a:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_nan>
 50e:	0e f4       	brtc	.+2      	; 0x512 <__addsf3+0x28>
 510:	e0 95       	com	r30
 512:	e7 fb       	bst	r30, 7
 514:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_inf>

00000518 <__addsf3x>:
 518:	e9 2f       	mov	r30, r25
 51a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fp_split3>
 51e:	58 f3       	brcs	.-42     	; 0x4f6 <__addsf3+0xc>
 520:	ba 17       	cp	r27, r26
 522:	62 07       	cpc	r22, r18
 524:	73 07       	cpc	r23, r19
 526:	84 07       	cpc	r24, r20
 528:	95 07       	cpc	r25, r21
 52a:	20 f0       	brcs	.+8      	; 0x534 <__addsf3x+0x1c>
 52c:	79 f4       	brne	.+30     	; 0x54c <__addsf3x+0x34>
 52e:	a6 f5       	brtc	.+104    	; 0x598 <__addsf3x+0x80>
 530:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_zero>
 534:	0e f4       	brtc	.+2      	; 0x538 <__addsf3x+0x20>
 536:	e0 95       	com	r30
 538:	0b 2e       	mov	r0, r27
 53a:	ba 2f       	mov	r27, r26
 53c:	a0 2d       	mov	r26, r0
 53e:	0b 01       	movw	r0, r22
 540:	b9 01       	movw	r22, r18
 542:	90 01       	movw	r18, r0
 544:	0c 01       	movw	r0, r24
 546:	ca 01       	movw	r24, r20
 548:	a0 01       	movw	r20, r0
 54a:	11 24       	eor	r1, r1
 54c:	ff 27       	eor	r31, r31
 54e:	59 1b       	sub	r21, r25
 550:	99 f0       	breq	.+38     	; 0x578 <__addsf3x+0x60>
 552:	59 3f       	cpi	r21, 0xF9	; 249
 554:	50 f4       	brcc	.+20     	; 0x56a <__addsf3x+0x52>
 556:	50 3e       	cpi	r21, 0xE0	; 224
 558:	68 f1       	brcs	.+90     	; 0x5b4 <__addsf3x+0x9c>
 55a:	1a 16       	cp	r1, r26
 55c:	f0 40       	sbci	r31, 0x00	; 0
 55e:	a2 2f       	mov	r26, r18
 560:	23 2f       	mov	r18, r19
 562:	34 2f       	mov	r19, r20
 564:	44 27       	eor	r20, r20
 566:	58 5f       	subi	r21, 0xF8	; 248
 568:	f3 cf       	rjmp	.-26     	; 0x550 <__addsf3x+0x38>
 56a:	46 95       	lsr	r20
 56c:	37 95       	ror	r19
 56e:	27 95       	ror	r18
 570:	a7 95       	ror	r26
 572:	f0 40       	sbci	r31, 0x00	; 0
 574:	53 95       	inc	r21
 576:	c9 f7       	brne	.-14     	; 0x56a <__addsf3x+0x52>
 578:	7e f4       	brtc	.+30     	; 0x598 <__addsf3x+0x80>
 57a:	1f 16       	cp	r1, r31
 57c:	ba 0b       	sbc	r27, r26
 57e:	62 0b       	sbc	r22, r18
 580:	73 0b       	sbc	r23, r19
 582:	84 0b       	sbc	r24, r20
 584:	ba f0       	brmi	.+46     	; 0x5b4 <__addsf3x+0x9c>
 586:	91 50       	subi	r25, 0x01	; 1
 588:	a1 f0       	breq	.+40     	; 0x5b2 <__addsf3x+0x9a>
 58a:	ff 0f       	add	r31, r31
 58c:	bb 1f       	adc	r27, r27
 58e:	66 1f       	adc	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	c2 f7       	brpl	.-16     	; 0x586 <__addsf3x+0x6e>
 596:	0e c0       	rjmp	.+28     	; 0x5b4 <__addsf3x+0x9c>
 598:	ba 0f       	add	r27, r26
 59a:	62 1f       	adc	r22, r18
 59c:	73 1f       	adc	r23, r19
 59e:	84 1f       	adc	r24, r20
 5a0:	48 f4       	brcc	.+18     	; 0x5b4 <__addsf3x+0x9c>
 5a2:	87 95       	ror	r24
 5a4:	77 95       	ror	r23
 5a6:	67 95       	ror	r22
 5a8:	b7 95       	ror	r27
 5aa:	f7 95       	ror	r31
 5ac:	9e 3f       	cpi	r25, 0xFE	; 254
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <__addsf3x+0x9a>
 5b0:	b0 cf       	rjmp	.-160    	; 0x512 <__addsf3+0x28>
 5b2:	93 95       	inc	r25
 5b4:	88 0f       	add	r24, r24
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <__addsf3x+0xa2>
 5b8:	99 27       	eor	r25, r25
 5ba:	ee 0f       	add	r30, r30
 5bc:	97 95       	ror	r25
 5be:	87 95       	ror	r24
 5c0:	08 95       	ret

000005c2 <__divsf3>:
 5c2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__divsf3x>
 5c6:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_round>
 5ca:	0e 94 cf 03 	call	0x79e	; 0x79e <__fp_pscB>
 5ce:	58 f0       	brcs	.+22     	; 0x5e6 <__divsf3+0x24>
 5d0:	0e 94 c8 03 	call	0x790	; 0x790 <__fp_pscA>
 5d4:	40 f0       	brcs	.+16     	; 0x5e6 <__divsf3+0x24>
 5d6:	29 f4       	brne	.+10     	; 0x5e2 <__divsf3+0x20>
 5d8:	5f 3f       	cpi	r21, 0xFF	; 255
 5da:	29 f0       	breq	.+10     	; 0x5e6 <__divsf3+0x24>
 5dc:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_inf>
 5e0:	51 11       	cpse	r21, r1
 5e2:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_szero>
 5e6:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_nan>

000005ea <__divsf3x>:
 5ea:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fp_split3>
 5ee:	68 f3       	brcs	.-38     	; 0x5ca <__divsf3+0x8>

000005f0 <__divsf3_pse>:
 5f0:	99 23       	and	r25, r25
 5f2:	b1 f3       	breq	.-20     	; 0x5e0 <__divsf3+0x1e>
 5f4:	55 23       	and	r21, r21
 5f6:	91 f3       	breq	.-28     	; 0x5dc <__divsf3+0x1a>
 5f8:	95 1b       	sub	r25, r21
 5fa:	55 0b       	sbc	r21, r21
 5fc:	bb 27       	eor	r27, r27
 5fe:	aa 27       	eor	r26, r26
 600:	62 17       	cp	r22, r18
 602:	73 07       	cpc	r23, r19
 604:	84 07       	cpc	r24, r20
 606:	38 f0       	brcs	.+14     	; 0x616 <__divsf3_pse+0x26>
 608:	9f 5f       	subi	r25, 0xFF	; 255
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	44 1f       	adc	r20, r20
 612:	aa 1f       	adc	r26, r26
 614:	a9 f3       	breq	.-22     	; 0x600 <__divsf3_pse+0x10>
 616:	35 d0       	rcall	.+106    	; 0x682 <__divsf3_pse+0x92>
 618:	0e 2e       	mov	r0, r30
 61a:	3a f0       	brmi	.+14     	; 0x62a <__divsf3_pse+0x3a>
 61c:	e0 e8       	ldi	r30, 0x80	; 128
 61e:	32 d0       	rcall	.+100    	; 0x684 <__divsf3_pse+0x94>
 620:	91 50       	subi	r25, 0x01	; 1
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	e6 95       	lsr	r30
 626:	00 1c       	adc	r0, r0
 628:	ca f7       	brpl	.-14     	; 0x61c <__divsf3_pse+0x2c>
 62a:	2b d0       	rcall	.+86     	; 0x682 <__divsf3_pse+0x92>
 62c:	fe 2f       	mov	r31, r30
 62e:	29 d0       	rcall	.+82     	; 0x682 <__divsf3_pse+0x92>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	bb 1f       	adc	r27, r27
 638:	26 17       	cp	r18, r22
 63a:	37 07       	cpc	r19, r23
 63c:	48 07       	cpc	r20, r24
 63e:	ab 07       	cpc	r26, r27
 640:	b0 e8       	ldi	r27, 0x80	; 128
 642:	09 f0       	breq	.+2      	; 0x646 <__divsf3_pse+0x56>
 644:	bb 0b       	sbc	r27, r27
 646:	80 2d       	mov	r24, r0
 648:	bf 01       	movw	r22, r30
 64a:	ff 27       	eor	r31, r31
 64c:	93 58       	subi	r25, 0x83	; 131
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
 650:	3a f0       	brmi	.+14     	; 0x660 <__divsf3_pse+0x70>
 652:	9e 3f       	cpi	r25, 0xFE	; 254
 654:	51 05       	cpc	r21, r1
 656:	78 f0       	brcs	.+30     	; 0x676 <__divsf3_pse+0x86>
 658:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_inf>
 65c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_szero>
 660:	5f 3f       	cpi	r21, 0xFF	; 255
 662:	e4 f3       	brlt	.-8      	; 0x65c <__divsf3_pse+0x6c>
 664:	98 3e       	cpi	r25, 0xE8	; 232
 666:	d4 f3       	brlt	.-12     	; 0x65c <__divsf3_pse+0x6c>
 668:	86 95       	lsr	r24
 66a:	77 95       	ror	r23
 66c:	67 95       	ror	r22
 66e:	b7 95       	ror	r27
 670:	f7 95       	ror	r31
 672:	9f 5f       	subi	r25, 0xFF	; 255
 674:	c9 f7       	brne	.-14     	; 0x668 <__divsf3_pse+0x78>
 676:	88 0f       	add	r24, r24
 678:	91 1d       	adc	r25, r1
 67a:	96 95       	lsr	r25
 67c:	87 95       	ror	r24
 67e:	97 f9       	bld	r25, 7
 680:	08 95       	ret
 682:	e1 e0       	ldi	r30, 0x01	; 1
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	bb 1f       	adc	r27, r27
 68c:	62 17       	cp	r22, r18
 68e:	73 07       	cpc	r23, r19
 690:	84 07       	cpc	r24, r20
 692:	ba 07       	cpc	r27, r26
 694:	20 f0       	brcs	.+8      	; 0x69e <__divsf3_pse+0xae>
 696:	62 1b       	sub	r22, r18
 698:	73 0b       	sbc	r23, r19
 69a:	84 0b       	sbc	r24, r20
 69c:	ba 0b       	sbc	r27, r26
 69e:	ee 1f       	adc	r30, r30
 6a0:	88 f7       	brcc	.-30     	; 0x684 <__divsf3_pse+0x94>
 6a2:	e0 95       	com	r30
 6a4:	08 95       	ret

000006a6 <__fixunssfsi>:
 6a6:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_splitA>
 6aa:	88 f0       	brcs	.+34     	; 0x6ce <__fixunssfsi+0x28>
 6ac:	9f 57       	subi	r25, 0x7F	; 127
 6ae:	98 f0       	brcs	.+38     	; 0x6d6 <__fixunssfsi+0x30>
 6b0:	b9 2f       	mov	r27, r25
 6b2:	99 27       	eor	r25, r25
 6b4:	b7 51       	subi	r27, 0x17	; 23
 6b6:	b0 f0       	brcs	.+44     	; 0x6e4 <__fixunssfsi+0x3e>
 6b8:	e1 f0       	breq	.+56     	; 0x6f2 <__fixunssfsi+0x4c>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a f0       	brmi	.+6      	; 0x6ca <__fixunssfsi+0x24>
 6c4:	ba 95       	dec	r27
 6c6:	c9 f7       	brne	.-14     	; 0x6ba <__fixunssfsi+0x14>
 6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <__fixunssfsi+0x4c>
 6ca:	b1 30       	cpi	r27, 0x01	; 1
 6cc:	91 f0       	breq	.+36     	; 0x6f2 <__fixunssfsi+0x4c>
 6ce:	0e 94 09 04 	call	0x812	; 0x812 <__fp_zero>
 6d2:	b1 e0       	ldi	r27, 0x01	; 1
 6d4:	08 95       	ret
 6d6:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_zero>
 6da:	67 2f       	mov	r22, r23
 6dc:	78 2f       	mov	r23, r24
 6de:	88 27       	eor	r24, r24
 6e0:	b8 5f       	subi	r27, 0xF8	; 248
 6e2:	39 f0       	breq	.+14     	; 0x6f2 <__fixunssfsi+0x4c>
 6e4:	b9 3f       	cpi	r27, 0xF9	; 249
 6e6:	cc f3       	brlt	.-14     	; 0x6da <__fixunssfsi+0x34>
 6e8:	86 95       	lsr	r24
 6ea:	77 95       	ror	r23
 6ec:	67 95       	ror	r22
 6ee:	b3 95       	inc	r27
 6f0:	d9 f7       	brne	.-10     	; 0x6e8 <__fixunssfsi+0x42>
 6f2:	3e f4       	brtc	.+14     	; 0x702 <__fixunssfsi+0x5c>
 6f4:	90 95       	com	r25
 6f6:	80 95       	com	r24
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__floatunsisf>:
 704:	e8 94       	clt
 706:	09 c0       	rjmp	.+18     	; 0x71a <__floatsisf+0x12>

00000708 <__floatsisf>:
 708:	97 fb       	bst	r25, 7
 70a:	3e f4       	brtc	.+14     	; 0x71a <__floatsisf+0x12>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	99 23       	and	r25, r25
 71c:	a9 f0       	breq	.+42     	; 0x748 <__floatsisf+0x40>
 71e:	f9 2f       	mov	r31, r25
 720:	96 e9       	ldi	r25, 0x96	; 150
 722:	bb 27       	eor	r27, r27
 724:	93 95       	inc	r25
 726:	f6 95       	lsr	r31
 728:	87 95       	ror	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f1 11       	cpse	r31, r1
 732:	f8 cf       	rjmp	.-16     	; 0x724 <__floatsisf+0x1c>
 734:	fa f4       	brpl	.+62     	; 0x774 <__floatsisf+0x6c>
 736:	bb 0f       	add	r27, r27
 738:	11 f4       	brne	.+4      	; 0x73e <__floatsisf+0x36>
 73a:	60 ff       	sbrs	r22, 0
 73c:	1b c0       	rjmp	.+54     	; 0x774 <__floatsisf+0x6c>
 73e:	6f 5f       	subi	r22, 0xFF	; 255
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	16 c0       	rjmp	.+44     	; 0x774 <__floatsisf+0x6c>
 748:	88 23       	and	r24, r24
 74a:	11 f0       	breq	.+4      	; 0x750 <__floatsisf+0x48>
 74c:	96 e9       	ldi	r25, 0x96	; 150
 74e:	11 c0       	rjmp	.+34     	; 0x772 <__floatsisf+0x6a>
 750:	77 23       	and	r23, r23
 752:	21 f0       	breq	.+8      	; 0x75c <__floatsisf+0x54>
 754:	9e e8       	ldi	r25, 0x8E	; 142
 756:	87 2f       	mov	r24, r23
 758:	76 2f       	mov	r23, r22
 75a:	05 c0       	rjmp	.+10     	; 0x766 <__floatsisf+0x5e>
 75c:	66 23       	and	r22, r22
 75e:	71 f0       	breq	.+28     	; 0x77c <__floatsisf+0x74>
 760:	96 e8       	ldi	r25, 0x86	; 134
 762:	86 2f       	mov	r24, r22
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	2a f0       	brmi	.+10     	; 0x774 <__floatsisf+0x6c>
 76a:	9a 95       	dec	r25
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	da f7       	brpl	.-10     	; 0x76a <__floatsisf+0x62>
 774:	88 0f       	add	r24, r24
 776:	96 95       	lsr	r25
 778:	87 95       	ror	r24
 77a:	97 f9       	bld	r25, 7
 77c:	08 95       	ret

0000077e <__fp_inf>:
 77e:	97 f9       	bld	r25, 7
 780:	9f 67       	ori	r25, 0x7F	; 127
 782:	80 e8       	ldi	r24, 0x80	; 128
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	08 95       	ret

0000078a <__fp_nan>:
 78a:	9f ef       	ldi	r25, 0xFF	; 255
 78c:	80 ec       	ldi	r24, 0xC0	; 192
 78e:	08 95       	ret

00000790 <__fp_pscA>:
 790:	00 24       	eor	r0, r0
 792:	0a 94       	dec	r0
 794:	16 16       	cp	r1, r22
 796:	17 06       	cpc	r1, r23
 798:	18 06       	cpc	r1, r24
 79a:	09 06       	cpc	r0, r25
 79c:	08 95       	ret

0000079e <__fp_pscB>:
 79e:	00 24       	eor	r0, r0
 7a0:	0a 94       	dec	r0
 7a2:	12 16       	cp	r1, r18
 7a4:	13 06       	cpc	r1, r19
 7a6:	14 06       	cpc	r1, r20
 7a8:	05 06       	cpc	r0, r21
 7aa:	08 95       	ret

000007ac <__fp_round>:
 7ac:	09 2e       	mov	r0, r25
 7ae:	03 94       	inc	r0
 7b0:	00 0c       	add	r0, r0
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <__fp_round+0xc>
 7b4:	88 23       	and	r24, r24
 7b6:	52 f0       	brmi	.+20     	; 0x7cc <__fp_round+0x20>
 7b8:	bb 0f       	add	r27, r27
 7ba:	40 f4       	brcc	.+16     	; 0x7cc <__fp_round+0x20>
 7bc:	bf 2b       	or	r27, r31
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__fp_round+0x18>
 7c0:	60 ff       	sbrs	r22, 0
 7c2:	04 c0       	rjmp	.+8      	; 0x7cc <__fp_round+0x20>
 7c4:	6f 5f       	subi	r22, 0xFF	; 255
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	08 95       	ret

000007ce <__fp_split3>:
 7ce:	57 fd       	sbrc	r21, 7
 7d0:	90 58       	subi	r25, 0x80	; 128
 7d2:	44 0f       	add	r20, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	59 f0       	breq	.+22     	; 0x7ee <__fp_splitA+0x10>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	71 f0       	breq	.+28     	; 0x7f8 <__fp_splitA+0x1a>
 7dc:	47 95       	ror	r20

000007de <__fp_splitA>:
 7de:	88 0f       	add	r24, r24
 7e0:	97 fb       	bst	r25, 7
 7e2:	99 1f       	adc	r25, r25
 7e4:	61 f0       	breq	.+24     	; 0x7fe <__fp_splitA+0x20>
 7e6:	9f 3f       	cpi	r25, 0xFF	; 255
 7e8:	79 f0       	breq	.+30     	; 0x808 <__fp_splitA+0x2a>
 7ea:	87 95       	ror	r24
 7ec:	08 95       	ret
 7ee:	12 16       	cp	r1, r18
 7f0:	13 06       	cpc	r1, r19
 7f2:	14 06       	cpc	r1, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	f2 cf       	rjmp	.-28     	; 0x7dc <__fp_split3+0xe>
 7f8:	46 95       	lsr	r20
 7fa:	f1 df       	rcall	.-30     	; 0x7de <__fp_splitA>
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <__fp_splitA+0x30>
 7fe:	16 16       	cp	r1, r22
 800:	17 06       	cpc	r1, r23
 802:	18 06       	cpc	r1, r24
 804:	99 1f       	adc	r25, r25
 806:	f1 cf       	rjmp	.-30     	; 0x7ea <__fp_splitA+0xc>
 808:	86 95       	lsr	r24
 80a:	71 05       	cpc	r23, r1
 80c:	61 05       	cpc	r22, r1
 80e:	08 94       	sec
 810:	08 95       	ret

00000812 <__fp_zero>:
 812:	e8 94       	clt

00000814 <__fp_szero>:
 814:	bb 27       	eor	r27, r27
 816:	66 27       	eor	r22, r22
 818:	77 27       	eor	r23, r23
 81a:	cb 01       	movw	r24, r22
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__gesf2>:
 820:	0e 94 82 04 	call	0x904	; 0x904 <__fp_cmp>
 824:	08 f4       	brcc	.+2      	; 0x828 <__gesf2+0x8>
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	08 95       	ret

0000082a <__mulsf3>:
 82a:	0e 94 28 04 	call	0x850	; 0x850 <__mulsf3x>
 82e:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_round>
 832:	0e 94 c8 03 	call	0x790	; 0x790 <__fp_pscA>
 836:	38 f0       	brcs	.+14     	; 0x846 <__mulsf3+0x1c>
 838:	0e 94 cf 03 	call	0x79e	; 0x79e <__fp_pscB>
 83c:	20 f0       	brcs	.+8      	; 0x846 <__mulsf3+0x1c>
 83e:	95 23       	and	r25, r21
 840:	11 f0       	breq	.+4      	; 0x846 <__mulsf3+0x1c>
 842:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_inf>
 846:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_nan>
 84a:	11 24       	eor	r1, r1
 84c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_szero>

00000850 <__mulsf3x>:
 850:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fp_split3>
 854:	70 f3       	brcs	.-36     	; 0x832 <__mulsf3+0x8>

00000856 <__mulsf3_pse>:
 856:	95 9f       	mul	r25, r21
 858:	c1 f3       	breq	.-16     	; 0x84a <__mulsf3+0x20>
 85a:	95 0f       	add	r25, r21
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	55 1f       	adc	r21, r21
 860:	62 9f       	mul	r22, r18
 862:	f0 01       	movw	r30, r0
 864:	72 9f       	mul	r23, r18
 866:	bb 27       	eor	r27, r27
 868:	f0 0d       	add	r31, r0
 86a:	b1 1d       	adc	r27, r1
 86c:	63 9f       	mul	r22, r19
 86e:	aa 27       	eor	r26, r26
 870:	f0 0d       	add	r31, r0
 872:	b1 1d       	adc	r27, r1
 874:	aa 1f       	adc	r26, r26
 876:	64 9f       	mul	r22, r20
 878:	66 27       	eor	r22, r22
 87a:	b0 0d       	add	r27, r0
 87c:	a1 1d       	adc	r26, r1
 87e:	66 1f       	adc	r22, r22
 880:	82 9f       	mul	r24, r18
 882:	22 27       	eor	r18, r18
 884:	b0 0d       	add	r27, r0
 886:	a1 1d       	adc	r26, r1
 888:	62 1f       	adc	r22, r18
 88a:	73 9f       	mul	r23, r19
 88c:	b0 0d       	add	r27, r0
 88e:	a1 1d       	adc	r26, r1
 890:	62 1f       	adc	r22, r18
 892:	83 9f       	mul	r24, r19
 894:	a0 0d       	add	r26, r0
 896:	61 1d       	adc	r22, r1
 898:	22 1f       	adc	r18, r18
 89a:	74 9f       	mul	r23, r20
 89c:	33 27       	eor	r19, r19
 89e:	a0 0d       	add	r26, r0
 8a0:	61 1d       	adc	r22, r1
 8a2:	23 1f       	adc	r18, r19
 8a4:	84 9f       	mul	r24, r20
 8a6:	60 0d       	add	r22, r0
 8a8:	21 1d       	adc	r18, r1
 8aa:	82 2f       	mov	r24, r18
 8ac:	76 2f       	mov	r23, r22
 8ae:	6a 2f       	mov	r22, r26
 8b0:	11 24       	eor	r1, r1
 8b2:	9f 57       	subi	r25, 0x7F	; 127
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	9a f0       	brmi	.+38     	; 0x8de <__mulsf3_pse+0x88>
 8b8:	f1 f0       	breq	.+60     	; 0x8f6 <__mulsf3_pse+0xa0>
 8ba:	88 23       	and	r24, r24
 8bc:	4a f0       	brmi	.+18     	; 0x8d0 <__mulsf3_pse+0x7a>
 8be:	ee 0f       	add	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	bb 1f       	adc	r27, r27
 8c4:	66 1f       	adc	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	50 40       	sbci	r21, 0x00	; 0
 8ce:	a9 f7       	brne	.-22     	; 0x8ba <__mulsf3_pse+0x64>
 8d0:	9e 3f       	cpi	r25, 0xFE	; 254
 8d2:	51 05       	cpc	r21, r1
 8d4:	80 f0       	brcs	.+32     	; 0x8f6 <__mulsf3_pse+0xa0>
 8d6:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_inf>
 8da:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_szero>
 8de:	5f 3f       	cpi	r21, 0xFF	; 255
 8e0:	e4 f3       	brlt	.-8      	; 0x8da <__mulsf3_pse+0x84>
 8e2:	98 3e       	cpi	r25, 0xE8	; 232
 8e4:	d4 f3       	brlt	.-12     	; 0x8da <__mulsf3_pse+0x84>
 8e6:	86 95       	lsr	r24
 8e8:	77 95       	ror	r23
 8ea:	67 95       	ror	r22
 8ec:	b7 95       	ror	r27
 8ee:	f7 95       	ror	r31
 8f0:	e7 95       	ror	r30
 8f2:	9f 5f       	subi	r25, 0xFF	; 255
 8f4:	c1 f7       	brne	.-16     	; 0x8e6 <__mulsf3_pse+0x90>
 8f6:	fe 2b       	or	r31, r30
 8f8:	88 0f       	add	r24, r24
 8fa:	91 1d       	adc	r25, r1
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	97 f9       	bld	r25, 7
 902:	08 95       	ret

00000904 <__fp_cmp>:
 904:	99 0f       	add	r25, r25
 906:	00 08       	sbc	r0, r0
 908:	55 0f       	add	r21, r21
 90a:	aa 0b       	sbc	r26, r26
 90c:	e0 e8       	ldi	r30, 0x80	; 128
 90e:	fe ef       	ldi	r31, 0xFE	; 254
 910:	16 16       	cp	r1, r22
 912:	17 06       	cpc	r1, r23
 914:	e8 07       	cpc	r30, r24
 916:	f9 07       	cpc	r31, r25
 918:	c0 f0       	brcs	.+48     	; 0x94a <__fp_cmp+0x46>
 91a:	12 16       	cp	r1, r18
 91c:	13 06       	cpc	r1, r19
 91e:	e4 07       	cpc	r30, r20
 920:	f5 07       	cpc	r31, r21
 922:	98 f0       	brcs	.+38     	; 0x94a <__fp_cmp+0x46>
 924:	62 1b       	sub	r22, r18
 926:	73 0b       	sbc	r23, r19
 928:	84 0b       	sbc	r24, r20
 92a:	95 0b       	sbc	r25, r21
 92c:	39 f4       	brne	.+14     	; 0x93c <__fp_cmp+0x38>
 92e:	0a 26       	eor	r0, r26
 930:	61 f0       	breq	.+24     	; 0x94a <__fp_cmp+0x46>
 932:	23 2b       	or	r18, r19
 934:	24 2b       	or	r18, r20
 936:	25 2b       	or	r18, r21
 938:	21 f4       	brne	.+8      	; 0x942 <__fp_cmp+0x3e>
 93a:	08 95       	ret
 93c:	0a 26       	eor	r0, r26
 93e:	09 f4       	brne	.+2      	; 0x942 <__fp_cmp+0x3e>
 940:	a1 40       	sbci	r26, 0x01	; 1
 942:	a6 95       	lsr	r26
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	81 1d       	adc	r24, r1
 948:	81 1d       	adc	r24, r1
 94a:	08 95       	ret

0000094c <__divmodhi4>:
 94c:	97 fb       	bst	r25, 7
 94e:	07 2e       	mov	r0, r23
 950:	16 f4       	brtc	.+4      	; 0x956 <__divmodhi4+0xa>
 952:	00 94       	com	r0
 954:	07 d0       	rcall	.+14     	; 0x964 <__divmodhi4_neg1>
 956:	77 fd       	sbrc	r23, 7
 958:	09 d0       	rcall	.+18     	; 0x96c <__divmodhi4_neg2>
 95a:	0e 94 ba 04 	call	0x974	; 0x974 <__udivmodhi4>
 95e:	07 fc       	sbrc	r0, 7
 960:	05 d0       	rcall	.+10     	; 0x96c <__divmodhi4_neg2>
 962:	3e f4       	brtc	.+14     	; 0x972 <__divmodhi4_exit>

00000964 <__divmodhi4_neg1>:
 964:	90 95       	com	r25
 966:	81 95       	neg	r24
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	08 95       	ret

0000096c <__divmodhi4_neg2>:
 96c:	70 95       	com	r23
 96e:	61 95       	neg	r22
 970:	7f 4f       	sbci	r23, 0xFF	; 255

00000972 <__divmodhi4_exit>:
 972:	08 95       	ret

00000974 <__udivmodhi4>:
 974:	aa 1b       	sub	r26, r26
 976:	bb 1b       	sub	r27, r27
 978:	51 e1       	ldi	r21, 0x11	; 17
 97a:	07 c0       	rjmp	.+14     	; 0x98a <__udivmodhi4_ep>

0000097c <__udivmodhi4_loop>:
 97c:	aa 1f       	adc	r26, r26
 97e:	bb 1f       	adc	r27, r27
 980:	a6 17       	cp	r26, r22
 982:	b7 07       	cpc	r27, r23
 984:	10 f0       	brcs	.+4      	; 0x98a <__udivmodhi4_ep>
 986:	a6 1b       	sub	r26, r22
 988:	b7 0b       	sbc	r27, r23

0000098a <__udivmodhi4_ep>:
 98a:	88 1f       	adc	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	5a 95       	dec	r21
 990:	a9 f7       	brne	.-22     	; 0x97c <__udivmodhi4_loop>
 992:	80 95       	com	r24
 994:	90 95       	com	r25
 996:	bc 01       	movw	r22, r24
 998:	cd 01       	movw	r24, r26
 99a:	08 95       	ret

0000099c <_exit>:
 99c:	f8 94       	cli

0000099e <__stop_program>:
 99e:	ff cf       	rjmp	.-2      	; 0x99e <__stop_program>
