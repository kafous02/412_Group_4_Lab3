
TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005f6  00800100  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  008006f6  008006f6  00000e2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014fa  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e3  00000000  00000000  00002452  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae3  00000000  00000000  00002e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00003918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059e  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  00003fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000040e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	16 e0       	ldi	r17, 0x06	; 6
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 ea       	ldi	r30, 0xA0	; 160
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <UDR0+0xa>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 3f       	cpi	r26, 0xF6	; 246
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <UDR0+0x6>

000000d6 <__do_clear_bss>:
  d6:	27 e0       	ldi	r18, 0x07	; 7
  d8:	a6 ef       	ldi	r26, 0xF6	; 246
  da:	b6 e0       	ldi	r27, 0x06	; 6
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 30       	cpi	r26, 0x08	; 8
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9f 03 	call	0x73e	; 0x73e <main>
  ea:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Mega328P_Init>:
.set	temp,0				//Sets the value of temp to 0, can be changed later

.section ".text"			//Defines a new section called .text
.global Mega328P_Init
Mega328P_Init:
		ldi	r16,0x07		;PB0(R*W),PB1(RS),PB2(E) as fixed outputs
  f2:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		//Sets all bits of Port B to outputs
  f4:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			//Zeroes the r16 register
  f6:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		//Sets all of Port B to zero
  f8:	05 b9       	out	0x05, r16	; 5
		out	U2X0,r16		;initialize UART, 8bits, no parity, 1 stop, 9600
  fa:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			//Loads 0x0 into r17
  fc:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		//Loads 0x67 into r16
  fe:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		//Sets high part of Baud Rate 
 100:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts	UBRR0L,r16		//Sets low part of Baud Rate
 104:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ldi	r16,24			//Loads 24 into r16
 108:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		//Stores r24 in the the configuration register for serial communications. Enables RX complete interrupt and TX complete interrupt
 10a:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi	r16,6			//loads 6 into r16
 10e:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		//sets characters size to 8-bits
 110:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi r16,0x87		//initialize ADC
 114:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		//stores 0x87 into ADC configuration SRAM  location
 116:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		ldi r16,0x40		//Loads 0x40 into r16
 11a:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		//Stores the value of r16 into the ADC multiplexer selection memory space in SRAM
 11c:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ldi r16,0			//Loads 0 into r16
 120:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		//Stores 0 into ADCSRB memory space which puts ADC in free roaming mode
 122:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ldi r16,0xFE		//Loads 0xFE int r16
 126:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		//Stores 0xFE into DIDR0 which is the data input disable register
 128:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		ldi r16,0xFF		//student comment here
 12c:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		//student comment here
 12e:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		ret					//student comment here
 132:	08 95       	ret

00000134 <LCD_Write_Command>:
	
.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		//student comment here
 134:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0xFF		;PD0 - PD7 as outputs
 138:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//student comment here
 13a:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 13c:	00 91 f6 06 	lds	r16, 0x06F6	; 0x8006f6 <__data_end>
	out		PORTD,r16		//student comment here
 140:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			//student comment here
 142:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		//student comment here
 144:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 146:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	ldi		r16,0			//student comment here
 14a:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//student comment here
 14c:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 14e:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	call	UART_On			//student comment here
 152:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//student comment here
 156:	08 95       	ret

00000158 <LCD_Delay>:

LCD_Delay:
	ldi		r16,0xFA		//student comment here
 158:	0a ef       	ldi	r16, 0xFA	; 250

0000015a <D0>:
D0:	ldi		r17,0xFF		//student comment here
 15a:	1f ef       	ldi	r17, 0xFF	; 255

0000015c <D1>:
D1:	dec		r17				//student comment here
 15c:	1a 95       	dec	r17
	brne	D1				//student comment here
 15e:	f1 f7       	brne	.-4      	; 0x15c <D1>
	dec		r16				//student comment here
 160:	0a 95       	dec	r16
	brne	D0				//student comment here
 162:	d9 f7       	brne	.-10     	; 0x15a <D0>
	ret						//student comment here
 164:	08 95       	ret

00000166 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		//student comment here
 166:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0xFF		//student comment here
 16a:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//student comment here
 16c:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 16e:	00 91 f6 06 	lds	r16, 0x06F6	; 0x8006f6 <__data_end>
	out		PORTD,r16		//student comment here
 172:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			//student comment here
 174:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		//student comment here
 176:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 178:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	ldi		r16,0			//student comment here
 17c:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//student comment here
 17e:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 180:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	call	UART_On			//student comment here
 184:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//student comment here
 188:	08 95       	ret

0000018a <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		//student comment here
 18a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0x00		//student comment here
 18e:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		//student comment here
 190:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			//student comment here
 192:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		//student comment here
 194:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		//student comment here
 196:	00 93 f6 06 	sts	0x06F6, r16	; 0x8006f6 <__data_end>
	out		PORTB,0			//student comment here
 19a:	05 b8       	out	0x05, r0	; 5
	call	UART_On			//student comment here
 19c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//student comment here
 1a0:	08 95       	ret

000001a2 <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				//student comment here
 1a2:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			//student comment here
 1a4:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				//student comment here
 1a6:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			//student comment here
 1a8:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//student comment here
 1ac:	08 95       	ret

000001ae <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					//student comment here
 1ae:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				//student comment here
 1b0:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//student comment here
 1b4:	08 95       	ret

000001b6 <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//student comment here
 1b6:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//student comment here
 1ba:	07 ff       	sbrs	r16, 7
	ret							//student comment here
 1bc:	08 95       	ret
	lds		r16,UDR0			//student comment here
 1be:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	rjmp	UART_Clear			//student comment here
 1c2:	f9 cf       	rjmp	.-14     	; 0x1b6 <UART_Clear>

000001c4 <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//student comment here
 1c4:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//student comment here
 1c8:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			//student comment here
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <UART_Get>
	lds		r16,UDR0			//student comment here
 1cc:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		ASCII,r16			//student comment here
 1d0:	00 93 f9 06 	sts	0x06F9, r16	; 0x8006f9 <ASCII>
	ret							//student comment here
 1d4:	08 95       	ret

000001d6 <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//student comment here
 1d6:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r17,UDRE0			//student comment here
 1da:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			//student comment here
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <UART_Put>
	lds		r16,ASCII			//student comment here
 1de:	00 91 f9 06 	lds	r16, 0x06F9	; 0x8006f9 <ASCII>
	sts		UDR0,r16			//student comment here
 1e2:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	ret							//student comment here
 1e6:	08 95       	ret

000001e8 <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xC7			//student comment here
 1e8:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			//student comment here
 1ea:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

000001ee <A2V1>:
A2V1:	lds		r16,ADCSRA			//student comment here
 1ee:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbrc	r16,ADSC			//student comment here
 1f2:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				//student comment here
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <A2V1>
		lds		r16,ADCL			//student comment here
 1f6:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		sts		LADC,r16			//student comment here
 1fa:	00 93 02 07 	sts	0x0702, r16	; 0x800702 <LADC>
		lds		r16,ADCH			//student comment here
 1fe:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		sts		HADC,r16			//student comment here
 202:	00 93 f7 06 	sts	0x06F7, r16	; 0x8006f7 <HADC>
		ret							//student comment here
 206:	08 95       	ret

00000208 <EEPROM_Write>:

.global EEPROM_Write
EEPROM_Write:      
		sbic    EECR,EEPE
 208:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Write		; Wait for completion of previous write
 20a:	fe cf       	rjmp	.-4      	; 0x208 <EEPROM_Write>
		lds		r18,addressH			; Set up address (r18:r17) in address register
 20c:	20 91 03 07 	lds	r18, 0x0703	; 0x800703 <addressH>
		lds		r17,addressL
 210:	10 91 f8 06 	lds	r17, 0x06F8	; 0x8006f8 <addressL>
		lds		r16,eepromData				; Set up data in r16    
 214:	00 91 fa 06 	lds	r16, 0x06FA	; 0x8006fa <eepromData>
		out     EEARH, r18      
 218:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17			      
 21a:	11 bd       	out	0x21, r17	; 33
		out     EEDR,r16			; Write data (r16) to Data Register  
 21c:	00 bd       	out	0x20, r16	; 32
		sbi     EECR,EEMPE			; Write logical one to EEMPE
 21e:	fa 9a       	sbi	0x1f, 2	; 31
		sbi     EECR,EEPE			; Start eeprom write by setting EEPE
 220:	f9 9a       	sbi	0x1f, 1	; 31
		ret 
 222:	08 95       	ret

00000224 <EEPROM_Read>:

.global EEPROM_Read
EEPROM_Read:					    
		sbic    EECR,EEPE    
 224:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Read		; Wait for completion of previous write
 226:	fe cf       	rjmp	.-4      	; 0x224 <EEPROM_Read>
		lds		r18,addressH		; Set up address (r18:r17) in EEPROM address register
 228:	20 91 03 07 	lds	r18, 0x0703	; 0x800703 <addressH>
		lds		r17,addressL
 22c:	10 91 f8 06 	lds	r17, 0x06F8	; 0x8006f8 <addressL>
		ldi		r16,0x00   
 230:	00 e0       	ldi	r16, 0x00	; 0
		out     EEARH, r18   
 232:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17		   
 234:	11 bd       	out	0x21, r17	; 33
		sbi     EECR,EERE		; Start eeprom read by writing EERE
 236:	f8 9a       	sbi	0x1f, 0	; 31
		in      r16,EEDR		; Read data from Data Register
 238:	00 b5       	in	r16, 0x20	; 32
		sts		ASCII,r16  
 23a:	00 93 f9 06 	sts	0x06F9, r16	; 0x8006f9 <ASCII>
		ret
 23e:	08 95       	ret

00000240 <Baud4800>:
.global	Baud4800
Baud4800:
		out		U2X0, r16
 240:	01 b9       	out	0x01, r16	; 1
		ldi		r17, 0
 242:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0xCF		;Value chosen based on ATmega328pb data sheet
 244:	0f ec       	ldi	r16, 0xCF	; 207
		sts		UBRR0H, r17
 246:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 24a:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 24e:	08 95       	ret

00000250 <Baud9600>:
.global Baud9600
Baud9600:
		out		U2X0, r16
 250:	01 b9       	out	0x01, r16	; 1
		ldi		r17, 0
 252:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x67
 254:	07 e6       	ldi	r16, 0x67	; 103
		sts		UBRR0H, r17
 256:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 25a:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 25e:	08 95       	ret

00000260 <Baud14400>:
.global	Baud14400
Baud14400:
		out		U2X0, r16
 260:	01 b9       	out	0x01, r16	; 1
		ldi		r17, 0
 262:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x44
 264:	04 e4       	ldi	r16, 0x44	; 68
		sts		UBRR0H, r17
 266:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 26a:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 26e:	08 95       	ret

00000270 <Baud19200>:
.global	Baud19200
Baud19200:
		out		U2X0, r16
 270:	01 b9       	out	0x01, r16	; 1
		ldi		r17, 0
 272:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x44
 274:	04 e4       	ldi	r16, 0x44	; 68
		sts		UBRR0H, r17
 276:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 27a:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 27e:	08 95       	ret

00000280 <Baud38400>:
.global Baud38400
Baud38400:
		out		U2X0, r16
 280:	01 b9       	out	0x01, r16	; 1
		ldi		r17, 0
 282:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x19
 284:	09 e1       	ldi	r16, 0x19	; 25
		sts		UBRR0H, r17
 286:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 28a:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 28e:	08 95       	ret

00000290 <Baud57600>:
.global	Baud57600
Baud57600:
		out		U2X0, r16
 290:	01 b9       	out	0x01, r16	; 1
		ldi		r17, 0
 292:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x10
 294:	00 e1       	ldi	r16, 0x10	; 16
		sts		UBRR0H, r17
 296:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 29a:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 29e:	08 95       	ret

000002a0 <UART_Puts>:

char volts[5];					//string buffer for ADC output
int Acc;						//Accumulator for ADC use

void UART_Puts(const char *str)	//Display a string in the PC Terminal Program
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	while (*str)
 2a6:	98 81       	ld	r25, Y
 2a8:	99 23       	and	r25, r25
 2aa:	41 f0       	breq	.+16     	; 0x2bc <UART_Puts+0x1c>
 2ac:	21 96       	adiw	r28, 0x01	; 1
	{
		ASCII = *str++;
 2ae:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <ASCII>
		UART_Put();
 2b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Put>
char volts[5];					//string buffer for ADC output
int Acc;						//Accumulator for ADC use

void UART_Puts(const char *str)	//Display a string in the PC Terminal Program
{
	while (*str)
 2b6:	99 91       	ld	r25, Y+
 2b8:	91 11       	cpse	r25, r1
 2ba:	f9 cf       	rjmp	.-14     	; 0x2ae <UART_Puts+0xe>
	{
		ASCII = *str++;
		UART_Put();
	}
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <LCD_Puts>:

void LCD_Puts(const char *str)	//Display a string on the LCD Module
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	ec 01       	movw	r28, r24
	while (*str)
 2c8:	98 81       	ld	r25, Y
 2ca:	99 23       	and	r25, r25
 2cc:	41 f0       	breq	.+16     	; 0x2de <LCD_Puts+0x1c>
 2ce:	21 96       	adiw	r28, 0x01	; 1
	{
		DATA = *str++;
 2d0:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <__data_end>
		LCD_Write_Data();
 2d4:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Write_Data>
	}
}

void LCD_Puts(const char *str)	//Display a string on the LCD Module
{
	while (*str)
 2d8:	99 91       	ld	r25, Y+
 2da:	91 11       	cpse	r25, r1
 2dc:	f9 cf       	rjmp	.-14     	; 0x2d0 <LCD_Puts+0xe>
	{
		DATA = *str++;
		LCD_Write_Data();
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <Banner>:


void Banner(void)				//Display Tiny OS Banner on Terminal
{
	UART_Puts(MS1);
 2e4:	89 ed       	ldi	r24, 0xD9	; 217
 2e6:	96 e0       	ldi	r25, 0x06	; 6
 2e8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	UART_Puts(MS2);
 2ec:	82 ea       	ldi	r24, 0xA2	; 162
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	UART_Puts(MS4);
 2f4:	8e e6       	ldi	r24, 0x6E	; 110
 2f6:	96 e0       	ldi	r25, 0x06	; 6
 2f8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
 2fc:	08 95       	ret

000002fe <HELP>:
}

void HELP(void)						//Display available Tiny OS Commands on Terminal
{
	UART_Puts(MS3);
 2fe:	88 e7       	ldi	r24, 0x78	; 120
 300:	96 e0       	ldi	r25, 0x06	; 6
 302:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
 306:	08 95       	ret

00000308 <LCD>:
}

void LCD(void)						//Lite LCD demo
{
	DATA = 0x34;					//Student Comment Here
 308:	84 e3       	ldi	r24, 0x34	; 52
 30a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <__data_end>
	LCD_Write_Command();
 30e:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x08;					//Student Comment Here
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <__data_end>
	LCD_Write_Command();
 318:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x02;					//Student Comment Here
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <__data_end>
	LCD_Write_Command();
 322:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x06;					//Student Comment Here
 326:	86 e0       	ldi	r24, 0x06	; 6
 328:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <__data_end>
	LCD_Write_Command();
 32c:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x0f;					//Student Comment Here
 330:	8f e0       	ldi	r24, 0x0F	; 15
 332:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <__data_end>
	LCD_Write_Command();
 336:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	LCD_Puts("Hello ECE412!");
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_Puts>
 342:	08 95       	ret

00000344 <ADC>:
	always be able to return to command line.
	*/
}

void ADC(void)						//Lite Demo of the Analog to Digital Converter
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	volts[0x1]='.';
 348:	cd ef       	ldi	r28, 0xFD	; 253
 34a:	d6 e0       	ldi	r29, 0x06	; 6
 34c:	8e e2       	ldi	r24, 0x2E	; 46
 34e:	89 83       	std	Y+1, r24	; 0x01
	volts[0x3]=' ';
 350:	80 e2       	ldi	r24, 0x20	; 32
 352:	8b 83       	std	Y+3, r24	; 0x03
	volts[0x4]= 0;
 354:	1c 82       	std	Y+4, r1	; 0x04
	ADC_Get();
 356:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_Get>
	Acc = (((int)HADC) * 0x100 + (int)(LADC))*0xA;
 35a:	20 91 f7 06 	lds	r18, 0x06F7	; 0x8006f7 <HADC>
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	32 2f       	mov	r19, r18
 362:	22 27       	eor	r18, r18
 364:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <LADC>
 368:	28 0f       	add	r18, r24
 36a:	31 1d       	adc	r19, r1
 36c:	c9 01       	movw	r24, r18
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
	volts[0x0] = 48 + (Acc / 0x7FE);
 382:	ee ef       	ldi	r30, 0xFE	; 254
 384:	f7 e0       	ldi	r31, 0x07	; 7
 386:	bf 01       	movw	r22, r30
 388:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodhi4>
 38c:	26 2f       	mov	r18, r22
 38e:	30 e3       	ldi	r19, 0x30	; 48
 390:	36 0f       	add	r19, r22
 392:	38 83       	st	Y, r19
	Acc = Acc % 0x7FE;
	volts[0x2] = ((Acc *0xA) / 0x7FE) + 48;
 394:	ac 01       	movw	r20, r24
 396:	44 0f       	add	r20, r20
 398:	55 1f       	adc	r21, r21
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	84 0f       	add	r24, r20
 3a8:	95 1f       	adc	r25, r21
 3aa:	bf 01       	movw	r22, r30
 3ac:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodhi4>
 3b0:	30 e3       	ldi	r19, 0x30	; 48
 3b2:	36 0f       	add	r19, r22
 3b4:	3a 83       	std	Y+2, r19	; 0x02
	Acc = (Acc * 0xA) % 0x7FE;
 3b6:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <Acc+0x1>
 3ba:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <Acc>
	if (Acc >= 0x3FF) volts[0x2]++;
 3be:	8f 3f       	cpi	r24, 0xFF	; 255
 3c0:	93 40       	sbci	r25, 0x03	; 3
 3c2:	1c f0       	brlt	.+6      	; 0x3ca <ADC+0x86>
 3c4:	6f 5c       	subi	r22, 0xCF	; 207
 3c6:	60 93 ff 06 	sts	0x06FF, r22	; 0x8006ff <volts+0x2>
	if (volts[0x2] == 58)
 3ca:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <volts+0x2>
 3ce:	8a 33       	cpi	r24, 0x3A	; 58
 3d0:	31 f4       	brne	.+12     	; 0x3de <ADC+0x9a>
	{
		volts[0x2] = 48;
 3d2:	ed ef       	ldi	r30, 0xFD	; 253
 3d4:	f6 e0       	ldi	r31, 0x06	; 6
 3d6:	80 e3       	ldi	r24, 0x30	; 48
 3d8:	82 83       	std	Z+2, r24	; 0x02
		volts[0x0]++;
 3da:	2f 5c       	subi	r18, 0xCF	; 207
 3dc:	20 83       	st	Z, r18
	}
	UART_Puts(volts);
 3de:	8d ef       	ldi	r24, 0xFD	; 253
 3e0:	96 e0       	ldi	r25, 0x06	; 6
 3e2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	UART_Puts(MS6);
 3e6:	88 e4       	ldi	r24, 0x48	; 72
 3e8:	96 e0       	ldi	r25, 0x06	; 6
 3ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		The potentiometer simulates a thermistor, its varying resistance simulates the
		varying resistance of a thermistor as it is heated and cooled. See the thermistor
		equations in the lab 3 folder. User must always be able to return to command line.
	*/
	
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <ReadEEPROM>:
	UART_Puts("\r\n"); */
}

void ReadEEPROM(void)
{
	UART_Puts("\nEnter the upper bit of a valid EEPROM address to read from: ");
 3f4:	8e e0       	ldi	r24, 0x0E	; 14
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 3fc:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 400:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void ReadEEPROM(void)
{
	UART_Puts("\nEnter the upper bit of a valid EEPROM address to read from: ");
	ASCII = '\0';
	while(ASCII == '\0')
 404:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 408:	88 23       	and	r24, r24
 40a:	d1 f3       	breq	.-12     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		UART_Get();
	}
	addressH = ASCII;
 40c:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <addressH>
	UART_Puts("\nEnter the lower bit of a valid EEPROM address to read from: ");
 410:	8c e4       	ldi	r24, 0x4C	; 76
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 418:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 41c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>
		UART_Get();
	}
	addressH = ASCII;
	UART_Puts("\nEnter the lower bit of a valid EEPROM address to read from: ");
	ASCII = '\0';
	while(ASCII == '\0')
 420:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 424:	88 23       	and	r24, r24
 426:	d1 f3       	breq	.-12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		UART_Get();
	}
	addressL = ASCII;
 428:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <addressL>
	EEPROM_Read();
 42c:	0e 94 12 01 	call	0x224	; 0x224 <EEPROM_Read>
 430:	08 95       	ret

00000432 <WriteEEPROM>:
}

void WriteEEPROM(void)
{
	UART_Puts("\nEnter the upper bit of a valid EEPROM address to write to: ");
 432:	8a e8       	ldi	r24, 0x8A	; 138
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 43a:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 43e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void WriteEEPROM(void)
{
	UART_Puts("\nEnter the upper bit of a valid EEPROM address to write to: ");
	ASCII = '\0';
	while(ASCII == '\0')
 442:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 446:	88 23       	and	r24, r24
 448:	d1 f3       	breq	.-12     	; 0x43e <WriteEEPROM+0xc>
	{
		UART_Get();
	}
	addressH = ASCII;
 44a:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <addressH>
	UART_Puts("\nEnter the lower bit of a valid EEPROM address to write to: ");
 44e:	87 ec       	ldi	r24, 0xC7	; 199
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 456:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 45a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>
		UART_Get();
	}
	addressH = ASCII;
	UART_Puts("\nEnter the lower bit of a valid EEPROM address to write to: ");
	ASCII = '\0';
	while(ASCII == '\0')
 45e:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 462:	88 23       	and	r24, r24
 464:	d1 f3       	breq	.-12     	; 0x45a <WriteEEPROM+0x28>
	{
		UART_Get();
	}
	addressL = ASCII;
 466:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <addressL>
	UART_Puts("\nEnter the data to be stored: ");
 46a:	84 e0       	ldi	r24, 0x04	; 4
 46c:	92 e0       	ldi	r25, 0x02	; 2
 46e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 472:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 476:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>
		UART_Get();
	}
	addressL = ASCII;
	UART_Puts("\nEnter the data to be stored: ");
	ASCII = '\0';
	while(ASCII == '\0')
 47a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 47e:	88 23       	and	r24, r24
 480:	d1 f3       	breq	.-12     	; 0x476 <WriteEEPROM+0x44>
	{
		UART_Get();
	}
	eepromData = ASCII;
 482:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <eepromData>
	EEPROM_Write();
 486:	0e 94 04 01 	call	0x208	; 0x208 <EEPROM_Write>
	UART_Puts("\nThe data has been successfully written to the desired EEPROM address");
 48a:	83 e2       	ldi	r24, 0x23	; 35
 48c:	92 e0       	ldi	r25, 0x02	; 2
 48e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
 492:	08 95       	ret

00000494 <EEPROM>:
	
}

void EEPROM(void)
{
	UART_Puts("\r\n(R)ead or (W)rite");
 494:	89 e6       	ldi	r24, 0x69	; 105
 496:	92 e0       	ldi	r25, 0x02	; 2
 498:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 49c:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 4a0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void EEPROM(void)
{
	UART_Puts("\r\n(R)ead or (W)rite");
	ASCII = '\0';
	while(ASCII == '\0')
 4a4:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 4a8:	88 23       	and	r24, r24
 4aa:	d1 f3       	breq	.-12     	; 0x4a0 <EEPROM+0xc>
	{
		UART_Get();
	}
	switch(ASCII)
 4ac:	82 37       	cpi	r24, 0x72	; 114
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <EEPROM+0x22>
 4b0:	87 37       	cpi	r24, 0x77	; 119
 4b2:	21 f0       	breq	.+8      	; 0x4bc <EEPROM+0x28>
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <EEPROM+0x2e>
	{
		case 'R' | 'r':
			ReadEEPROM();
 4b6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ReadEEPROM>
		break;
 4ba:	08 95       	ret
		case 'W' | 'w':
			WriteEEPROM();
 4bc:	0e 94 19 02 	call	0x432	; 0x432 <WriteEEPROM>
		break;
 4c0:	08 95       	ret
		default:
			UART_Puts(MS5);
 4c2:	8f e4       	ldi	r24, 0x4F	; 79
 4c4:	96 e0       	ldi	r25, 0x06	; 6
 4c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
 4ca:	08 95       	ret

000004cc <ChangeBaud>:
	ChangeStopBits();
}

void ChangeBaud(void)
{
	UART_Puts("\nWhat Baud Rate would you like?\n");
 4cc:	8d e7       	ldi	r24, 0x7D	; 125
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	UART_Puts("(1)4800\n(2)9600\n(3)14400\n(4)19200\n(5)38400\n(6)57600");
 4d4:	8e e9       	ldi	r24, 0x9E	; 158
 4d6:	92 e0       	ldi	r25, 0x02	; 2
 4d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 4dc:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 4e0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>
void ChangeBaud(void)
{
	UART_Puts("\nWhat Baud Rate would you like?\n");
	UART_Puts("(1)4800\n(2)9600\n(3)14400\n(4)19200\n(5)38400\n(6)57600");
	ASCII = '\0';
	while(ASCII == '\0')
 4e4:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 4e8:	88 23       	and	r24, r24
 4ea:	d1 f3       	breq	.-12     	; 0x4e0 <ChangeBaud+0x14>
	{
		UART_Get();
	}
	switch(ASCII)
 4ec:	83 33       	cpi	r24, 0x33	; 51
 4ee:	d1 f0       	breq	.+52     	; 0x524 <ChangeBaud+0x58>
 4f0:	28 f4       	brcc	.+10     	; 0x4fc <ChangeBaud+0x30>
 4f2:	81 33       	cpi	r24, 0x31	; 49
 4f4:	49 f0       	breq	.+18     	; 0x508 <ChangeBaud+0x3c>
 4f6:	82 33       	cpi	r24, 0x32	; 50
 4f8:	71 f0       	breq	.+28     	; 0x516 <ChangeBaud+0x4a>
 4fa:	30 c0       	rjmp	.+96     	; 0x55c <ChangeBaud+0x90>
 4fc:	85 33       	cpi	r24, 0x35	; 53
 4fe:	01 f1       	breq	.+64     	; 0x540 <ChangeBaud+0x74>
 500:	c0 f0       	brcs	.+48     	; 0x532 <ChangeBaud+0x66>
 502:	86 33       	cpi	r24, 0x36	; 54
 504:	21 f1       	breq	.+72     	; 0x54e <ChangeBaud+0x82>
 506:	2a c0       	rjmp	.+84     	; 0x55c <ChangeBaud+0x90>
	{
		case '1':
			UART_Puts("\nBaud rate successfully changed to 4800");
 508:	82 ed       	ldi	r24, 0xD2	; 210
 50a:	92 e0       	ldi	r25, 0x02	; 2
 50c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
			Baud4800();
 510:	0e 94 20 01 	call	0x240	; 0x240 <Baud4800>
		break;
 514:	08 95       	ret
		case '2':
			UART_Puts("\nBaud rate successfully changed to 9600");
 516:	8a ef       	ldi	r24, 0xFA	; 250
 518:	92 e0       	ldi	r25, 0x02	; 2
 51a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
			Baud9600();
 51e:	0e 94 28 01 	call	0x250	; 0x250 <Baud9600>
		break;
 522:	08 95       	ret
		case '3':
			UART_Puts("\nBaud rate successfully changed to 14400");
 524:	82 e2       	ldi	r24, 0x22	; 34
 526:	93 e0       	ldi	r25, 0x03	; 3
 528:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
			Baud14400();
 52c:	0e 94 30 01 	call	0x260	; 0x260 <Baud14400>
		break;
 530:	08 95       	ret
		case '4':
			UART_Puts("\nBaud rate successfully changed to 19200");
 532:	8b e4       	ldi	r24, 0x4B	; 75
 534:	93 e0       	ldi	r25, 0x03	; 3
 536:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
			Baud19200();
 53a:	0e 94 38 01 	call	0x270	; 0x270 <Baud19200>
		break;
 53e:	08 95       	ret
		case '5':
			UART_Puts("\nBaud rate successfully changed to 38400");
 540:	84 e7       	ldi	r24, 0x74	; 116
 542:	93 e0       	ldi	r25, 0x03	; 3
 544:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
			Baud38400();
 548:	0e 94 40 01 	call	0x280	; 0x280 <Baud38400>
		break;
 54c:	08 95       	ret
		case '6':
			UART_Puts("\nBaud rate successfully changed to 57600");
 54e:	8d e9       	ldi	r24, 0x9D	; 157
 550:	93 e0       	ldi	r25, 0x03	; 3
 552:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
			Baud57600();
 556:	0e 94 48 01 	call	0x290	; 0x290 <Baud57600>
		break;
 55a:	08 95       	ret
		default:
		UART_Puts(MS5);
 55c:	8f e4       	ldi	r24, 0x4F	; 79
 55e:	96 e0       	ldi	r25, 0x06	; 6
 560:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
 564:	08 95       	ret

00000566 <ChangeDataBits>:
	}
}

void ChangeDataBits(void)
{
	UART_Puts("\nHow many data bits are desired? (5,6,7,8,9)");
 566:	86 ec       	ldi	r24, 0xC6	; 198
 568:	93 e0       	ldi	r25, 0x03	; 3
 56a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 56e:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 572:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void ChangeDataBits(void)
{
	UART_Puts("\nHow many data bits are desired? (5,6,7,8,9)");
	ASCII = '\0';
	while(ASCII == '\0')
 576:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 57a:	88 23       	and	r24, r24
 57c:	d1 f3       	breq	.-12     	; 0x572 <ChangeDataBits+0xc>
	{
		UART_Get();
	}
	switch(ASCII)
 57e:	87 33       	cpi	r24, 0x37	; 55
 580:	a9 f0       	breq	.+42     	; 0x5ac <ChangeDataBits+0x46>
 582:	28 f4       	brcc	.+10     	; 0x58e <ChangeDataBits+0x28>
 584:	85 33       	cpi	r24, 0x35	; 53
 586:	41 f0       	breq	.+16     	; 0x598 <ChangeDataBits+0x32>
 588:	86 33       	cpi	r24, 0x36	; 54
 58a:	59 f0       	breq	.+22     	; 0x5a2 <ChangeDataBits+0x3c>
 58c:	39 c0       	rjmp	.+114    	; 0x600 <ChangeDataBits+0x9a>
 58e:	88 33       	cpi	r24, 0x38	; 56
 590:	91 f0       	breq	.+36     	; 0x5b6 <ChangeDataBits+0x50>
 592:	89 33       	cpi	r24, 0x39	; 57
 594:	f1 f0       	breq	.+60     	; 0x5d2 <ChangeDataBits+0x6c>
 596:	34 c0       	rjmp	.+104    	; 0x600 <ChangeDataBits+0x9a>
	{
		case '5':
			UCSR0C |= (0<<1)&&(0<<2);
			UCSR0B |= (0<<2);
			UART_Puts("\nNumber of data bits has been changed to 5");
 598:	83 ef       	ldi	r24, 0xF3	; 243
 59a:	93 e0       	ldi	r25, 0x03	; 3
 59c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 5a0:	08 95       	ret
		case '6':
			UCSR0C |= (1<<1)&&(0<<2);
			UCSR0B |= (0<<2);
			UART_Puts("\nNumber of data bits has been changed to 6");
 5a2:	8e e1       	ldi	r24, 0x1E	; 30
 5a4:	94 e0       	ldi	r25, 0x04	; 4
 5a6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 5aa:	08 95       	ret
		case '7':
			UCSR0C |= (0<<1)&&(1<<2);
			UCSR0B |= (0<<2);
			UART_Puts("\nNumber of data bits has been changed to 7");
 5ac:	89 e4       	ldi	r24, 0x49	; 73
 5ae:	94 e0       	ldi	r25, 0x04	; 4
 5b0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 5b4:	08 95       	ret
		case '8':
			UCSR0C |= (1<<1)&&(1<<2);
 5b6:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <UCSR0C>
 5ba:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <UCSR0C+0x1>
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <UCSR0C+0x1>
 5c4:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <UCSR0C>
			UCSR0B |= (0<<2);
			UART_Puts("\nNumber of data bits has been changed to 8");
 5c8:	84 e7       	ldi	r24, 0x74	; 116
 5ca:	94 e0       	ldi	r25, 0x04	; 4
 5cc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 5d0:	08 95       	ret
		case '9':
			UCSR0C |= (1<<1)&&(1<<2);
 5d2:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <UCSR0C>
 5d6:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <UCSR0C+0x1>
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <UCSR0C+0x1>
 5e0:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <UCSR0C>
			UCSR0B |= (1<<2);
 5e4:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <UCSR0B>
 5e8:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <UCSR0B+0x1>
 5ec:	84 60       	ori	r24, 0x04	; 4
 5ee:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <UCSR0B+0x1>
 5f2:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <UCSR0B>
			UART_Puts("\nNumber of data bits has been changed to 9");
 5f6:	8f e9       	ldi	r24, 0x9F	; 159
 5f8:	94 e0       	ldi	r25, 0x04	; 4
 5fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 5fe:	08 95       	ret
		default:
			UART_Puts(MS5);
 600:	8f e4       	ldi	r24, 0x4F	; 79
 602:	96 e0       	ldi	r25, 0x06	; 6
 604:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
 608:	08 95       	ret

0000060a <ChangeParity>:
	}
}

void ChangeParity(void)
{
	UART_Puts("\nSelect a parity:\n(1)None\n(2)Odd\n(3)Even");
 60a:	8a ec       	ldi	r24, 0xCA	; 202
 60c:	94 e0       	ldi	r25, 0x04	; 4
 60e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 612:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 616:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void ChangeParity(void)
{
	UART_Puts("\nSelect a parity:\n(1)None\n(2)Odd\n(3)Even");
	ASCII = '\0';
	while(ASCII == '\0')
 61a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 61e:	88 23       	and	r24, r24
 620:	d1 f3       	breq	.-12     	; 0x616 <ChangeParity+0xc>
	{
		UART_Get();
	}
	switch(ASCII)
 622:	82 33       	cpi	r24, 0x32	; 50
 624:	49 f0       	breq	.+18     	; 0x638 <ChangeParity+0x2e>
 626:	83 33       	cpi	r24, 0x33	; 51
 628:	a9 f0       	breq	.+42     	; 0x654 <ChangeParity+0x4a>
 62a:	81 33       	cpi	r24, 0x31	; 49
 62c:	c1 f4       	brne	.+48     	; 0x65e <ChangeParity+0x54>
	{
		case '1':
			UCSR0C |= (0<<5)&&(0<<4);
			UART_Puts("\nNo parity was set");
 62e:	83 ef       	ldi	r24, 0xF3	; 243
 630:	94 e0       	ldi	r25, 0x04	; 4
 632:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 636:	08 95       	ret
		case '2':
			UCSR0C |= (1<<5)&&(1<<4);
 638:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <UCSR0C>
 63c:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <UCSR0C+0x1>
 640:	81 60       	ori	r24, 0x01	; 1
 642:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <UCSR0C+0x1>
 646:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <UCSR0C>
			UART_Puts("\nAn odd parity was set");
 64a:	86 e0       	ldi	r24, 0x06	; 6
 64c:	95 e0       	ldi	r25, 0x05	; 5
 64e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 652:	08 95       	ret
		case '3':
			UCSR0C |= (1<<5)&&(0<<4);
			UART_Puts("\nAn even parity was set");
 654:	8d e1       	ldi	r24, 0x1D	; 29
 656:	95 e0       	ldi	r25, 0x05	; 5
 658:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 65c:	08 95       	ret
		default:
			UART_Puts(MS5);
 65e:	8f e4       	ldi	r24, 0x4F	; 79
 660:	96 e0       	ldi	r25, 0x06	; 6
 662:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
 666:	08 95       	ret

00000668 <ChangeStopBits>:
	}
}

void ChangeStopBits(void)
{
	UART_Puts("\nSelect how many stop bits are desired: 1 or 2");
 668:	85 e3       	ldi	r24, 0x35	; 53
 66a:	95 e0       	ldi	r25, 0x05	; 5
 66c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';
 670:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 674:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void ChangeStopBits(void)
{
	UART_Puts("\nSelect how many stop bits are desired: 1 or 2");
	ASCII = '\0';
	while(ASCII == '\0')
 678:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 67c:	88 23       	and	r24, r24
 67e:	d1 f3       	breq	.-12     	; 0x674 <ChangeStopBits+0xc>
	{
		UART_Get();
	}
	switch(ASCII)
 680:	81 33       	cpi	r24, 0x31	; 49
 682:	19 f0       	breq	.+6      	; 0x68a <ChangeStopBits+0x22>
 684:	82 33       	cpi	r24, 0x32	; 50
 686:	79 f0       	breq	.+30     	; 0x6a6 <ChangeStopBits+0x3e>
 688:	13 c0       	rjmp	.+38     	; 0x6b0 <ChangeStopBits+0x48>
	{
		case '1':
			UCSR0C |= (1<<3);
 68a:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <UCSR0C>
 68e:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <UCSR0C+0x1>
 692:	88 60       	ori	r24, 0x08	; 8
 694:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <UCSR0C+0x1>
 698:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <UCSR0C>
			UART_Puts("\nOne stop bit will be provided");
 69c:	84 e6       	ldi	r24, 0x64	; 100
 69e:	95 e0       	ldi	r25, 0x05	; 5
 6a0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 6a4:	08 95       	ret
		case '2':
			UCSR0C |= (0<<3);
			UART_Puts("\nTwo stop bits will be provided");
 6a6:	83 e8       	ldi	r24, 0x83	; 131
 6a8:	95 e0       	ldi	r25, 0x05	; 5
 6aa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		break;
 6ae:	08 95       	ret
		default:
			UART_Puts(MS5);
 6b0:	8f e4       	ldi	r24, 0x4F	; 79
 6b2:	96 e0       	ldi	r25, 0x06	; 6
 6b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
 6b8:	08 95       	ret

000006ba <USART>:
	UART_Puts("\nThe data has been successfully written to the desired EEPROM address");
}

void USART(void)
{
	UART_Puts(MS7);
 6ba:	83 e2       	ldi	r24, 0x23	; 35
 6bc:	96 e0       	ldi	r25, 0x06	; 6
 6be:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ChangeBaud();
 6c2:	0e 94 66 02 	call	0x4cc	; 0x4cc <ChangeBaud>
	UART_Puts(MS8);
 6c6:	84 ef       	ldi	r24, 0xF4	; 244
 6c8:	95 e0       	ldi	r25, 0x05	; 5
 6ca:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ChangeDataBits();
 6ce:	0e 94 b3 02 	call	0x566	; 0x566 <ChangeDataBits>
	UART_Puts(MS9);
 6d2:	82 ed       	ldi	r24, 0xD2	; 210
 6d4:	95 e0       	ldi	r25, 0x05	; 5
 6d6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ChangeParity();
 6da:	0e 94 05 03 	call	0x60a	; 0x60a <ChangeParity>
	UART_Puts(MS10);
 6de:	83 ea       	ldi	r24, 0xA3	; 163
 6e0:	95 e0       	ldi	r25, 0x05	; 5
 6e2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ChangeStopBits();
 6e6:	0e 94 34 03 	call	0x668	; 0x668 <ChangeStopBits>
 6ea:	08 95       	ret

000006ec <Command>:
}


void Command(void)					//command interpreter
{
	UART_Puts(MS3);
 6ec:	88 e7       	ldi	r24, 0x78	; 120
 6ee:	96 e0       	ldi	r25, 0x06	; 6
 6f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
	ASCII = '\0';						
 6f4:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 6f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void Command(void)					//command interpreter
{
	UART_Puts(MS3);
	ASCII = '\0';						
	while (ASCII == '\0')
 6fc:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <ASCII>
 700:	88 23       	and	r24, r24
 702:	d1 f3       	breq	.-12     	; 0x6f8 <Command+0xc>
	{
		UART_Get();
	}
	switch (ASCII)
 704:	85 36       	cpi	r24, 0x65	; 101
 706:	79 f0       	breq	.+30     	; 0x726 <Command+0x3a>
 708:	18 f4       	brcc	.+6      	; 0x710 <Command+0x24>
 70a:	81 36       	cpi	r24, 0x61	; 97
 70c:	49 f0       	breq	.+18     	; 0x720 <Command+0x34>
 70e:	10 c0       	rjmp	.+32     	; 0x730 <Command+0x44>
 710:	8c 36       	cpi	r24, 0x6C	; 108
 712:	19 f0       	breq	.+6      	; 0x71a <Command+0x2e>
 714:	85 37       	cpi	r24, 0x75	; 117
 716:	51 f0       	breq	.+20     	; 0x72c <Command+0x40>
 718:	0b c0       	rjmp	.+22     	; 0x730 <Command+0x44>
	{
		case 'L' | 'l': LCD();
 71a:	0e 94 84 01 	call	0x308	; 0x308 <LCD>
		break;
 71e:	08 95       	ret
		case 'A' | 'a': ADC();
 720:	0e 94 a2 01 	call	0x344	; 0x344 <ADC>
		break;
 724:	08 95       	ret
		case 'E' | 'e': EEPROM();
 726:	0e 94 4a 02 	call	0x494	; 0x494 <EEPROM>
		break;
 72a:	08 95       	ret
		case 'U' | 'u': USART();
 72c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <USART>
		default:
		UART_Puts(MS5);
 730:	8f e4       	ldi	r24, 0x4F	; 79
 732:	96 e0       	ldi	r25, 0x06	; 6
 734:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UART_Puts>
		HELP();
 738:	0e 94 7f 01 	call	0x2fe	; 0x2fe <HELP>
 73c:	08 95       	ret

0000073e <main>:
	}
}

int main(void)
{
	Mega328P_Init();
 73e:	0e 94 79 00 	call	0xf2	; 0xf2 <Mega328P_Init>
	Banner();
 742:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Banner>
	while (1)
	{
		Command();				//infinite command loop
 746:	0e 94 76 03 	call	0x6ec	; 0x6ec <Command>
 74a:	fd cf       	rjmp	.-6      	; 0x746 <main+0x8>

0000074c <__divmodhi4>:
 74c:	97 fb       	bst	r25, 7
 74e:	07 2e       	mov	r0, r23
 750:	16 f4       	brtc	.+4      	; 0x756 <__divmodhi4+0xa>
 752:	00 94       	com	r0
 754:	07 d0       	rcall	.+14     	; 0x764 <__divmodhi4_neg1>
 756:	77 fd       	sbrc	r23, 7
 758:	09 d0       	rcall	.+18     	; 0x76c <__divmodhi4_neg2>
 75a:	0e 94 ba 03 	call	0x774	; 0x774 <__udivmodhi4>
 75e:	07 fc       	sbrc	r0, 7
 760:	05 d0       	rcall	.+10     	; 0x76c <__divmodhi4_neg2>
 762:	3e f4       	brtc	.+14     	; 0x772 <__divmodhi4_exit>

00000764 <__divmodhi4_neg1>:
 764:	90 95       	com	r25
 766:	81 95       	neg	r24
 768:	9f 4f       	sbci	r25, 0xFF	; 255
 76a:	08 95       	ret

0000076c <__divmodhi4_neg2>:
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255

00000772 <__divmodhi4_exit>:
 772:	08 95       	ret

00000774 <__udivmodhi4>:
 774:	aa 1b       	sub	r26, r26
 776:	bb 1b       	sub	r27, r27
 778:	51 e1       	ldi	r21, 0x11	; 17
 77a:	07 c0       	rjmp	.+14     	; 0x78a <__udivmodhi4_ep>

0000077c <__udivmodhi4_loop>:
 77c:	aa 1f       	adc	r26, r26
 77e:	bb 1f       	adc	r27, r27
 780:	a6 17       	cp	r26, r22
 782:	b7 07       	cpc	r27, r23
 784:	10 f0       	brcs	.+4      	; 0x78a <__udivmodhi4_ep>
 786:	a6 1b       	sub	r26, r22
 788:	b7 0b       	sbc	r27, r23

0000078a <__udivmodhi4_ep>:
 78a:	88 1f       	adc	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	5a 95       	dec	r21
 790:	a9 f7       	brne	.-22     	; 0x77c <__udivmodhi4_loop>
 792:	80 95       	com	r24
 794:	90 95       	com	r25
 796:	bc 01       	movw	r22, r24
 798:	cd 01       	movw	r24, r26
 79a:	08 95       	ret

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
