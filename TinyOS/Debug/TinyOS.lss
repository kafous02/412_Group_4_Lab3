
TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000620  00800100  00000798  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800720  00800720  00000e4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152e  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e3  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abf  00000000  00000000  00002e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00003948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059e  00000000  00000000  00003a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  0000401e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004115  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	17 e0       	ldi	r17, 0x07	; 7
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e9       	ldi	r30, 0x98	; 152
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <UDR0+0xa>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 32       	cpi	r26, 0x20	; 32
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <UDR0+0x6>

000000d6 <__do_clear_bss>:
  d6:	27 e0       	ldi	r18, 0x07	; 7
  d8:	a0 e2       	ldi	r26, 0x20	; 32
  da:	b7 e0       	ldi	r27, 0x07	; 7
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 33       	cpi	r26, 0x32	; 50
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9b 03 	call	0x736	; 0x736 <main>
  ea:	0c 94 ca 03 	jmp	0x794	; 0x794 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Mega328P_Init>:
.set	temp,0				//Sets the value of temp to 0, can be changed later

.section ".text"			//Defines a new section called .text
.global Mega328P_Init
Mega328P_Init:
		ldi	r16,0x07		;PB0(R*W),PB1(RS),PB2(E) as fixed outputs
  f2:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		//Sets all bits of Port B to outputs
  f4:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			//Zeroes the r16 register
  f6:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		//Sets all of Port B to zero
  f8:	05 b9       	out	0x05, r16	; 5
		out	U2X0,r16		;initialize UART, 8bits, no parity, 1 stop, 9600
  fa:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			//Loads 0x0 into r17
  fc:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		//Loads 0x67 into r16
  fe:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		//Sets high part of Baud Rate 
 100:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts	UBRR0L,r16		//Sets low part of Baud Rate
 104:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ldi	r16,24			//Loads 24 into r16
 108:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		//Stores r24 in the the configuration register for serial communications. Enables RX complete interrupt and TX complete interrupt
 10a:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi	r16,6			//loads 6 into r16
 10e:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		//sets characters size to 8-bits
 110:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi r16,0x87		//initialize ADC
 114:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		//stores 0x87 into ADC configuration SRAM  location
 116:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		ldi r16,0x40		//Loads 0x40 into r16
 11a:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		//Stores the value of r16 into the ADC multiplexer selection memory space in SRAM
 11c:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ldi r16,0			//Loads 0 into r16
 120:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		//Stores 0 into ADCSRB memory space which puts ADC in free roaming mode
 122:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ldi r16,0xFE		//Loads 0xFE int r16
 126:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		//Stores 0xFE into DIDR0 which is the data input disable register
 128:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		ldi r16,0xFF		//student comment here
 12c:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		//student comment here
 12e:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		ret					//student comment here
 132:	08 95       	ret

00000134 <LCD_Write_Command>:
	
.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		//student comment here
 134:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0xFF		;PD0 - PD7 as outputs
 138:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//student comment here
 13a:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 13c:	00 91 20 07 	lds	r16, 0x0720	; 0x800720 <__data_end>
	out		PORTD,r16		//student comment here
 140:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			//student comment here
 142:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		//student comment here
 144:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 146:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	ldi		r16,0			//student comment here
 14a:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//student comment here
 14c:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 14e:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	call	UART_On			//student comment here
 152:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//student comment here
 156:	08 95       	ret

00000158 <LCD_Delay>:

LCD_Delay:
	ldi		r16,0xFA		//student comment here
 158:	0a ef       	ldi	r16, 0xFA	; 250

0000015a <D0>:
D0:	ldi		r17,0xFF		//student comment here
 15a:	1f ef       	ldi	r17, 0xFF	; 255

0000015c <D1>:
D1:	dec		r17				//student comment here
 15c:	1a 95       	dec	r17
	brne	D1				//student comment here
 15e:	f1 f7       	brne	.-4      	; 0x15c <D1>
	dec		r16				//student comment here
 160:	0a 95       	dec	r16
	brne	D0				//student comment here
 162:	d9 f7       	brne	.-10     	; 0x15a <D0>
	ret						//student comment here
 164:	08 95       	ret

00000166 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		//student comment here
 166:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0xFF		//student comment here
 16a:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//student comment here
 16c:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 16e:	00 91 20 07 	lds	r16, 0x0720	; 0x800720 <__data_end>
	out		PORTD,r16		//student comment here
 172:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			//student comment here
 174:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		//student comment here
 176:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 178:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	ldi		r16,0			//student comment here
 17c:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//student comment here
 17e:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 180:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Delay>
	call	UART_On			//student comment here
 184:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//student comment here
 188:	08 95       	ret

0000018a <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		//student comment here
 18a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_Off>
	ldi		r16,0x00		//student comment here
 18e:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		//student comment here
 190:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			//student comment here
 192:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		//student comment here
 194:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		//student comment here
 196:	00 93 20 07 	sts	0x0720, r16	; 0x800720 <__data_end>
	out		PORTB,0			//student comment here
 19a:	05 b8       	out	0x05, r0	; 5
	call	UART_On			//student comment here
 19c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_On>
	ret						//student comment here
 1a0:	08 95       	ret

000001a2 <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				//student comment here
 1a2:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			//student comment here
 1a4:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				//student comment here
 1a6:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			//student comment here
 1a8:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//student comment here
 1ac:	08 95       	ret

000001ae <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					//student comment here
 1ae:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				//student comment here
 1b0:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//student comment here
 1b4:	08 95       	ret

000001b6 <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//student comment here
 1b6:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//student comment here
 1ba:	07 ff       	sbrs	r16, 7
	ret							//student comment here
 1bc:	08 95       	ret
	lds		r16,UDR0			//student comment here
 1be:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	rjmp	UART_Clear			//student comment here
 1c2:	f9 cf       	rjmp	.-14     	; 0x1b6 <UART_Clear>

000001c4 <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//student comment here
 1c4:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//student comment here
 1c8:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			//student comment here
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <UART_Get>
	lds		r16,UDR0			//student comment here
 1cc:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		ASCII,r16			//student comment here
 1d0:	00 93 23 07 	sts	0x0723, r16	; 0x800723 <ASCII>
	ret							//student comment here
 1d4:	08 95       	ret

000001d6 <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//student comment here
 1d6:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r17,UDRE0			//student comment here
 1da:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			//student comment here
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <UART_Put>
	lds		r16,ASCII			//student comment here
 1de:	00 91 23 07 	lds	r16, 0x0723	; 0x800723 <ASCII>
	sts		UDR0,r16			//student comment here
 1e2:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	ret							//student comment here
 1e6:	08 95       	ret

000001e8 <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xC7			//student comment here
 1e8:	07 ec       	ldi	r16, 0xC7	; 199
		sts		ADCSRA,r16			//student comment here
 1ea:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

000001ee <A2V1>:
A2V1:	lds		r16,ADCSRA			//student comment here
 1ee:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbrc	r16,ADSC			//student comment here
 1f2:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				//student comment here
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <A2V1>
		lds		r16,ADCL			//student comment here
 1f6:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		sts		LADC,r16			//student comment here
 1fa:	00 93 2c 07 	sts	0x072C, r16	; 0x80072c <LADC>
		lds		r16,ADCH			//student comment here
 1fe:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		sts		HADC,r16			//student comment here
 202:	00 93 21 07 	sts	0x0721, r16	; 0x800721 <HADC>
		ret							//student comment here
 206:	08 95       	ret

00000208 <EEPROM_Write>:

.global EEPROM_Write
EEPROM_Write:      
		sbic    EECR,EEPE
 208:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Write		; Wait for completion of previous write
 20a:	fe cf       	rjmp	.-4      	; 0x208 <EEPROM_Write>
		lds		r18,addressH			; Set up address (r18:r17) in address register
 20c:	20 91 2d 07 	lds	r18, 0x072D	; 0x80072d <addressH>
		lds		r17,addressL
 210:	10 91 22 07 	lds	r17, 0x0722	; 0x800722 <addressL>
		lds		r16,eepromData				; Set up data in r16    
 214:	00 91 24 07 	lds	r16, 0x0724	; 0x800724 <eepromData>
		out     EEARH, r18      
 218:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17			      
 21a:	11 bd       	out	0x21, r17	; 33
		out     EEDR,r16			; Write data (r16) to Data Register  
 21c:	00 bd       	out	0x20, r16	; 32
		sbi     EECR,EEMPE			; Write logical one to EEMPE
 21e:	fa 9a       	sbi	0x1f, 2	; 31
		sbi     EECR,EEPE			; Start eeprom write by setting EEPE
 220:	f9 9a       	sbi	0x1f, 1	; 31
		ret 
 222:	08 95       	ret

00000224 <EEPROM_Read>:

.global EEPROM_Read
EEPROM_Read:					    
		sbic    EECR,EEPE    
 224:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Read		; Wait for completion of previous write
 226:	fe cf       	rjmp	.-4      	; 0x224 <EEPROM_Read>
		lds		r18,addressH		; Set up address (r18:r17) in EEPROM address register
 228:	20 91 2d 07 	lds	r18, 0x072D	; 0x80072d <addressH>
		lds		r17,addressL
 22c:	10 91 22 07 	lds	r17, 0x0722	; 0x800722 <addressL>
		ldi		r16,0x00   
 230:	00 e0       	ldi	r16, 0x00	; 0
		out     EEARH, r18   
 232:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17		   
 234:	11 bd       	out	0x21, r17	; 33
		sbi     EECR,EERE		; Start eeprom read by writing EERE
 236:	f8 9a       	sbi	0x1f, 0	; 31
		in      r16,EEDR		; Read data from Data Register
 238:	00 b5       	in	r16, 0x20	; 32
		sts		ASCII,r16  
 23a:	00 93 23 07 	sts	0x0723, r16	; 0x800723 <ASCII>
		ret
 23e:	08 95       	ret

00000240 <Baud4800>:
		;out		U2X0, r16
		;ldi		r17, 0
		;ldi		r16, 0xCF		;Value chosen based on ATmega328pb data sheet
		;sts		UBRR0H, r17
		;sts		UBRR0L, r16
		ret
 240:	08 95       	ret

00000242 <Baud9600>:
.global Baud9600
Baud9600:
		;out		U2X0, r16
		ldi		r17, 0
 242:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x67
 244:	07 e6       	ldi	r16, 0x67	; 103
		sts		UBRR0H, r17
 246:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 24a:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 24e:	08 95       	ret

00000250 <Baud14400>:
.global	Baud14400
Baud14400:
		;out		U2X0, r16
		ldi		r17, 0
 250:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x44
 252:	04 e4       	ldi	r16, 0x44	; 68
		sts		UBRR0H, r17
 254:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 258:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 25c:	08 95       	ret

0000025e <Baud19200>:
.global	Baud19200
Baud19200:
		;out		U2X0, r16
		ldi		r17, 0
 25e:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x44
 260:	04 e4       	ldi	r16, 0x44	; 68
		sts		UBRR0H, r17
 262:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 266:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 26a:	08 95       	ret

0000026c <Baud38400>:
.global Baud38400
Baud38400:
		;out		U2X0, r16
		ldi		r17, 0
 26c:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x19
 26e:	09 e1       	ldi	r16, 0x19	; 25
		sts		UBRR0H, r17
 270:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 274:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 278:	08 95       	ret

0000027a <Baud57600>:
.global	Baud57600
Baud57600:
		;out		U2X0, r16
		ldi		r17, 0
 27a:	10 e0       	ldi	r17, 0x00	; 0
		ldi		r16, 0x10
 27c:	00 e1       	ldi	r16, 0x10	; 16
		sts		UBRR0H, r17
 27e:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts		UBRR0L, r16
 282:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ret
 286:	08 95       	ret

00000288 <UART_Puts>:

char volts[5];					//string buffer for ADC output
int Acc;						//Accumulator for ADC use

void UART_Puts(const char *str)	//Display a string in the PC Terminal Program
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	ec 01       	movw	r28, r24
	while (*str)
 28e:	98 81       	ld	r25, Y
 290:	99 23       	and	r25, r25
 292:	41 f0       	breq	.+16     	; 0x2a4 <UART_Puts+0x1c>
 294:	21 96       	adiw	r28, 0x01	; 1
	{
		ASCII = *str++;
 296:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <ASCII>
		UART_Put();
 29a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Put>
char volts[5];					//string buffer for ADC output
int Acc;						//Accumulator for ADC use

void UART_Puts(const char *str)	//Display a string in the PC Terminal Program
{
	while (*str)
 29e:	99 91       	ld	r25, Y+
 2a0:	91 11       	cpse	r25, r1
 2a2:	f9 cf       	rjmp	.-14     	; 0x296 <UART_Puts+0xe>
	{
		ASCII = *str++;
		UART_Put();
	}
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <LCD_Puts>:

void LCD_Puts(const char *str)	//Display a string on the LCD Module
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ec 01       	movw	r28, r24
	while (*str)
 2b0:	98 81       	ld	r25, Y
 2b2:	99 23       	and	r25, r25
 2b4:	41 f0       	breq	.+16     	; 0x2c6 <LCD_Puts+0x1c>
 2b6:	21 96       	adiw	r28, 0x01	; 1
	{
		DATA = *str++;
 2b8:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <__data_end>
		LCD_Write_Data();
 2bc:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Write_Data>
	}
}

void LCD_Puts(const char *str)	//Display a string on the LCD Module
{
	while (*str)
 2c0:	99 91       	ld	r25, Y+
 2c2:	91 11       	cpse	r25, r1
 2c4:	f9 cf       	rjmp	.-14     	; 0x2b8 <LCD_Puts+0xe>
	{
		DATA = *str++;
		LCD_Write_Data();
	}
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <Banner>:


void Banner(void)				//Display Tiny OS Banner on Terminal
{
	UART_Puts(MS1);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	97 e0       	ldi	r25, 0x07	; 7
 2d0:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	UART_Puts(MS2);
 2d4:	8c ec       	ldi	r24, 0xCC	; 204
 2d6:	96 e0       	ldi	r25, 0x06	; 6
 2d8:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	UART_Puts(MS4);
 2dc:	88 e9       	ldi	r24, 0x98	; 152
 2de:	96 e0       	ldi	r25, 0x06	; 6
 2e0:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
 2e4:	08 95       	ret

000002e6 <HELP>:
}

void HELP(void)						//Display available Tiny OS Commands on Terminal
{
	UART_Puts(MS3);
 2e6:	82 ea       	ldi	r24, 0xA2	; 162
 2e8:	96 e0       	ldi	r25, 0x06	; 6
 2ea:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
 2ee:	08 95       	ret

000002f0 <LCD>:
}

void LCD(void)						//Lite LCD demo
{
	DATA = 0x34;					//Student Comment Here
 2f0:	84 e3       	ldi	r24, 0x34	; 52
 2f2:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__data_end>
	LCD_Write_Command();
 2f6:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x08;					//Student Comment Here
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__data_end>
	LCD_Write_Command();
 300:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x02;					//Student Comment Here
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__data_end>
	LCD_Write_Command();
 30a:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x06;					//Student Comment Here
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__data_end>
	LCD_Write_Command();
 314:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	DATA = 0x0f;					//Student Comment Here
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__data_end>
	LCD_Write_Command();
 31e:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Command>
	LCD_Puts("Hello ECE412!");
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Puts>
 32a:	08 95       	ret

0000032c <ADC>:
	always be able to return to command line.
	*/
}

void ADC(void)						//Lite Demo of the Analog to Digital Converter
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
	volts[0x1]='.';
 330:	c7 e2       	ldi	r28, 0x27	; 39
 332:	d7 e0       	ldi	r29, 0x07	; 7
 334:	8e e2       	ldi	r24, 0x2E	; 46
 336:	89 83       	std	Y+1, r24	; 0x01
	volts[0x3]=' ';
 338:	80 e2       	ldi	r24, 0x20	; 32
 33a:	8b 83       	std	Y+3, r24	; 0x03
	volts[0x4]= 0;
 33c:	1c 82       	std	Y+4, r1	; 0x04
	ADC_Get();
 33e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_Get>
	Acc = (((int)HADC) * 0x100 + (int)(LADC))*0xA;
 342:	20 91 21 07 	lds	r18, 0x0721	; 0x800721 <HADC>
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	32 2f       	mov	r19, r18
 34a:	22 27       	eor	r18, r18
 34c:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <LADC>
 350:	28 0f       	add	r18, r24
 352:	31 1d       	adc	r19, r1
 354:	c9 01       	movw	r24, r18
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	82 0f       	add	r24, r18
 368:	93 1f       	adc	r25, r19
	volts[0x0] = 48 + (Acc / 0x7FE);
 36a:	ee ef       	ldi	r30, 0xFE	; 254
 36c:	f7 e0       	ldi	r31, 0x07	; 7
 36e:	bf 01       	movw	r22, r30
 370:	0e 94 a2 03 	call	0x744	; 0x744 <__divmodhi4>
 374:	26 2f       	mov	r18, r22
 376:	30 e3       	ldi	r19, 0x30	; 48
 378:	36 0f       	add	r19, r22
 37a:	38 83       	st	Y, r19
	Acc = Acc % 0x7FE;
	volts[0x2] = ((Acc *0xA) / 0x7FE) + 48;
 37c:	ac 01       	movw	r20, r24
 37e:	44 0f       	add	r20, r20
 380:	55 1f       	adc	r21, r21
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	84 0f       	add	r24, r20
 390:	95 1f       	adc	r25, r21
 392:	bf 01       	movw	r22, r30
 394:	0e 94 a2 03 	call	0x744	; 0x744 <__divmodhi4>
 398:	30 e3       	ldi	r19, 0x30	; 48
 39a:	36 0f       	add	r19, r22
 39c:	3a 83       	std	Y+2, r19	; 0x02
	Acc = (Acc * 0xA) % 0x7FE;
 39e:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <Acc+0x1>
 3a2:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <Acc>
	if (Acc >= 0x3FF) volts[0x2]++;
 3a6:	8f 3f       	cpi	r24, 0xFF	; 255
 3a8:	93 40       	sbci	r25, 0x03	; 3
 3aa:	1c f0       	brlt	.+6      	; 0x3b2 <ADC+0x86>
 3ac:	6f 5c       	subi	r22, 0xCF	; 207
 3ae:	60 93 29 07 	sts	0x0729, r22	; 0x800729 <volts+0x2>
	if (volts[0x2] == 58)
 3b2:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <volts+0x2>
 3b6:	8a 33       	cpi	r24, 0x3A	; 58
 3b8:	31 f4       	brne	.+12     	; 0x3c6 <ADC+0x9a>
	{
		volts[0x2] = 48;
 3ba:	e7 e2       	ldi	r30, 0x27	; 39
 3bc:	f7 e0       	ldi	r31, 0x07	; 7
 3be:	80 e3       	ldi	r24, 0x30	; 48
 3c0:	82 83       	std	Z+2, r24	; 0x02
		volts[0x0]++;
 3c2:	2f 5c       	subi	r18, 0xCF	; 207
 3c4:	20 83       	st	Z, r18
	}
	UART_Puts(volts);
 3c6:	87 e2       	ldi	r24, 0x27	; 39
 3c8:	97 e0       	ldi	r25, 0x07	; 7
 3ca:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	UART_Puts(MS6);
 3ce:	82 e7       	ldi	r24, 0x72	; 114
 3d0:	96 e0       	ldi	r25, 0x06	; 6
 3d2:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		The potentiometer simulates a thermistor, its varying resistance simulates the
		varying resistance of a thermistor as it is heated and cooled. See the thermistor
		equations in the lab 3 folder. User must always be able to return to command line.
	*/
	
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <ReadEEPROM>:
	UART_Puts("\r\n"); */
}

void ReadEEPROM(void)
{
	UART_Puts("\r\nEnter the upper bit of a valid EEPROM address to read from: ");
 3dc:	8e e0       	ldi	r24, 0x0E	; 14
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 3e4:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 3e8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void ReadEEPROM(void)
{
	UART_Puts("\r\nEnter the upper bit of a valid EEPROM address to read from: ");
	ASCII = '\0';
	while(ASCII == '\0')
 3ec:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 3f0:	88 23       	and	r24, r24
 3f2:	d1 f3       	breq	.-12     	; 0x3e8 <ReadEEPROM+0xc>
	{
		UART_Get();
	}
	addressH = ASCII;
 3f4:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <addressH>
	UART_Puts("\r\nEnter the lower bit of a valid EEPROM address to read from: ");
 3f8:	8d e4       	ldi	r24, 0x4D	; 77
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 400:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 404:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>
		UART_Get();
	}
	addressH = ASCII;
	UART_Puts("\r\nEnter the lower bit of a valid EEPROM address to read from: ");
	ASCII = '\0';
	while(ASCII == '\0')
 408:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 40c:	88 23       	and	r24, r24
 40e:	d1 f3       	breq	.-12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		UART_Get();
	}
	addressL = ASCII;
 410:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <addressL>
	EEPROM_Read();
 414:	0e 94 12 01 	call	0x224	; 0x224 <EEPROM_Read>
 418:	08 95       	ret

0000041a <WriteEEPROM>:
}

void WriteEEPROM(void)
{
	UART_Puts("\r\nEnter the upper bit of a valid EEPROM address to write to: ");
 41a:	8c e8       	ldi	r24, 0x8C	; 140
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 422:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 426:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void WriteEEPROM(void)
{
	UART_Puts("\r\nEnter the upper bit of a valid EEPROM address to write to: ");
	ASCII = '\0';
	while(ASCII == '\0')
 42a:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 42e:	88 23       	and	r24, r24
 430:	d1 f3       	breq	.-12     	; 0x426 <WriteEEPROM+0xc>
	{
		UART_Get();
	}
	addressH = ASCII;
 432:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <addressH>
	UART_Puts("\r\nEnter the lower bit of a valid EEPROM address to write to: ");
 436:	8a ec       	ldi	r24, 0xCA	; 202
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 43e:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 442:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>
		UART_Get();
	}
	addressH = ASCII;
	UART_Puts("\r\nEnter the lower bit of a valid EEPROM address to write to: ");
	ASCII = '\0';
	while(ASCII == '\0')
 446:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 44a:	88 23       	and	r24, r24
 44c:	d1 f3       	breq	.-12     	; 0x442 <WriteEEPROM+0x28>
	{
		UART_Get();
	}
	addressL = ASCII;
 44e:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <addressL>
	UART_Puts("\r\nEnter the data to be stored: ");
 452:	88 e0       	ldi	r24, 0x08	; 8
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 45a:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 45e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>
		UART_Get();
	}
	addressL = ASCII;
	UART_Puts("\r\nEnter the data to be stored: ");
	ASCII = '\0';
	while(ASCII == '\0')
 462:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 466:	88 23       	and	r24, r24
 468:	d1 f3       	breq	.-12     	; 0x45e <WriteEEPROM+0x44>
	{
		UART_Get();
	}
	eepromData = ASCII;
 46a:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <eepromData>
	EEPROM_Write();
 46e:	0e 94 04 01 	call	0x208	; 0x208 <EEPROM_Write>
	UART_Puts("\r\nThe data has been successfully written to the desired EEPROM address");
 472:	88 e2       	ldi	r24, 0x28	; 40
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
 47a:	08 95       	ret

0000047c <EEPROM>:
	
}

void EEPROM(void)
{
	UART_Puts("\r\n(R)ead or (W)rite");
 47c:	8f e6       	ldi	r24, 0x6F	; 111
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 484:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 488:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void EEPROM(void)
{
	UART_Puts("\r\n(R)ead or (W)rite");
	ASCII = '\0';
	while(ASCII == '\0')
 48c:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 490:	88 23       	and	r24, r24
 492:	d1 f3       	breq	.-12     	; 0x488 <EEPROM+0xc>
	{
		UART_Get();
	}
	switch(ASCII)
 494:	82 37       	cpi	r24, 0x72	; 114
 496:	19 f0       	breq	.+6      	; 0x49e <EEPROM+0x22>
 498:	87 37       	cpi	r24, 0x77	; 119
 49a:	21 f0       	breq	.+8      	; 0x4a4 <EEPROM+0x28>
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <EEPROM+0x2e>
	{
		case 'R' | 'r':
			ReadEEPROM();
 49e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ReadEEPROM>
		break;
 4a2:	08 95       	ret
		case 'W' | 'w':
			WriteEEPROM();
 4a4:	0e 94 0d 02 	call	0x41a	; 0x41a <WriteEEPROM>
		break;
 4a8:	08 95       	ret
		default:
			UART_Puts(MS5);
 4aa:	89 e7       	ldi	r24, 0x79	; 121
 4ac:	96 e0       	ldi	r25, 0x06	; 6
 4ae:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
 4b2:	08 95       	ret

000004b4 <ChangeBaud>:
	ChangeStopBits();
}

void ChangeBaud(void)
{
	UART_Puts("\r\nWhat Baud Rate would you like?\n");
 4b4:	83 e8       	ldi	r24, 0x83	; 131
 4b6:	92 e0       	ldi	r25, 0x02	; 2
 4b8:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	UART_Puts("\r\n(1)4800\r\n(2)9600\r\n(3)14400\r\n(4)19200\r\n(5)38400\r\n(6)57600");
 4bc:	85 ea       	ldi	r24, 0xA5	; 165
 4be:	92 e0       	ldi	r25, 0x02	; 2
 4c0:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 4c4:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 4c8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>
void ChangeBaud(void)
{
	UART_Puts("\r\nWhat Baud Rate would you like?\n");
	UART_Puts("\r\n(1)4800\r\n(2)9600\r\n(3)14400\r\n(4)19200\r\n(5)38400\r\n(6)57600");
	ASCII = '\0';
	while(ASCII == '\0')
 4cc:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 4d0:	88 23       	and	r24, r24
 4d2:	d1 f3       	breq	.-12     	; 0x4c8 <ChangeBaud+0x14>
	{
		UART_Get();
	}
	switch(ASCII)
 4d4:	83 33       	cpi	r24, 0x33	; 51
 4d6:	d1 f0       	breq	.+52     	; 0x50c <ChangeBaud+0x58>
 4d8:	28 f4       	brcc	.+10     	; 0x4e4 <ChangeBaud+0x30>
 4da:	81 33       	cpi	r24, 0x31	; 49
 4dc:	49 f0       	breq	.+18     	; 0x4f0 <ChangeBaud+0x3c>
 4de:	82 33       	cpi	r24, 0x32	; 50
 4e0:	71 f0       	breq	.+28     	; 0x4fe <ChangeBaud+0x4a>
 4e2:	30 c0       	rjmp	.+96     	; 0x544 <ChangeBaud+0x90>
 4e4:	85 33       	cpi	r24, 0x35	; 53
 4e6:	01 f1       	breq	.+64     	; 0x528 <ChangeBaud+0x74>
 4e8:	c0 f0       	brcs	.+48     	; 0x51a <ChangeBaud+0x66>
 4ea:	86 33       	cpi	r24, 0x36	; 54
 4ec:	21 f1       	breq	.+72     	; 0x536 <ChangeBaud+0x82>
 4ee:	2a c0       	rjmp	.+84     	; 0x544 <ChangeBaud+0x90>
	{
		case '1':
			UART_Puts("\r\nBaud rate successfully changed to 4800");
 4f0:	80 ee       	ldi	r24, 0xE0	; 224
 4f2:	92 e0       	ldi	r25, 0x02	; 2
 4f4:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			Baud4800();
 4f8:	0e 94 20 01 	call	0x240	; 0x240 <Baud4800>
		break;
 4fc:	08 95       	ret
		case '2':
			UART_Puts("\r\nBaud rate successfully changed to 9600");
 4fe:	89 e0       	ldi	r24, 0x09	; 9
 500:	93 e0       	ldi	r25, 0x03	; 3
 502:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			Baud9600();
 506:	0e 94 21 01 	call	0x242	; 0x242 <Baud9600>
		break;
 50a:	08 95       	ret
		case '3':
			UART_Puts("\r\nBaud rate successfully changed to 14400");
 50c:	82 e3       	ldi	r24, 0x32	; 50
 50e:	93 e0       	ldi	r25, 0x03	; 3
 510:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			Baud14400();
 514:	0e 94 28 01 	call	0x250	; 0x250 <Baud14400>
		break;
 518:	08 95       	ret
		case '4':
			UART_Puts("\r\nBaud rate successfully changed to 19200");
 51a:	8c e5       	ldi	r24, 0x5C	; 92
 51c:	93 e0       	ldi	r25, 0x03	; 3
 51e:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			Baud19200();
 522:	0e 94 2f 01 	call	0x25e	; 0x25e <Baud19200>
		break;
 526:	08 95       	ret
		case '5':
			UART_Puts("\r\nBaud rate successfully changed to 38400");
 528:	86 e8       	ldi	r24, 0x86	; 134
 52a:	93 e0       	ldi	r25, 0x03	; 3
 52c:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			Baud38400();
 530:	0e 94 36 01 	call	0x26c	; 0x26c <Baud38400>
		break;
 534:	08 95       	ret
		case '6':
			UART_Puts("\r\nBaud rate successfully changed to 57600");
 536:	80 eb       	ldi	r24, 0xB0	; 176
 538:	93 e0       	ldi	r25, 0x03	; 3
 53a:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			Baud57600();
 53e:	0e 94 3d 01 	call	0x27a	; 0x27a <Baud57600>
		break;
 542:	08 95       	ret
		default:
			UART_Puts(MS5);
 544:	89 e7       	ldi	r24, 0x79	; 121
 546:	96 e0       	ldi	r25, 0x06	; 6
 548:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			ChangeBaud();
 54c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ChangeBaud>
 550:	08 95       	ret

00000552 <ChangeDataBits>:
	}
}

void ChangeDataBits(void)
{
	UART_Puts("\r\nHow many data bits are desired? (5,6,7,8,9)");
 552:	8a ed       	ldi	r24, 0xDA	; 218
 554:	93 e0       	ldi	r25, 0x03	; 3
 556:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 55a:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 55e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void ChangeDataBits(void)
{
	UART_Puts("\r\nHow many data bits are desired? (5,6,7,8,9)");
	ASCII = '\0';
	while(ASCII == '\0')
 562:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 566:	88 23       	and	r24, r24
 568:	d1 f3       	breq	.-12     	; 0x55e <ChangeDataBits+0xc>
	{
		UART_Get();
	}
	switch(ASCII)
 56a:	87 33       	cpi	r24, 0x37	; 55
 56c:	a9 f0       	breq	.+42     	; 0x598 <ChangeDataBits+0x46>
 56e:	28 f4       	brcc	.+10     	; 0x57a <ChangeDataBits+0x28>
 570:	85 33       	cpi	r24, 0x35	; 53
 572:	41 f0       	breq	.+16     	; 0x584 <ChangeDataBits+0x32>
 574:	86 33       	cpi	r24, 0x36	; 54
 576:	59 f0       	breq	.+22     	; 0x58e <ChangeDataBits+0x3c>
 578:	39 c0       	rjmp	.+114    	; 0x5ec <ChangeDataBits+0x9a>
 57a:	88 33       	cpi	r24, 0x38	; 56
 57c:	91 f0       	breq	.+36     	; 0x5a2 <ChangeDataBits+0x50>
 57e:	89 33       	cpi	r24, 0x39	; 57
 580:	f1 f0       	breq	.+60     	; 0x5be <ChangeDataBits+0x6c>
 582:	34 c0       	rjmp	.+104    	; 0x5ec <ChangeDataBits+0x9a>
	{
		case '5':
			UCSR0C |= (0<<1)&&(0<<2);
			UCSR0B |= (0<<2);
			UART_Puts("\r\nNumber of data bits has been changed to 5");
 584:	88 e0       	ldi	r24, 0x08	; 8
 586:	94 e0       	ldi	r25, 0x04	; 4
 588:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 58c:	08 95       	ret
		case '6':
			UCSR0C |= (1<<1)&&(0<<2);
			UCSR0B |= (0<<2);
			UART_Puts("\r\nNumber of data bits has been changed to 6");
 58e:	84 e3       	ldi	r24, 0x34	; 52
 590:	94 e0       	ldi	r25, 0x04	; 4
 592:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 596:	08 95       	ret
		case '7':
			UCSR0C |= (0<<1)&&(1<<2);
			UCSR0B |= (0<<2);
			UART_Puts("\r\nNumber of data bits has been changed to 7");
 598:	80 e6       	ldi	r24, 0x60	; 96
 59a:	94 e0       	ldi	r25, 0x04	; 4
 59c:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 5a0:	08 95       	ret
		case '8':
			UCSR0C |= (1<<1)&&(1<<2);
 5a2:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <UCSR0C>
 5a6:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <UCSR0C+0x1>
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <UCSR0C+0x1>
 5b0:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <UCSR0C>
			UCSR0B |= (0<<2);
			UART_Puts("\r\nNumber of data bits has been changed to 8");
 5b4:	8c e8       	ldi	r24, 0x8C	; 140
 5b6:	94 e0       	ldi	r25, 0x04	; 4
 5b8:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 5bc:	08 95       	ret
		case '9':
			UCSR0C |= (1<<1)&&(1<<2);
 5be:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <UCSR0C>
 5c2:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <UCSR0C+0x1>
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <UCSR0C+0x1>
 5cc:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <UCSR0C>
			UCSR0B |= (1<<2);
 5d0:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <UCSR0B>
 5d4:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <UCSR0B+0x1>
 5d8:	84 60       	ori	r24, 0x04	; 4
 5da:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <UCSR0B+0x1>
 5de:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <UCSR0B>
			UART_Puts("\r\nNumber of data bits has been changed to 9");
 5e2:	88 eb       	ldi	r24, 0xB8	; 184
 5e4:	94 e0       	ldi	r25, 0x04	; 4
 5e6:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 5ea:	08 95       	ret
		default:
			UART_Puts(MS5);
 5ec:	89 e7       	ldi	r24, 0x79	; 121
 5ee:	96 e0       	ldi	r25, 0x06	; 6
 5f0:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			ChangeDataBits();
 5f4:	0e 94 a9 02 	call	0x552	; 0x552 <ChangeDataBits>
 5f8:	08 95       	ret

000005fa <ChangeParity>:
	}
}

void ChangeParity(void)
{
	UART_Puts("\r\nSelect a parity:\r\n(1)None\r\n(2)Odd\r\n(3)Even");
 5fa:	84 ee       	ldi	r24, 0xE4	; 228
 5fc:	94 e0       	ldi	r25, 0x04	; 4
 5fe:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 602:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 606:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void ChangeParity(void)
{
	UART_Puts("\r\nSelect a parity:\r\n(1)None\r\n(2)Odd\r\n(3)Even");
	ASCII = '\0';
	while(ASCII == '\0')
 60a:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 60e:	88 23       	and	r24, r24
 610:	d1 f3       	breq	.-12     	; 0x606 <ChangeParity+0xc>
	{
		UART_Get();
	}
	switch(ASCII)
 612:	82 33       	cpi	r24, 0x32	; 50
 614:	49 f0       	breq	.+18     	; 0x628 <ChangeParity+0x2e>
 616:	83 33       	cpi	r24, 0x33	; 51
 618:	a9 f0       	breq	.+42     	; 0x644 <ChangeParity+0x4a>
 61a:	81 33       	cpi	r24, 0x31	; 49
 61c:	c1 f4       	brne	.+48     	; 0x64e <ChangeParity+0x54>
	{
		case '1':
			UCSR0C |= (0<<5)&&(0<<4);
			UART_Puts("\r\nNo parity was set");
 61e:	81 e1       	ldi	r24, 0x11	; 17
 620:	95 e0       	ldi	r25, 0x05	; 5
 622:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 626:	08 95       	ret
		case '2':
			UCSR0C |= (1<<5)&&(1<<4);
 628:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <UCSR0C>
 62c:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <UCSR0C+0x1>
 630:	81 60       	ori	r24, 0x01	; 1
 632:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <UCSR0C+0x1>
 636:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <UCSR0C>
			UART_Puts("\r\nAn odd parity was set");
 63a:	85 e2       	ldi	r24, 0x25	; 37
 63c:	95 e0       	ldi	r25, 0x05	; 5
 63e:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 642:	08 95       	ret
		case '3':
			UCSR0C |= (1<<5)&&(0<<4);
			UART_Puts("\r\nAn even parity was set");
 644:	8d e3       	ldi	r24, 0x3D	; 61
 646:	95 e0       	ldi	r25, 0x05	; 5
 648:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 64c:	08 95       	ret
		default:
			UART_Puts(MS5);
 64e:	89 e7       	ldi	r24, 0x79	; 121
 650:	96 e0       	ldi	r25, 0x06	; 6
 652:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			ChangeParity();
 656:	0e 94 fd 02 	call	0x5fa	; 0x5fa <ChangeParity>
 65a:	08 95       	ret

0000065c <ChangeStopBits>:
	}
}

void ChangeStopBits(void)
{
	UART_Puts("\r\nSelect how many stop bits are desired: 1 or 2");
 65c:	86 e5       	ldi	r24, 0x56	; 86
 65e:	95 e0       	ldi	r25, 0x05	; 5
 660:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';
 664:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while(ASCII == '\0')
	{
		UART_Get();
 668:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void ChangeStopBits(void)
{
	UART_Puts("\r\nSelect how many stop bits are desired: 1 or 2");
	ASCII = '\0';
	while(ASCII == '\0')
 66c:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 670:	88 23       	and	r24, r24
 672:	d1 f3       	breq	.-12     	; 0x668 <ChangeStopBits+0xc>
	{
		UART_Get();
	}
	switch(ASCII)
 674:	81 33       	cpi	r24, 0x31	; 49
 676:	19 f0       	breq	.+6      	; 0x67e <ChangeStopBits+0x22>
 678:	82 33       	cpi	r24, 0x32	; 50
 67a:	79 f0       	breq	.+30     	; 0x69a <ChangeStopBits+0x3e>
 67c:	13 c0       	rjmp	.+38     	; 0x6a4 <ChangeStopBits+0x48>
	{
		case '1':
			UCSR0C |= (1<<3);
 67e:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <UCSR0C>
 682:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <UCSR0C+0x1>
 686:	88 60       	ori	r24, 0x08	; 8
 688:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <UCSR0C+0x1>
 68c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <UCSR0C>
			UART_Puts("\r\nOne stop bit will be provided");
 690:	86 e8       	ldi	r24, 0x86	; 134
 692:	95 e0       	ldi	r25, 0x05	; 5
 694:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 698:	08 95       	ret
		case '2':
			UCSR0C |= (0<<3);
			UART_Puts("\r\nTwo stop bits will be provided");
 69a:	86 ea       	ldi	r24, 0xA6	; 166
 69c:	95 e0       	ldi	r25, 0x05	; 5
 69e:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		break;
 6a2:	08 95       	ret
		default:
			UART_Puts(MS5);
 6a4:	89 e7       	ldi	r24, 0x79	; 121
 6a6:	96 e0       	ldi	r25, 0x06	; 6
 6a8:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
			ChangeStopBits();
 6ac:	0e 94 2e 03 	call	0x65c	; 0x65c <ChangeStopBits>
 6b0:	08 95       	ret

000006b2 <USART>:
	UART_Puts("\r\nThe data has been successfully written to the desired EEPROM address");
}

void USART(void)
{
	UART_Puts(MS7);
 6b2:	8d e4       	ldi	r24, 0x4D	; 77
 6b4:	96 e0       	ldi	r25, 0x06	; 6
 6b6:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ChangeBaud();
 6ba:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ChangeBaud>
	UART_Puts(MS8);
 6be:	8c e1       	ldi	r24, 0x1C	; 28
 6c0:	96 e0       	ldi	r25, 0x06	; 6
 6c2:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ChangeDataBits();
 6c6:	0e 94 a9 02 	call	0x552	; 0x552 <ChangeDataBits>
	UART_Puts(MS9);
 6ca:	88 ef       	ldi	r24, 0xF8	; 248
 6cc:	95 e0       	ldi	r25, 0x05	; 5
 6ce:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ChangeParity();
 6d2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <ChangeParity>
	UART_Puts(MS10);
 6d6:	87 ec       	ldi	r24, 0xC7	; 199
 6d8:	95 e0       	ldi	r25, 0x05	; 5
 6da:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ChangeStopBits();
 6de:	0e 94 2e 03 	call	0x65c	; 0x65c <ChangeStopBits>
 6e2:	08 95       	ret

000006e4 <Command>:
}


void Command(void)					//command interpreter
{
	UART_Puts(MS3);
 6e4:	82 ea       	ldi	r24, 0xA2	; 162
 6e6:	96 e0       	ldi	r25, 0x06	; 6
 6e8:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
	ASCII = '\0';						
 6ec:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 6f0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <UART_Get>

void Command(void)					//command interpreter
{
	UART_Puts(MS3);
	ASCII = '\0';						
	while (ASCII == '\0')
 6f4:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <ASCII>
 6f8:	88 23       	and	r24, r24
 6fa:	d1 f3       	breq	.-12     	; 0x6f0 <Command+0xc>
	{
		UART_Get();
	}
	switch (ASCII)
 6fc:	85 36       	cpi	r24, 0x65	; 101
 6fe:	79 f0       	breq	.+30     	; 0x71e <Command+0x3a>
 700:	18 f4       	brcc	.+6      	; 0x708 <Command+0x24>
 702:	81 36       	cpi	r24, 0x61	; 97
 704:	49 f0       	breq	.+18     	; 0x718 <Command+0x34>
 706:	10 c0       	rjmp	.+32     	; 0x728 <Command+0x44>
 708:	8c 36       	cpi	r24, 0x6C	; 108
 70a:	19 f0       	breq	.+6      	; 0x712 <Command+0x2e>
 70c:	85 37       	cpi	r24, 0x75	; 117
 70e:	51 f0       	breq	.+20     	; 0x724 <Command+0x40>
 710:	0b c0       	rjmp	.+22     	; 0x728 <Command+0x44>
	{
		case 'L' | 'l': LCD();
 712:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD>
		break;
 716:	08 95       	ret
		case 'A' | 'a': ADC();
 718:	0e 94 96 01 	call	0x32c	; 0x32c <ADC>
		break;
 71c:	08 95       	ret
		case 'E' | 'e': EEPROM();
 71e:	0e 94 3e 02 	call	0x47c	; 0x47c <EEPROM>
		break;
 722:	08 95       	ret
		case 'U' | 'u': USART();
 724:	0e 94 59 03 	call	0x6b2	; 0x6b2 <USART>
		default:
		UART_Puts(MS5);
 728:	89 e7       	ldi	r24, 0x79	; 121
 72a:	96 e0       	ldi	r25, 0x06	; 6
 72c:	0e 94 44 01 	call	0x288	; 0x288 <UART_Puts>
		HELP();
 730:	0e 94 73 01 	call	0x2e6	; 0x2e6 <HELP>
 734:	08 95       	ret

00000736 <main>:
	}
}

int main(void)
{
	Mega328P_Init();
 736:	0e 94 79 00 	call	0xf2	; 0xf2 <Mega328P_Init>
	Banner();
 73a:	0e 94 66 01 	call	0x2cc	; 0x2cc <Banner>
	while (1)
	{
		Command();				//infinite command loop
 73e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Command>
 742:	fd cf       	rjmp	.-6      	; 0x73e <main+0x8>

00000744 <__divmodhi4>:
 744:	97 fb       	bst	r25, 7
 746:	07 2e       	mov	r0, r23
 748:	16 f4       	brtc	.+4      	; 0x74e <__divmodhi4+0xa>
 74a:	00 94       	com	r0
 74c:	07 d0       	rcall	.+14     	; 0x75c <__divmodhi4_neg1>
 74e:	77 fd       	sbrc	r23, 7
 750:	09 d0       	rcall	.+18     	; 0x764 <__divmodhi4_neg2>
 752:	0e 94 b6 03 	call	0x76c	; 0x76c <__udivmodhi4>
 756:	07 fc       	sbrc	r0, 7
 758:	05 d0       	rcall	.+10     	; 0x764 <__divmodhi4_neg2>
 75a:	3e f4       	brtc	.+14     	; 0x76a <__divmodhi4_exit>

0000075c <__divmodhi4_neg1>:
 75c:	90 95       	com	r25
 75e:	81 95       	neg	r24
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	08 95       	ret

00000764 <__divmodhi4_neg2>:
 764:	70 95       	com	r23
 766:	61 95       	neg	r22
 768:	7f 4f       	sbci	r23, 0xFF	; 255

0000076a <__divmodhi4_exit>:
 76a:	08 95       	ret

0000076c <__udivmodhi4>:
 76c:	aa 1b       	sub	r26, r26
 76e:	bb 1b       	sub	r27, r27
 770:	51 e1       	ldi	r21, 0x11	; 17
 772:	07 c0       	rjmp	.+14     	; 0x782 <__udivmodhi4_ep>

00000774 <__udivmodhi4_loop>:
 774:	aa 1f       	adc	r26, r26
 776:	bb 1f       	adc	r27, r27
 778:	a6 17       	cp	r26, r22
 77a:	b7 07       	cpc	r27, r23
 77c:	10 f0       	brcs	.+4      	; 0x782 <__udivmodhi4_ep>
 77e:	a6 1b       	sub	r26, r22
 780:	b7 0b       	sbc	r27, r23

00000782 <__udivmodhi4_ep>:
 782:	88 1f       	adc	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	5a 95       	dec	r21
 788:	a9 f7       	brne	.-22     	; 0x774 <__udivmodhi4_loop>
 78a:	80 95       	com	r24
 78c:	90 95       	com	r25
 78e:	bc 01       	movw	r22, r24
 790:	cd 01       	movw	r24, r26
 792:	08 95       	ret

00000794 <_exit>:
 794:	f8 94       	cli

00000796 <__stop_program>:
 796:	ff cf       	rjmp	.-2      	; 0x796 <__stop_program>
