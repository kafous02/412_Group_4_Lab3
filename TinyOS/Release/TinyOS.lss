
TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00000b60  00000bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  008001d2  008001d2  00000cc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000962  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000882  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d2  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  0000240e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d8 e0       	ldi	r29, 0x08	; 8
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e0 e6       	ldi	r30, 0x60	; 96
 122:	fb e0       	ldi	r31, 0x0B	; 11
 124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
 126:	05 90       	lpm	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	a2 3d       	cpi	r26, 0xD2	; 210
 12c:	b1 07       	cpc	r27, r17
 12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	a2 ed       	ldi	r26, 0xD2	; 210
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
 138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
 13a:	af 3d       	cpi	r26, 0xDF	; 223
 13c:	b2 07       	cpc	r27, r18
 13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
 140:	0e 94 8c 02 	call	0x518	; 0x518 <main>
 144:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <_exit>

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <Mega328P_Init>:
.set	temp,0				//Sets the value of temp to 0, can be changed later

.section ".text"			//Defines a new section called .text
.global Mega328P_Init
Mega328P_Init:
		ldi	r16,0x07		;PB0(R*W),PB1(RS),PB2(E) as fixed outputs
 14c:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		//Sets all bits of Port B to outputs
 14e:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			//Zeroes the r16 register
 150:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		//Sets all of Port B to zero
 152:	05 b9       	out	0x05, r16	; 5
		out	U2X0,r16		;initialize UART, 8bits, no parity, 1 stop, 9600
 154:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			//Loads 0x0 into r17
 156:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		//Loads 0x67 into r16
 158:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		//Sets high part of Baud Rate 
 15a:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts	UBRR0L,r16		//Sets low part of Baud Rate
 15e:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ldi	r16,24			//Loads 24 into r16
 162:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		//Stores r24 in the the configuration register for serial communications. Enables RX complete interrupt and TX complete interrupt
 164:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi	r16,6			//loads 6 into r16
 168:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		//sets characters size to 8-bits
 16a:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi r16,0x87		//initialize ADC
 16e:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		//stores 0x87 into ADC configuration SRAM  location
 170:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		ldi r16,0x40		//Loads 0x40 into r16
 174:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		//Stores the value of r16 into the ADC multiplexer selection memory space in SRAM
 176:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ldi r16,7			//Loads 0 into r16
 17a:	07 e0       	ldi	r16, 0x07	; 7
		sts ADCSRB,r16		//Stores 0 into ADCSRB memory space which puts ADC in free roaming mode
 17c:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ldi r16,0xFE		//Loads 0xFE int r16
 180:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		//Stores 0xFE into DIDR0 which is the data input disable register
 182:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		ldi r16,0xFF		//Loads 0xFF int r16
 186:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		//Stores 0xFF into DIDR0 which is the data input disable register
 188:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		ret					//Return from Mega328P_Init - I/O port and ADC configurations have been set
 18c:	08 95       	ret

0000018e <LCD_Write_Command>:
	
.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 18e:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0xFF		;PD0 - PD7 as outputs
 192:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//Set Data Direction Register D
 194:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//Load contents of Label Data into r16
 196:	00 91 d2 01 	lds	r16, 0x01D2	; 0x8001d2 <__data_end>
	out		PORTD,r16		//Move contents of Label Data into Port D from r16
 19a:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			//Load constant 4 into r16
 19c:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		//Move 4 from r16 into Port B
 19e:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 1a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	ldi		r16,0			//Clear r16
 1a4:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//Clear PortB
 1a6:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 1a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	call	UART_On			//Call subroutine UART_On to turn UART back on
 1ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//End of LCD_Write_Command
 1b0:	08 95       	ret

000001b2 <LCD_Delay>:

LCD_Delay:
	ldi		r16,0xFA		//Load constant 250 into r16
 1b2:	0a ef       	ldi	r16, 0xFA	; 250

000001b4 <D0>:
D0:	ldi		r17,0xFF		//Load constant 255 into r17
 1b4:	1f ef       	ldi	r17, 0xFF	; 255

000001b6 <D1>:
D1:	dec		r17				//Decrement r17
 1b6:	1a 95       	dec	r17
	brne	D1				//Branch back to D1 while it's still not 0.
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <D1>
	dec		r16				//Decrement r16
 1ba:	0a 95       	dec	r16
	brne	D0				//Branch back to D0 while it's still not 0.
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <D0>
	ret						//End of LCD_Delay
 1be:	08 95       	ret

000001c0 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 1c0:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0xFF		//Set r16
 1c4:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//Set Data Direction Register D
 1c6:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//Load contents of Label Data into r16
 1c8:	00 91 d2 01 	lds	r16, 0x01D2	; 0x8001d2 <__data_end>
	out		PORTD,r16		//Move contents of Label Data into Port D
 1cc:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			//Load constant 6 into r16
 1ce:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		//Move 6 from r16 into Port B
 1d0:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 1d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	ldi		r16,0			//Clear r16
 1d6:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//Clear PortB
 1d8:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 1da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	call	UART_On			//Call subroutine UART_On to turn UART back on
 1de:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//End of UART_Write_Data
 1e2:	08 95       	ret

000001e4 <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 1e4:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0x00		//Clear r16
 1e8:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		//Clear Data Direction Register D
 1ea:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			//Load constant 4 into Port B 
 1ec:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		//Read contents of Port D Data Register into r16
 1ee:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		//Store the contents of Port D Data Register into label Data
 1f0:	00 93 d2 01 	sts	0x01D2, r16	; 0x8001d2 <__data_end>
	out		PORTB,0			//clear Port B
 1f4:	05 b8       	out	0x05, r0	; 5
	call	UART_On			//Call subroutine UART_On to turn UART back on
 1f6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//End of LCD_Read_Data
 1fa:	08 95       	ret

000001fc <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				//Load constant 2 into r16
 1fc:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			//Store 2 into Data Direction Register Port D
 1fe:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				//Load constant 24 into r16
 200:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			//Store 24 into USART Control and Status Register 0 B
 202:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//End of UART_On
 206:	08 95       	ret

00000208 <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					//Load constant 0 into r16
 208:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				//Move 0 from r16 into USART Control and Status Register 0 B
 20a:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//End of UART_Off
 20e:	08 95       	ret

00000210 <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r16
 210:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//Skips the next line if USART Receive Complete is set
 214:	07 ff       	sbrs	r16, 7
	ret							//End of UART_Clear
 216:	08 95       	ret
	lds		r16,UDR0			//Store the contents of USART I/O Data Register 0 into r16
 218:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	rjmp	UART_Clear			//Loop back to start while RXC0 = 1
 21c:	f9 cf       	rjmp	.-14     	; 0x210 <UART_Clear>

0000021e <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r16
 21e:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//Skips the next line if USART Receive Complete is set
 222:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			//Loop back to start while RXC0 = 1
 224:	fc cf       	rjmp	.-8      	; 0x21e <UART_Get>
	lds		r16,UDR0			//Store the contents of USART I/O Data Register 0 into r16
 226:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		ASCII,r16			//Move the contents of USART I/O Data Register 0 from r16 into label ASCII
 22a:	00 93 d4 01 	sts	0x01D4, r16	; 0x8001d4 <ASCII>
	ret							//End of UART_Get
 22e:	08 95       	ret

00000230 <UART_Poll>:

.global UART_Poll
UART_Poll:
	lds		r16,UDR0			//Store the contents of USART I/O Data Register 0 into r16
 230:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		ASCII,r16			//Move the contents of USART I/O Data Register 0 from r16 into label ASCII
 234:	00 93 d4 01 	sts	0x01D4, r16	; 0x8001d4 <ASCII>
	ret							//End of UART_Get
 238:	08 95       	ret

0000023a <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r17
 23a:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r17,UDRE0			//Skips the next instruction if USART Data Register Empty is set
 23e:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			//Loop back to start while UDRE0 = 1
 240:	fc cf       	rjmp	.-8      	; 0x23a <UART_Put>
	lds		r16,ASCII			//Load Label ASCII into r16
 242:	00 91 d4 01 	lds	r16, 0x01D4	; 0x8001d4 <ASCII>
	sts		UDR0,r16			//Move ASCII from r16 to USART Data Register
 246:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	ret							//End of UART_Put
 24a:	08 95       	ret

0000024c <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xE7			//Load 231 into r16
 24c:	07 ee       	ldi	r16, 0xE7	; 231
		sts		ADCSRA,r16			//Move 231 from r16 to ADC Control and Status Register A
 24e:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

00000252 <A2V1>:
A2V1:	lds		r16,ADCSRA			//Load the ADC Control and Status Register A into r16
 252:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbrc	r16,ADSC			//Skip the following instruction if the ADC Start Conversion bit is cleared
 256:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				//Loop back into A2V1, continually scanning for ADCSRA to be 1
 258:	fc cf       	rjmp	.-8      	; 0x252 <A2V1>
		lds		r16,ADCL			//ADCL must be read first, then ADCH, to ensure that the content of the Data Registers belongsto the same conversion
 25a:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		sts		LADC,r16			//Store ADCL into SRAM Label LADC
 25e:	00 93 da 01 	sts	0x01DA, r16	; 0x8001da <LADC>
		lds		r16,ADCH			//The rest of ADC is read
 262:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		sts		HADC,r16			//Store ADCH into SRAM Label HADC
 266:	00 93 d3 01 	sts	0x01D3, r16	; 0x8001d3 <HADC>
		ret							//End of ADC_Get				
 26a:	08 95       	ret

0000026c <EEPROM_Write>:


					
.global EEPROM_Write
EEPROM_Write:      
		sbic    EECR,EEPE
 26c:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Write		; Wait for completion of previous write
 26e:	fe cf       	rjmp	.-4      	; 0x26c <EEPROM_Write>
		ldi		r18,0x00			; Set up address (r18:r17) in address register
 270:	20 e0       	ldi	r18, 0x00	; 0
		ldi		r17,0x05 
 272:	15 e0       	ldi	r17, 0x05	; 5
		ldi		r16,'F'				; Set up data in r16    
 274:	06 e4       	ldi	r16, 0x46	; 70
		out     EEARH, r18      
 276:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17			      
 278:	11 bd       	out	0x21, r17	; 33
		out     EEDR,r16			; Write data (r16) to Data Register  
 27a:	00 bd       	out	0x20, r16	; 32
		sbi     EECR,EEMPE			; Write logical one to EEMPE
 27c:	fa 9a       	sbi	0x1f, 2	; 31
		sbi     EECR,EEPE			; Start eeprom write by setting EEPE
 27e:	f9 9a       	sbi	0x1f, 1	; 31
		ret 
 280:	08 95       	ret

00000282 <EEPROM_Read>:

.global EEPROM_Read
EEPROM_Read:					    
		sbic    EECR,EEPE    
 282:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Read		; Wait for completion of previous write
 284:	fe cf       	rjmp	.-4      	; 0x282 <EEPROM_Read>
		ldi		r18,0x00		; Set up address (r18:r17) in EEPROM address register
 286:	20 e0       	ldi	r18, 0x00	; 0
		ldi		r17,0x05
 288:	15 e0       	ldi	r17, 0x05	; 5
		ldi		r16,0x00   
 28a:	00 e0       	ldi	r16, 0x00	; 0
		out     EEARH, r18   
 28c:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17		   
 28e:	11 bd       	out	0x21, r17	; 33
		sbi     EECR,EERE		; Start eeprom read by writing EERE
 290:	f8 9a       	sbi	0x1f, 0	; 31
		in      r16,EEDR		; Read data from Data Register
 292:	00 b5       	in	r16, 0x20	; 32
		sts		ASCII,r16  
 294:	00 93 d4 01 	sts	0x01D4, r16	; 0x8001d4 <ASCII>
		ret
 298:	08 95       	ret

0000029a <UART_Puts>:
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
 2a0:	89 91       	ld	r24, Y+
 2a2:	88 23       	and	r24, r24
 2a4:	29 f0       	breq	.+10     	; 0x2b0 <UART_Puts+0x16>
 2a6:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ASCII>
 2aa:	0e 94 1d 01 	call	0x23a	; 0x23a <UART_Put>
 2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <UART_Puts+0x6>
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <LCD_Puts>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
 2bc:	89 91       	ld	r24, Y+
 2be:	88 23       	and	r24, r24
 2c0:	29 f0       	breq	.+10     	; 0x2cc <LCD_Puts+0x16>
 2c2:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 2c6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Write_Data>
 2ca:	f8 cf       	rjmp	.-16     	; 0x2bc <LCD_Puts+0x6>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <Banner>:
 2d2:	85 eb       	ldi	r24, 0xB5	; 181
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 2da:	8e e7       	ldi	r24, 0x7E	; 126
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 2e2:	83 e5       	ldi	r24, 0x53	; 83
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0c 94 4d 01 	jmp	0x29a	; 0x29a <UART_Puts>

000002ea <HELP>:
 2ea:	8d e5       	ldi	r24, 0x5D	; 93
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0c 94 4d 01 	jmp	0x29a	; 0x29a <UART_Puts>

000002f2 <LCD>:
 2f2:	84 e3       	ldi	r24, 0x34	; 52
 2f4:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 2f8:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 302:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 30c:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 316:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 31a:	8f e0       	ldi	r24, 0x0F	; 15
 31c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
 320:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 324:	85 e0       	ldi	r24, 0x05	; 5
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <LCD_Puts>

0000032c <ADC>:
 32c:	8f 92       	push	r8
 32e:	9f 92       	push	r9
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <isADC+0x1>
 344:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <isADC>
 348:	0e 94 26 01 	call	0x24c	; 0x24c <ADC_Get>
 34c:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <HADC>
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	76 2f       	mov	r23, r22
 354:	66 27       	eor	r22, r22
 356:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <LADC>
 35a:	68 0f       	add	r22, r24
 35c:	71 1d       	adc	r23, r1
 35e:	70 93 dc 01 	sts	0x01DC, r23	; 0x8001dc <Acc+0x1>
 362:	60 93 db 01 	sts	0x01DB, r22	; 0x8001db <Acc>
 366:	07 2e       	mov	r0, r23
 368:	00 0c       	add	r0, r0
 36a:	88 0b       	sbc	r24, r24
 36c:	99 0b       	sbc	r25, r25
 36e:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatsisf>
 372:	6b 01       	movw	r12, r22
 374:	7c 01       	movw	r14, r24
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e4       	ldi	r19, 0x40	; 64
 37a:	4c e1       	ldi	r20, 0x1C	; 28
 37c:	56 e4       	ldi	r21, 0x46	; 70
 37e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__mulsf3>
 382:	4b 01       	movw	r8, r22
 384:	5c 01       	movw	r10, r24
 386:	a7 01       	movw	r20, r14
 388:	96 01       	movw	r18, r12
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	80 e8       	ldi	r24, 0x80	; 128
 390:	94 e4       	ldi	r25, 0x44	; 68
 392:	0e 94 97 02 	call	0x52e	; 0x52e <__subsf3>
 396:	9b 01       	movw	r18, r22
 398:	ac 01       	movw	r20, r24
 39a:	c5 01       	movw	r24, r10
 39c:	b4 01       	movw	r22, r8
 39e:	0e 94 04 03 	call	0x608	; 0x608 <__divsf3>
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e4       	ldi	r19, 0x40	; 64
 3a6:	4c e1       	ldi	r20, 0x1C	; 28
 3a8:	56 e4       	ldi	r21, 0x46	; 70
 3aa:	0e 94 04 03 	call	0x608	; 0x608 <__divsf3>
 3ae:	0e 94 9a 04 	call	0x934	; 0x934 <log>
 3b2:	2c e5       	ldi	r18, 0x5C	; 92
 3b4:	3f ea       	ldi	r19, 0xAF	; 175
 3b6:	43 e9       	ldi	r20, 0x93	; 147
 3b8:	53 e4       	ldi	r21, 0x43	; 67
 3ba:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__mulsf3>
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 ee       	ldi	r19, 0xE0	; 224
 3c2:	46 e7       	ldi	r20, 0x76	; 118
 3c4:	55 e4       	ldi	r21, 0x45	; 69
 3c6:	0e 94 98 02 	call	0x530	; 0x530 <__addsf3>
 3ca:	9b 01       	movw	r18, r22
 3cc:	ac 01       	movw	r20, r24
 3ce:	6c eb       	ldi	r22, 0xBC	; 188
 3d0:	7b e6       	ldi	r23, 0x6B	; 107
 3d2:	8e e8       	ldi	r24, 0x8E	; 142
 3d4:	99 e4       	ldi	r25, 0x49	; 73
 3d6:	0e 94 04 03 	call	0x608	; 0x608 <__divsf3>
 3da:	23 e3       	ldi	r18, 0x33	; 51
 3dc:	33 e9       	ldi	r19, 0x93	; 147
 3de:	48 e8       	ldi	r20, 0x88	; 136
 3e0:	53 e4       	ldi	r21, 0x43	; 67
 3e2:	0e 94 97 02 	call	0x52e	; 0x52e <__subsf3>
 3e6:	26 e6       	ldi	r18, 0x66	; 102
 3e8:	36 e6       	ldi	r19, 0x66	; 102
 3ea:	46 ee       	ldi	r20, 0xE6	; 230
 3ec:	5f e3       	ldi	r21, 0x3F	; 63
 3ee:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__mulsf3>
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	52 e4       	ldi	r21, 0x42	; 66
 3fa:	0e 94 98 02 	call	0x530	; 0x530 <__addsf3>
 3fe:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <floor>
 402:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fixsfsi>
 406:	cb 01       	movw	r24, r22
 408:	64 e6       	ldi	r22, 0x64	; 100
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	0e 94 76 05 	call	0xaec	; 0xaec <__divmodhi4>
 410:	20 e3       	ldi	r18, 0x30	; 48
 412:	26 0f       	add	r18, r22
 414:	6a e0       	ldi	r22, 0x0A	; 10
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	0e 94 76 05 	call	0xaec	; 0xaec <__divmodhi4>
 41c:	60 5d       	subi	r22, 0xD0	; 208
 41e:	80 5d       	subi	r24, 0xD0	; 208
 420:	20 33       	cpi	r18, 0x30	; 48
 422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	20 e2       	ldi	r18, 0x20	; 32
 426:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <temperature>
 42a:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <temperature+0x1>
 42e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <temperature+0x2>
 432:	87 ea       	ldi	r24, 0xA7	; 167
 434:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <temperature+0x3>
 438:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <temperature+0x4>
 43c:	65 ed       	ldi	r22, 0xD5	; 213
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 9e 05 	call	0xb3c	; 0xb3c <strcmp>
 448:	89 2b       	or	r24, r25
 44a:	71 f0       	breq	.+28     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44c:	85 ed       	ldi	r24, 0xD5	; 213
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 454:	83 e1       	ldi	r24, 0x13	; 19
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 45c:	65 ed       	ldi	r22, 0xD5	; 213
 45e:	71 e0       	ldi	r23, 0x01	; 1
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 a7 05 	call	0xb4e	; 0xb4e <strcpy>
 468:	0e 94 18 01 	call	0x230	; 0x230 <UART_Poll>
 46c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ASCII>
 470:	88 37       	cpi	r24, 0x78	; 120
 472:	21 f4       	brne	.+8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 474:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <isADC+0x1>
 478:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <isADC>
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	cf 90       	pop	r12
 484:	bf 90       	pop	r11
 486:	af 90       	pop	r10
 488:	9f 90       	pop	r9
 48a:	8f 90       	pop	r8
 48c:	08 95       	ret

0000048e <EEPROM>:
 48e:	88 e1       	ldi	r24, 0x18	; 24
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 496:	81 e3       	ldi	r24, 0x31	; 49
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 49e:	0e 94 36 01 	call	0x26c	; 0x26c <EEPROM_Write>
 4a2:	81 e3       	ldi	r24, 0x31	; 49
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 4aa:	0e 94 41 01 	call	0x282	; 0x282 <EEPROM_Read>
 4ae:	0e 94 1d 01 	call	0x23a	; 0x23a <UART_Put>
 4b2:	81 e3       	ldi	r24, 0x31	; 49
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0c 94 4d 01 	jmp	0x29a	; 0x29a <UART_Puts>

000004ba <Command>:
 4ba:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <isADC>
 4be:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <isADC+0x1>
 4c2:	89 2b       	or	r24, r25
 4c4:	69 f4       	brne	.+26     	; 0x4e0 <Command+0x26>
 4c6:	8d e5       	ldi	r24, 0x5D	; 93
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 4ce:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <ASCII>
 4d2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ASCII>
 4d6:	81 11       	cpse	r24, r1
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <Command+0x2c>
 4da:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>
 4de:	f9 cf       	rjmp	.-14     	; 0x4d2 <Command+0x18>
 4e0:	81 e6       	ldi	r24, 0x61	; 97
 4e2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ASCII>
 4e6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ASCII>
 4ea:	85 36       	cpi	r24, 0x65	; 101
 4ec:	61 f0       	breq	.+24     	; 0x506 <Command+0x4c>
 4ee:	20 f4       	brcc	.+8      	; 0x4f8 <Command+0x3e>
 4f0:	81 36       	cpi	r24, 0x61	; 97
 4f2:	59 f4       	brne	.+22     	; 0x50a <Command+0x50>
 4f4:	0c 94 96 01 	jmp	0x32c	; 0x32c <ADC>
 4f8:	8c 36       	cpi	r24, 0x6C	; 108
 4fa:	19 f0       	breq	.+6      	; 0x502 <Command+0x48>
 4fc:	88 37       	cpi	r24, 0x78	; 120
 4fe:	59 f0       	breq	.+22     	; 0x516 <Command+0x5c>
 500:	04 c0       	rjmp	.+8      	; 0x50a <Command+0x50>
 502:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <LCD>
 506:	0c 94 47 02 	jmp	0x48e	; 0x48e <EEPROM>
 50a:	84 e3       	ldi	r24, 0x34	; 52
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 512:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <HELP>
 516:	08 95       	ret

00000518 <main>:
 518:	0e 94 a6 00 	call	0x14c	; 0x14c <Mega328P_Init>
 51c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Banner>
 520:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <isADC+0x1>
 524:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <isADC>
 528:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Command>
 52c:	fd cf       	rjmp	.-6      	; 0x528 <main+0x10>

0000052e <__subsf3>:
 52e:	50 58       	subi	r21, 0x80	; 128

00000530 <__addsf3>:
 530:	bb 27       	eor	r27, r27
 532:	aa 27       	eor	r26, r26
 534:	0e 94 af 02 	call	0x55e	; 0x55e <__addsf3x>
 538:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_round>
 53c:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscA>
 540:	38 f0       	brcs	.+14     	; 0x550 <__addsf3+0x20>
 542:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscB>
 546:	20 f0       	brcs	.+8      	; 0x550 <__addsf3+0x20>
 548:	39 f4       	brne	.+14     	; 0x558 <__addsf3+0x28>
 54a:	9f 3f       	cpi	r25, 0xFF	; 255
 54c:	19 f4       	brne	.+6      	; 0x554 <__addsf3+0x24>
 54e:	26 f4       	brtc	.+8      	; 0x558 <__addsf3+0x28>
 550:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_nan>
 554:	0e f4       	brtc	.+2      	; 0x558 <__addsf3+0x28>
 556:	e0 95       	com	r30
 558:	e7 fb       	bst	r30, 7
 55a:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_inf>

0000055e <__addsf3x>:
 55e:	e9 2f       	mov	r30, r25
 560:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_split3>
 564:	58 f3       	brcs	.-42     	; 0x53c <__addsf3+0xc>
 566:	ba 17       	cp	r27, r26
 568:	62 07       	cpc	r22, r18
 56a:	73 07       	cpc	r23, r19
 56c:	84 07       	cpc	r24, r20
 56e:	95 07       	cpc	r25, r21
 570:	20 f0       	brcs	.+8      	; 0x57a <__addsf3x+0x1c>
 572:	79 f4       	brne	.+30     	; 0x592 <__addsf3x+0x34>
 574:	a6 f5       	brtc	.+104    	; 0x5de <__addsf3x+0x80>
 576:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_zero>
 57a:	0e f4       	brtc	.+2      	; 0x57e <__addsf3x+0x20>
 57c:	e0 95       	com	r30
 57e:	0b 2e       	mov	r0, r27
 580:	ba 2f       	mov	r27, r26
 582:	a0 2d       	mov	r26, r0
 584:	0b 01       	movw	r0, r22
 586:	b9 01       	movw	r22, r18
 588:	90 01       	movw	r18, r0
 58a:	0c 01       	movw	r0, r24
 58c:	ca 01       	movw	r24, r20
 58e:	a0 01       	movw	r20, r0
 590:	11 24       	eor	r1, r1
 592:	ff 27       	eor	r31, r31
 594:	59 1b       	sub	r21, r25
 596:	99 f0       	breq	.+38     	; 0x5be <__addsf3x+0x60>
 598:	59 3f       	cpi	r21, 0xF9	; 249
 59a:	50 f4       	brcc	.+20     	; 0x5b0 <__addsf3x+0x52>
 59c:	50 3e       	cpi	r21, 0xE0	; 224
 59e:	68 f1       	brcs	.+90     	; 0x5fa <__addsf3x+0x9c>
 5a0:	1a 16       	cp	r1, r26
 5a2:	f0 40       	sbci	r31, 0x00	; 0
 5a4:	a2 2f       	mov	r26, r18
 5a6:	23 2f       	mov	r18, r19
 5a8:	34 2f       	mov	r19, r20
 5aa:	44 27       	eor	r20, r20
 5ac:	58 5f       	subi	r21, 0xF8	; 248
 5ae:	f3 cf       	rjmp	.-26     	; 0x596 <__addsf3x+0x38>
 5b0:	46 95       	lsr	r20
 5b2:	37 95       	ror	r19
 5b4:	27 95       	ror	r18
 5b6:	a7 95       	ror	r26
 5b8:	f0 40       	sbci	r31, 0x00	; 0
 5ba:	53 95       	inc	r21
 5bc:	c9 f7       	brne	.-14     	; 0x5b0 <__addsf3x+0x52>
 5be:	7e f4       	brtc	.+30     	; 0x5de <__addsf3x+0x80>
 5c0:	1f 16       	cp	r1, r31
 5c2:	ba 0b       	sbc	r27, r26
 5c4:	62 0b       	sbc	r22, r18
 5c6:	73 0b       	sbc	r23, r19
 5c8:	84 0b       	sbc	r24, r20
 5ca:	ba f0       	brmi	.+46     	; 0x5fa <__addsf3x+0x9c>
 5cc:	91 50       	subi	r25, 0x01	; 1
 5ce:	a1 f0       	breq	.+40     	; 0x5f8 <__addsf3x+0x9a>
 5d0:	ff 0f       	add	r31, r31
 5d2:	bb 1f       	adc	r27, r27
 5d4:	66 1f       	adc	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	c2 f7       	brpl	.-16     	; 0x5cc <__addsf3x+0x6e>
 5dc:	0e c0       	rjmp	.+28     	; 0x5fa <__addsf3x+0x9c>
 5de:	ba 0f       	add	r27, r26
 5e0:	62 1f       	adc	r22, r18
 5e2:	73 1f       	adc	r23, r19
 5e4:	84 1f       	adc	r24, r20
 5e6:	48 f4       	brcc	.+18     	; 0x5fa <__addsf3x+0x9c>
 5e8:	87 95       	ror	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	b7 95       	ror	r27
 5f0:	f7 95       	ror	r31
 5f2:	9e 3f       	cpi	r25, 0xFE	; 254
 5f4:	08 f0       	brcs	.+2      	; 0x5f8 <__addsf3x+0x9a>
 5f6:	b0 cf       	rjmp	.-160    	; 0x558 <__addsf3+0x28>
 5f8:	93 95       	inc	r25
 5fa:	88 0f       	add	r24, r24
 5fc:	08 f0       	brcs	.+2      	; 0x600 <__addsf3x+0xa2>
 5fe:	99 27       	eor	r25, r25
 600:	ee 0f       	add	r30, r30
 602:	97 95       	ror	r25
 604:	87 95       	ror	r24
 606:	08 95       	ret

00000608 <__divsf3>:
 608:	0e 94 18 03 	call	0x630	; 0x630 <__divsf3x>
 60c:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_round>
 610:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscB>
 614:	58 f0       	brcs	.+22     	; 0x62c <__divsf3+0x24>
 616:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscA>
 61a:	40 f0       	brcs	.+16     	; 0x62c <__divsf3+0x24>
 61c:	29 f4       	brne	.+10     	; 0x628 <__divsf3+0x20>
 61e:	5f 3f       	cpi	r21, 0xFF	; 255
 620:	29 f0       	breq	.+10     	; 0x62c <__divsf3+0x24>
 622:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_inf>
 626:	51 11       	cpse	r21, r1
 628:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_szero>
 62c:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_nan>

00000630 <__divsf3x>:
 630:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_split3>
 634:	68 f3       	brcs	.-38     	; 0x610 <__divsf3+0x8>

00000636 <__divsf3_pse>:
 636:	99 23       	and	r25, r25
 638:	b1 f3       	breq	.-20     	; 0x626 <__divsf3+0x1e>
 63a:	55 23       	and	r21, r21
 63c:	91 f3       	breq	.-28     	; 0x622 <__divsf3+0x1a>
 63e:	95 1b       	sub	r25, r21
 640:	55 0b       	sbc	r21, r21
 642:	bb 27       	eor	r27, r27
 644:	aa 27       	eor	r26, r26
 646:	62 17       	cp	r22, r18
 648:	73 07       	cpc	r23, r19
 64a:	84 07       	cpc	r24, r20
 64c:	38 f0       	brcs	.+14     	; 0x65c <__divsf3_pse+0x26>
 64e:	9f 5f       	subi	r25, 0xFF	; 255
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	22 0f       	add	r18, r18
 654:	33 1f       	adc	r19, r19
 656:	44 1f       	adc	r20, r20
 658:	aa 1f       	adc	r26, r26
 65a:	a9 f3       	breq	.-22     	; 0x646 <__divsf3_pse+0x10>
 65c:	35 d0       	rcall	.+106    	; 0x6c8 <__divsf3_pse+0x92>
 65e:	0e 2e       	mov	r0, r30
 660:	3a f0       	brmi	.+14     	; 0x670 <__divsf3_pse+0x3a>
 662:	e0 e8       	ldi	r30, 0x80	; 128
 664:	32 d0       	rcall	.+100    	; 0x6ca <__divsf3_pse+0x94>
 666:	91 50       	subi	r25, 0x01	; 1
 668:	50 40       	sbci	r21, 0x00	; 0
 66a:	e6 95       	lsr	r30
 66c:	00 1c       	adc	r0, r0
 66e:	ca f7       	brpl	.-14     	; 0x662 <__divsf3_pse+0x2c>
 670:	2b d0       	rcall	.+86     	; 0x6c8 <__divsf3_pse+0x92>
 672:	fe 2f       	mov	r31, r30
 674:	29 d0       	rcall	.+82     	; 0x6c8 <__divsf3_pse+0x92>
 676:	66 0f       	add	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	88 1f       	adc	r24, r24
 67c:	bb 1f       	adc	r27, r27
 67e:	26 17       	cp	r18, r22
 680:	37 07       	cpc	r19, r23
 682:	48 07       	cpc	r20, r24
 684:	ab 07       	cpc	r26, r27
 686:	b0 e8       	ldi	r27, 0x80	; 128
 688:	09 f0       	breq	.+2      	; 0x68c <__divsf3_pse+0x56>
 68a:	bb 0b       	sbc	r27, r27
 68c:	80 2d       	mov	r24, r0
 68e:	bf 01       	movw	r22, r30
 690:	ff 27       	eor	r31, r31
 692:	93 58       	subi	r25, 0x83	; 131
 694:	5f 4f       	sbci	r21, 0xFF	; 255
 696:	3a f0       	brmi	.+14     	; 0x6a6 <__divsf3_pse+0x70>
 698:	9e 3f       	cpi	r25, 0xFE	; 254
 69a:	51 05       	cpc	r21, r1
 69c:	78 f0       	brcs	.+30     	; 0x6bc <__divsf3_pse+0x86>
 69e:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_inf>
 6a2:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_szero>
 6a6:	5f 3f       	cpi	r21, 0xFF	; 255
 6a8:	e4 f3       	brlt	.-8      	; 0x6a2 <__divsf3_pse+0x6c>
 6aa:	98 3e       	cpi	r25, 0xE8	; 232
 6ac:	d4 f3       	brlt	.-12     	; 0x6a2 <__divsf3_pse+0x6c>
 6ae:	86 95       	lsr	r24
 6b0:	77 95       	ror	r23
 6b2:	67 95       	ror	r22
 6b4:	b7 95       	ror	r27
 6b6:	f7 95       	ror	r31
 6b8:	9f 5f       	subi	r25, 0xFF	; 255
 6ba:	c9 f7       	brne	.-14     	; 0x6ae <__divsf3_pse+0x78>
 6bc:	88 0f       	add	r24, r24
 6be:	91 1d       	adc	r25, r1
 6c0:	96 95       	lsr	r25
 6c2:	87 95       	ror	r24
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret
 6c8:	e1 e0       	ldi	r30, 0x01	; 1
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	bb 1f       	adc	r27, r27
 6d2:	62 17       	cp	r22, r18
 6d4:	73 07       	cpc	r23, r19
 6d6:	84 07       	cpc	r24, r20
 6d8:	ba 07       	cpc	r27, r26
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <__divsf3_pse+0xae>
 6dc:	62 1b       	sub	r22, r18
 6de:	73 0b       	sbc	r23, r19
 6e0:	84 0b       	sbc	r24, r20
 6e2:	ba 0b       	sbc	r27, r26
 6e4:	ee 1f       	adc	r30, r30
 6e6:	88 f7       	brcc	.-30     	; 0x6ca <__divsf3_pse+0x94>
 6e8:	e0 95       	com	r30
 6ea:	08 95       	ret

000006ec <__fixsfsi>:
 6ec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fixunssfsi>
 6f0:	68 94       	set
 6f2:	b1 11       	cpse	r27, r1
 6f4:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_szero>
 6f8:	08 95       	ret

000006fa <__fixunssfsi>:
 6fa:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_splitA>
 6fe:	88 f0       	brcs	.+34     	; 0x722 <__fixunssfsi+0x28>
 700:	9f 57       	subi	r25, 0x7F	; 127
 702:	98 f0       	brcs	.+38     	; 0x72a <__fixunssfsi+0x30>
 704:	b9 2f       	mov	r27, r25
 706:	99 27       	eor	r25, r25
 708:	b7 51       	subi	r27, 0x17	; 23
 70a:	b0 f0       	brcs	.+44     	; 0x738 <__fixunssfsi+0x3e>
 70c:	e1 f0       	breq	.+56     	; 0x746 <__fixunssfsi+0x4c>
 70e:	66 0f       	add	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	1a f0       	brmi	.+6      	; 0x71e <__fixunssfsi+0x24>
 718:	ba 95       	dec	r27
 71a:	c9 f7       	brne	.-14     	; 0x70e <__fixunssfsi+0x14>
 71c:	14 c0       	rjmp	.+40     	; 0x746 <__fixunssfsi+0x4c>
 71e:	b1 30       	cpi	r27, 0x01	; 1
 720:	91 f0       	breq	.+36     	; 0x746 <__fixunssfsi+0x4c>
 722:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_zero>
 726:	b1 e0       	ldi	r27, 0x01	; 1
 728:	08 95       	ret
 72a:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_zero>
 72e:	67 2f       	mov	r22, r23
 730:	78 2f       	mov	r23, r24
 732:	88 27       	eor	r24, r24
 734:	b8 5f       	subi	r27, 0xF8	; 248
 736:	39 f0       	breq	.+14     	; 0x746 <__fixunssfsi+0x4c>
 738:	b9 3f       	cpi	r27, 0xF9	; 249
 73a:	cc f3       	brlt	.-14     	; 0x72e <__fixunssfsi+0x34>
 73c:	86 95       	lsr	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b3 95       	inc	r27
 744:	d9 f7       	brne	.-10     	; 0x73c <__fixunssfsi+0x42>
 746:	3e f4       	brtc	.+14     	; 0x756 <__fixunssfsi+0x5c>
 748:	90 95       	com	r25
 74a:	80 95       	com	r24
 74c:	70 95       	com	r23
 74e:	61 95       	neg	r22
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	08 95       	ret

00000758 <__floatunsisf>:
 758:	e8 94       	clt
 75a:	09 c0       	rjmp	.+18     	; 0x76e <__floatsisf+0x12>

0000075c <__floatsisf>:
 75c:	97 fb       	bst	r25, 7
 75e:	3e f4       	brtc	.+14     	; 0x76e <__floatsisf+0x12>
 760:	90 95       	com	r25
 762:	80 95       	com	r24
 764:	70 95       	com	r23
 766:	61 95       	neg	r22
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	99 23       	and	r25, r25
 770:	a9 f0       	breq	.+42     	; 0x79c <__floatsisf+0x40>
 772:	f9 2f       	mov	r31, r25
 774:	96 e9       	ldi	r25, 0x96	; 150
 776:	bb 27       	eor	r27, r27
 778:	93 95       	inc	r25
 77a:	f6 95       	lsr	r31
 77c:	87 95       	ror	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b7 95       	ror	r27
 784:	f1 11       	cpse	r31, r1
 786:	f8 cf       	rjmp	.-16     	; 0x778 <__floatsisf+0x1c>
 788:	fa f4       	brpl	.+62     	; 0x7c8 <__floatsisf+0x6c>
 78a:	bb 0f       	add	r27, r27
 78c:	11 f4       	brne	.+4      	; 0x792 <__floatsisf+0x36>
 78e:	60 ff       	sbrs	r22, 0
 790:	1b c0       	rjmp	.+54     	; 0x7c8 <__floatsisf+0x6c>
 792:	6f 5f       	subi	r22, 0xFF	; 255
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	16 c0       	rjmp	.+44     	; 0x7c8 <__floatsisf+0x6c>
 79c:	88 23       	and	r24, r24
 79e:	11 f0       	breq	.+4      	; 0x7a4 <__floatsisf+0x48>
 7a0:	96 e9       	ldi	r25, 0x96	; 150
 7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <__floatsisf+0x6a>
 7a4:	77 23       	and	r23, r23
 7a6:	21 f0       	breq	.+8      	; 0x7b0 <__floatsisf+0x54>
 7a8:	9e e8       	ldi	r25, 0x8E	; 142
 7aa:	87 2f       	mov	r24, r23
 7ac:	76 2f       	mov	r23, r22
 7ae:	05 c0       	rjmp	.+10     	; 0x7ba <__floatsisf+0x5e>
 7b0:	66 23       	and	r22, r22
 7b2:	71 f0       	breq	.+28     	; 0x7d0 <__floatsisf+0x74>
 7b4:	96 e8       	ldi	r25, 0x86	; 134
 7b6:	86 2f       	mov	r24, r22
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	2a f0       	brmi	.+10     	; 0x7c8 <__floatsisf+0x6c>
 7be:	9a 95       	dec	r25
 7c0:	66 0f       	add	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	da f7       	brpl	.-10     	; 0x7be <__floatsisf+0x62>
 7c8:	88 0f       	add	r24, r24
 7ca:	96 95       	lsr	r25
 7cc:	87 95       	ror	r24
 7ce:	97 f9       	bld	r25, 7
 7d0:	08 95       	ret

000007d2 <floor>:
 7d2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_trunc>
 7d6:	90 f0       	brcs	.+36     	; 0x7fc <floor+0x2a>
 7d8:	9f 37       	cpi	r25, 0x7F	; 127
 7da:	48 f4       	brcc	.+18     	; 0x7ee <floor+0x1c>
 7dc:	91 11       	cpse	r25, r1
 7de:	16 f0       	brts	.+4      	; 0x7e4 <floor+0x12>
 7e0:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_szero>
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	80 e8       	ldi	r24, 0x80	; 128
 7ea:	9f eb       	ldi	r25, 0xBF	; 191
 7ec:	08 95       	ret
 7ee:	26 f4       	brtc	.+8      	; 0x7f8 <floor+0x26>
 7f0:	1b 16       	cp	r1, r27
 7f2:	61 1d       	adc	r22, r1
 7f4:	71 1d       	adc	r23, r1
 7f6:	81 1d       	adc	r24, r1
 7f8:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_mintl>
 7fc:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_mpack>

00000800 <__fp_inf>:
 800:	97 f9       	bld	r25, 7
 802:	9f 67       	ori	r25, 0x7F	; 127
 804:	80 e8       	ldi	r24, 0x80	; 128
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	08 95       	ret

0000080c <__fp_mintl>:
 80c:	88 23       	and	r24, r24
 80e:	71 f4       	brne	.+28     	; 0x82c <__fp_mintl+0x20>
 810:	77 23       	and	r23, r23
 812:	21 f0       	breq	.+8      	; 0x81c <__fp_mintl+0x10>
 814:	98 50       	subi	r25, 0x08	; 8
 816:	87 2b       	or	r24, r23
 818:	76 2f       	mov	r23, r22
 81a:	07 c0       	rjmp	.+14     	; 0x82a <__fp_mintl+0x1e>
 81c:	66 23       	and	r22, r22
 81e:	11 f4       	brne	.+4      	; 0x824 <__fp_mintl+0x18>
 820:	99 27       	eor	r25, r25
 822:	0d c0       	rjmp	.+26     	; 0x83e <__fp_mintl+0x32>
 824:	90 51       	subi	r25, 0x10	; 16
 826:	86 2b       	or	r24, r22
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	2a f0       	brmi	.+10     	; 0x838 <__fp_mintl+0x2c>
 82e:	9a 95       	dec	r25
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	da f7       	brpl	.-10     	; 0x82e <__fp_mintl+0x22>
 838:	88 0f       	add	r24, r24
 83a:	96 95       	lsr	r25
 83c:	87 95       	ror	r24
 83e:	97 f9       	bld	r25, 7
 840:	08 95       	ret

00000842 <__fp_mpack>:
 842:	9f 3f       	cpi	r25, 0xFF	; 255
 844:	31 f0       	breq	.+12     	; 0x852 <__fp_mpack_finite+0xc>

00000846 <__fp_mpack_finite>:
 846:	91 50       	subi	r25, 0x01	; 1
 848:	20 f4       	brcc	.+8      	; 0x852 <__fp_mpack_finite+0xc>
 84a:	87 95       	ror	r24
 84c:	77 95       	ror	r23
 84e:	67 95       	ror	r22
 850:	b7 95       	ror	r27
 852:	88 0f       	add	r24, r24
 854:	91 1d       	adc	r25, r1
 856:	96 95       	lsr	r25
 858:	87 95       	ror	r24
 85a:	97 f9       	bld	r25, 7
 85c:	08 95       	ret

0000085e <__fp_nan>:
 85e:	9f ef       	ldi	r25, 0xFF	; 255
 860:	80 ec       	ldi	r24, 0xC0	; 192
 862:	08 95       	ret

00000864 <__fp_pscA>:
 864:	00 24       	eor	r0, r0
 866:	0a 94       	dec	r0
 868:	16 16       	cp	r1, r22
 86a:	17 06       	cpc	r1, r23
 86c:	18 06       	cpc	r1, r24
 86e:	09 06       	cpc	r0, r25
 870:	08 95       	ret

00000872 <__fp_pscB>:
 872:	00 24       	eor	r0, r0
 874:	0a 94       	dec	r0
 876:	12 16       	cp	r1, r18
 878:	13 06       	cpc	r1, r19
 87a:	14 06       	cpc	r1, r20
 87c:	05 06       	cpc	r0, r21
 87e:	08 95       	ret

00000880 <__fp_round>:
 880:	09 2e       	mov	r0, r25
 882:	03 94       	inc	r0
 884:	00 0c       	add	r0, r0
 886:	11 f4       	brne	.+4      	; 0x88c <__fp_round+0xc>
 888:	88 23       	and	r24, r24
 88a:	52 f0       	brmi	.+20     	; 0x8a0 <__fp_round+0x20>
 88c:	bb 0f       	add	r27, r27
 88e:	40 f4       	brcc	.+16     	; 0x8a0 <__fp_round+0x20>
 890:	bf 2b       	or	r27, r31
 892:	11 f4       	brne	.+4      	; 0x898 <__fp_round+0x18>
 894:	60 ff       	sbrs	r22, 0
 896:	04 c0       	rjmp	.+8      	; 0x8a0 <__fp_round+0x20>
 898:	6f 5f       	subi	r22, 0xFF	; 255
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__fp_split3>:
 8a2:	57 fd       	sbrc	r21, 7
 8a4:	90 58       	subi	r25, 0x80	; 128
 8a6:	44 0f       	add	r20, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	59 f0       	breq	.+22     	; 0x8c2 <__fp_splitA+0x10>
 8ac:	5f 3f       	cpi	r21, 0xFF	; 255
 8ae:	71 f0       	breq	.+28     	; 0x8cc <__fp_splitA+0x1a>
 8b0:	47 95       	ror	r20

000008b2 <__fp_splitA>:
 8b2:	88 0f       	add	r24, r24
 8b4:	97 fb       	bst	r25, 7
 8b6:	99 1f       	adc	r25, r25
 8b8:	61 f0       	breq	.+24     	; 0x8d2 <__fp_splitA+0x20>
 8ba:	9f 3f       	cpi	r25, 0xFF	; 255
 8bc:	79 f0       	breq	.+30     	; 0x8dc <__fp_splitA+0x2a>
 8be:	87 95       	ror	r24
 8c0:	08 95       	ret
 8c2:	12 16       	cp	r1, r18
 8c4:	13 06       	cpc	r1, r19
 8c6:	14 06       	cpc	r1, r20
 8c8:	55 1f       	adc	r21, r21
 8ca:	f2 cf       	rjmp	.-28     	; 0x8b0 <__fp_split3+0xe>
 8cc:	46 95       	lsr	r20
 8ce:	f1 df       	rcall	.-30     	; 0x8b2 <__fp_splitA>
 8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <__fp_splitA+0x30>
 8d2:	16 16       	cp	r1, r22
 8d4:	17 06       	cpc	r1, r23
 8d6:	18 06       	cpc	r1, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	f1 cf       	rjmp	.-30     	; 0x8be <__fp_splitA+0xc>
 8dc:	86 95       	lsr	r24
 8de:	71 05       	cpc	r23, r1
 8e0:	61 05       	cpc	r22, r1
 8e2:	08 94       	sec
 8e4:	08 95       	ret

000008e6 <__fp_trunc>:
 8e6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_splitA>
 8ea:	a0 f0       	brcs	.+40     	; 0x914 <__stack+0x15>
 8ec:	be e7       	ldi	r27, 0x7E	; 126
 8ee:	b9 17       	cp	r27, r25
 8f0:	88 f4       	brcc	.+34     	; 0x914 <__stack+0x15>
 8f2:	bb 27       	eor	r27, r27
 8f4:	9f 38       	cpi	r25, 0x8F	; 143
 8f6:	60 f4       	brcc	.+24     	; 0x910 <__stack+0x11>
 8f8:	16 16       	cp	r1, r22
 8fa:	b1 1d       	adc	r27, r1
 8fc:	67 2f       	mov	r22, r23
 8fe:	78 2f       	mov	r23, r24
 900:	88 27       	eor	r24, r24
 902:	98 5f       	subi	r25, 0xF8	; 248
 904:	f7 cf       	rjmp	.-18     	; 0x8f4 <__fp_trunc+0xe>
 906:	86 95       	lsr	r24
 908:	77 95       	ror	r23
 90a:	67 95       	ror	r22
 90c:	b1 1d       	adc	r27, r1
 90e:	93 95       	inc	r25
 910:	96 39       	cpi	r25, 0x96	; 150
 912:	c8 f3       	brcs	.-14     	; 0x906 <__stack+0x7>
 914:	08 95       	ret

00000916 <__fp_zero>:
 916:	e8 94       	clt

00000918 <__fp_szero>:
 918:	bb 27       	eor	r27, r27
 91a:	66 27       	eor	r22, r22
 91c:	77 27       	eor	r23, r23
 91e:	cb 01       	movw	r24, r22
 920:	97 f9       	bld	r25, 7
 922:	08 95       	ret
 924:	16 f0       	brts	.+4      	; 0x92a <__fp_szero+0x12>
 926:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_mpack>
 92a:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_nan>
 92e:	68 94       	set
 930:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_inf>

00000934 <log>:
 934:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_splitA>
 938:	a8 f3       	brcs	.-22     	; 0x924 <__fp_szero+0xc>
 93a:	99 23       	and	r25, r25
 93c:	c1 f3       	breq	.-16     	; 0x92e <__fp_szero+0x16>
 93e:	ae f3       	brts	.-22     	; 0x92a <__fp_szero+0x12>
 940:	df 93       	push	r29
 942:	cf 93       	push	r28
 944:	1f 93       	push	r17
 946:	0f 93       	push	r16
 948:	ff 92       	push	r15
 94a:	c9 2f       	mov	r28, r25
 94c:	dd 27       	eor	r29, r29
 94e:	88 23       	and	r24, r24
 950:	2a f0       	brmi	.+10     	; 0x95c <log+0x28>
 952:	21 97       	sbiw	r28, 0x01	; 1
 954:	66 0f       	add	r22, r22
 956:	77 1f       	adc	r23, r23
 958:	88 1f       	adc	r24, r24
 95a:	da f7       	brpl	.-10     	; 0x952 <log+0x1e>
 95c:	20 e0       	ldi	r18, 0x00	; 0
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	40 e8       	ldi	r20, 0x80	; 128
 962:	5f eb       	ldi	r21, 0xBF	; 191
 964:	9f e3       	ldi	r25, 0x3F	; 63
 966:	88 39       	cpi	r24, 0x98	; 152
 968:	20 f0       	brcs	.+8      	; 0x972 <log+0x3e>
 96a:	80 3e       	cpi	r24, 0xE0	; 224
 96c:	38 f0       	brcs	.+14     	; 0x97c <log+0x48>
 96e:	21 96       	adiw	r28, 0x01	; 1
 970:	8f 77       	andi	r24, 0x7F	; 127
 972:	0e 94 98 02 	call	0x530	; 0x530 <__addsf3>
 976:	e4 eb       	ldi	r30, 0xB4	; 180
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	04 c0       	rjmp	.+8      	; 0x984 <log+0x50>
 97c:	0e 94 98 02 	call	0x530	; 0x530 <__addsf3>
 980:	e1 ee       	ldi	r30, 0xE1	; 225
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_powser>
 988:	8b 01       	movw	r16, r22
 98a:	be 01       	movw	r22, r28
 98c:	ec 01       	movw	r28, r24
 98e:	fb 2e       	mov	r15, r27
 990:	6f 57       	subi	r22, 0x7F	; 127
 992:	71 09       	sbc	r23, r1
 994:	75 95       	asr	r23
 996:	77 1f       	adc	r23, r23
 998:	88 0b       	sbc	r24, r24
 99a:	99 0b       	sbc	r25, r25
 99c:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatsisf>
 9a0:	28 e1       	ldi	r18, 0x18	; 24
 9a2:	32 e7       	ldi	r19, 0x72	; 114
 9a4:	41 e3       	ldi	r20, 0x31	; 49
 9a6:	5f e3       	ldi	r21, 0x3F	; 63
 9a8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3x>
 9ac:	af 2d       	mov	r26, r15
 9ae:	98 01       	movw	r18, r16
 9b0:	ae 01       	movw	r20, r28
 9b2:	ff 90       	pop	r15
 9b4:	0f 91       	pop	r16
 9b6:	1f 91       	pop	r17
 9b8:	cf 91       	pop	r28
 9ba:	df 91       	pop	r29
 9bc:	0e 94 af 02 	call	0x55e	; 0x55e <__addsf3x>
 9c0:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_round>

000009c4 <__mulsf3>:
 9c4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3x>
 9c8:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_round>
 9cc:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscA>
 9d0:	38 f0       	brcs	.+14     	; 0x9e0 <__mulsf3+0x1c>
 9d2:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscB>
 9d6:	20 f0       	brcs	.+8      	; 0x9e0 <__mulsf3+0x1c>
 9d8:	95 23       	and	r25, r21
 9da:	11 f0       	breq	.+4      	; 0x9e0 <__mulsf3+0x1c>
 9dc:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_inf>
 9e0:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_nan>
 9e4:	11 24       	eor	r1, r1
 9e6:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_szero>

000009ea <__mulsf3x>:
 9ea:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_split3>
 9ee:	70 f3       	brcs	.-36     	; 0x9cc <__mulsf3+0x8>

000009f0 <__mulsf3_pse>:
 9f0:	95 9f       	mul	r25, r21
 9f2:	c1 f3       	breq	.-16     	; 0x9e4 <__mulsf3+0x20>
 9f4:	95 0f       	add	r25, r21
 9f6:	50 e0       	ldi	r21, 0x00	; 0
 9f8:	55 1f       	adc	r21, r21
 9fa:	62 9f       	mul	r22, r18
 9fc:	f0 01       	movw	r30, r0
 9fe:	72 9f       	mul	r23, r18
 a00:	bb 27       	eor	r27, r27
 a02:	f0 0d       	add	r31, r0
 a04:	b1 1d       	adc	r27, r1
 a06:	63 9f       	mul	r22, r19
 a08:	aa 27       	eor	r26, r26
 a0a:	f0 0d       	add	r31, r0
 a0c:	b1 1d       	adc	r27, r1
 a0e:	aa 1f       	adc	r26, r26
 a10:	64 9f       	mul	r22, r20
 a12:	66 27       	eor	r22, r22
 a14:	b0 0d       	add	r27, r0
 a16:	a1 1d       	adc	r26, r1
 a18:	66 1f       	adc	r22, r22
 a1a:	82 9f       	mul	r24, r18
 a1c:	22 27       	eor	r18, r18
 a1e:	b0 0d       	add	r27, r0
 a20:	a1 1d       	adc	r26, r1
 a22:	62 1f       	adc	r22, r18
 a24:	73 9f       	mul	r23, r19
 a26:	b0 0d       	add	r27, r0
 a28:	a1 1d       	adc	r26, r1
 a2a:	62 1f       	adc	r22, r18
 a2c:	83 9f       	mul	r24, r19
 a2e:	a0 0d       	add	r26, r0
 a30:	61 1d       	adc	r22, r1
 a32:	22 1f       	adc	r18, r18
 a34:	74 9f       	mul	r23, r20
 a36:	33 27       	eor	r19, r19
 a38:	a0 0d       	add	r26, r0
 a3a:	61 1d       	adc	r22, r1
 a3c:	23 1f       	adc	r18, r19
 a3e:	84 9f       	mul	r24, r20
 a40:	60 0d       	add	r22, r0
 a42:	21 1d       	adc	r18, r1
 a44:	82 2f       	mov	r24, r18
 a46:	76 2f       	mov	r23, r22
 a48:	6a 2f       	mov	r22, r26
 a4a:	11 24       	eor	r1, r1
 a4c:	9f 57       	subi	r25, 0x7F	; 127
 a4e:	50 40       	sbci	r21, 0x00	; 0
 a50:	9a f0       	brmi	.+38     	; 0xa78 <__mulsf3_pse+0x88>
 a52:	f1 f0       	breq	.+60     	; 0xa90 <__mulsf3_pse+0xa0>
 a54:	88 23       	and	r24, r24
 a56:	4a f0       	brmi	.+18     	; 0xa6a <__mulsf3_pse+0x7a>
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	bb 1f       	adc	r27, r27
 a5e:	66 1f       	adc	r22, r22
 a60:	77 1f       	adc	r23, r23
 a62:	88 1f       	adc	r24, r24
 a64:	91 50       	subi	r25, 0x01	; 1
 a66:	50 40       	sbci	r21, 0x00	; 0
 a68:	a9 f7       	brne	.-22     	; 0xa54 <__mulsf3_pse+0x64>
 a6a:	9e 3f       	cpi	r25, 0xFE	; 254
 a6c:	51 05       	cpc	r21, r1
 a6e:	80 f0       	brcs	.+32     	; 0xa90 <__mulsf3_pse+0xa0>
 a70:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_inf>
 a74:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_szero>
 a78:	5f 3f       	cpi	r21, 0xFF	; 255
 a7a:	e4 f3       	brlt	.-8      	; 0xa74 <__mulsf3_pse+0x84>
 a7c:	98 3e       	cpi	r25, 0xE8	; 232
 a7e:	d4 f3       	brlt	.-12     	; 0xa74 <__mulsf3_pse+0x84>
 a80:	86 95       	lsr	r24
 a82:	77 95       	ror	r23
 a84:	67 95       	ror	r22
 a86:	b7 95       	ror	r27
 a88:	f7 95       	ror	r31
 a8a:	e7 95       	ror	r30
 a8c:	9f 5f       	subi	r25, 0xFF	; 255
 a8e:	c1 f7       	brne	.-16     	; 0xa80 <__mulsf3_pse+0x90>
 a90:	fe 2b       	or	r31, r30
 a92:	88 0f       	add	r24, r24
 a94:	91 1d       	adc	r25, r1
 a96:	96 95       	lsr	r25
 a98:	87 95       	ror	r24
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret

00000a9e <__fp_powser>:
 a9e:	df 93       	push	r29
 aa0:	cf 93       	push	r28
 aa2:	1f 93       	push	r17
 aa4:	0f 93       	push	r16
 aa6:	ff 92       	push	r15
 aa8:	ef 92       	push	r14
 aaa:	df 92       	push	r13
 aac:	7b 01       	movw	r14, r22
 aae:	8c 01       	movw	r16, r24
 ab0:	68 94       	set
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <__fp_powser+0x22>
 ab4:	da 2e       	mov	r13, r26
 ab6:	ef 01       	movw	r28, r30
 ab8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3x>
 abc:	fe 01       	movw	r30, r28
 abe:	e8 94       	clt
 ac0:	a5 91       	lpm	r26, Z+
 ac2:	25 91       	lpm	r18, Z+
 ac4:	35 91       	lpm	r19, Z+
 ac6:	45 91       	lpm	r20, Z+
 ac8:	55 91       	lpm	r21, Z+
 aca:	a6 f3       	brts	.-24     	; 0xab4 <__fp_powser+0x16>
 acc:	ef 01       	movw	r28, r30
 ace:	0e 94 af 02 	call	0x55e	; 0x55e <__addsf3x>
 ad2:	fe 01       	movw	r30, r28
 ad4:	97 01       	movw	r18, r14
 ad6:	a8 01       	movw	r20, r16
 ad8:	da 94       	dec	r13
 ada:	69 f7       	brne	.-38     	; 0xab6 <__fp_powser+0x18>
 adc:	df 90       	pop	r13
 ade:	ef 90       	pop	r14
 ae0:	ff 90       	pop	r15
 ae2:	0f 91       	pop	r16
 ae4:	1f 91       	pop	r17
 ae6:	cf 91       	pop	r28
 ae8:	df 91       	pop	r29
 aea:	08 95       	ret

00000aec <__divmodhi4>:
 aec:	97 fb       	bst	r25, 7
 aee:	07 2e       	mov	r0, r23
 af0:	16 f4       	brtc	.+4      	; 0xaf6 <__divmodhi4+0xa>
 af2:	00 94       	com	r0
 af4:	07 d0       	rcall	.+14     	; 0xb04 <__divmodhi4_neg1>
 af6:	77 fd       	sbrc	r23, 7
 af8:	09 d0       	rcall	.+18     	; 0xb0c <__divmodhi4_neg2>
 afa:	0e 94 8a 05 	call	0xb14	; 0xb14 <__udivmodhi4>
 afe:	07 fc       	sbrc	r0, 7
 b00:	05 d0       	rcall	.+10     	; 0xb0c <__divmodhi4_neg2>
 b02:	3e f4       	brtc	.+14     	; 0xb12 <__divmodhi4_exit>

00000b04 <__divmodhi4_neg1>:
 b04:	90 95       	com	r25
 b06:	81 95       	neg	r24
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	08 95       	ret

00000b0c <__divmodhi4_neg2>:
 b0c:	70 95       	com	r23
 b0e:	61 95       	neg	r22
 b10:	7f 4f       	sbci	r23, 0xFF	; 255

00000b12 <__divmodhi4_exit>:
 b12:	08 95       	ret

00000b14 <__udivmodhi4>:
 b14:	aa 1b       	sub	r26, r26
 b16:	bb 1b       	sub	r27, r27
 b18:	51 e1       	ldi	r21, 0x11	; 17
 b1a:	07 c0       	rjmp	.+14     	; 0xb2a <__udivmodhi4_ep>

00000b1c <__udivmodhi4_loop>:
 b1c:	aa 1f       	adc	r26, r26
 b1e:	bb 1f       	adc	r27, r27
 b20:	a6 17       	cp	r26, r22
 b22:	b7 07       	cpc	r27, r23
 b24:	10 f0       	brcs	.+4      	; 0xb2a <__udivmodhi4_ep>
 b26:	a6 1b       	sub	r26, r22
 b28:	b7 0b       	sbc	r27, r23

00000b2a <__udivmodhi4_ep>:
 b2a:	88 1f       	adc	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	5a 95       	dec	r21
 b30:	a9 f7       	brne	.-22     	; 0xb1c <__udivmodhi4_loop>
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	bc 01       	movw	r22, r24
 b38:	cd 01       	movw	r24, r26
 b3a:	08 95       	ret

00000b3c <strcmp>:
 b3c:	fb 01       	movw	r30, r22
 b3e:	dc 01       	movw	r26, r24
 b40:	8d 91       	ld	r24, X+
 b42:	01 90       	ld	r0, Z+
 b44:	80 19       	sub	r24, r0
 b46:	01 10       	cpse	r0, r1
 b48:	d9 f3       	breq	.-10     	; 0xb40 <strcmp+0x4>
 b4a:	99 0b       	sbc	r25, r25
 b4c:	08 95       	ret

00000b4e <strcpy>:
 b4e:	fb 01       	movw	r30, r22
 b50:	dc 01       	movw	r26, r24
 b52:	01 90       	ld	r0, Z+
 b54:	0d 92       	st	X+, r0
 b56:	00 20       	and	r0, r0
 b58:	e1 f7       	brne	.-8      	; 0xb52 <strcpy+0x4>
 b5a:	08 95       	ret

00000b5c <_exit>:
 b5c:	f8 94       	cli

00000b5e <__stop_program>:
 b5e:	ff cf       	rjmp	.-2      	; 0xb5e <__stop_program>
