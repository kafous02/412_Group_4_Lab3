
TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800206  00800206  00000e56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000962  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000882  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d2  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  0000259e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d8 e0       	ldi	r29, 0x08	; 8
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	12 e0       	ldi	r17, 0x02	; 2
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	ec eb       	ldi	r30, 0xBC	; 188
 122:	fc e0       	ldi	r31, 0x0C	; 12
 124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
 126:	05 90       	lpm	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	a6 30       	cpi	r26, 0x06	; 6
 12c:	b1 07       	cpc	r27, r17
 12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
 130:	22 e0       	ldi	r18, 0x02	; 2
 132:	a6 e0       	ldi	r26, 0x06	; 6
 134:	b2 e0       	ldi	r27, 0x02	; 2
 136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
 138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
 13a:	a3 31       	cpi	r26, 0x13	; 19
 13c:	b2 07       	cpc	r27, r18
 13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
 140:	0e 94 3a 03 	call	0x674	; 0x674 <main>
 144:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_exit>

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <Mega328P_Init>:
.set	temp,0				//Sets the value of temp to 0, can be changed later

.section ".text"			//Defines a new section called .text
.global Mega328P_Init
Mega328P_Init:
		ldi	r16,0x07		;PB0(R*W),PB1(RS),PB2(E) as fixed outputs
 14c:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		//Sets all bits of Port B to outputs
 14e:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			//Zeroes the r16 register
 150:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		//Sets all of Port B to zero
 152:	05 b9       	out	0x05, r16	; 5
		out	U2X0,r16		;initialize UART, 8bits, no parity, 1 stop, 9600
 154:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			//Loads 0x0 into r17
 156:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		//Loads 0x67 into r16
 158:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		//Sets high part of Baud Rate 
 15a:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts	UBRR0L,r16		//Sets low part of Baud Rate
 15e:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ldi	r16,24			//Loads 24 into r16
 162:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		//Stores r24 in the the configuration register for serial communications. Enables RX complete interrupt and TX complete interrupt
 164:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi	r16,6			//loads 6 into r16
 168:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		//sets characters size to 8-bits
 16a:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi r16,0x87		//initialize ADC
 16e:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		//stores 0x87 into ADC configuration SRAM  location
 170:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		ldi r16,0x40		//Loads 0x40 into r16
 174:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		//Stores the value of r16 into the ADC multiplexer selection memory space in SRAM
 176:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ldi r16,7			//Loads 0 into r16
 17a:	07 e0       	ldi	r16, 0x07	; 7
		sts ADCSRB,r16		//Stores 0 into ADCSRB memory space which puts ADC in free roaming mode
 17c:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ldi r16,0xFE		//Loads 0xFE int r16
 180:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		//Stores 0xFE into DIDR0 which is the data input disable register
 182:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		ldi r16,0xFF		//Loads 0xFF int r16
 186:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		//Stores 0xFF into DIDR0 which is the data input disable register
 188:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		ret					//Return from Mega328P_Init - I/O port and ADC configurations have been set
 18c:	08 95       	ret

0000018e <LCD_Write_Command>:
	
.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 18e:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0xFF		;PD0 - PD7 as outputs
 192:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//Set Data Direction Register D
 194:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//Load contents of Label Data into r16
 196:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <__data_end>
	out		PORTD,r16		//Move contents of Label Data into Port D from r16
 19a:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			//Load constant 4 into r16
 19c:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		//Move 4 from r16 into Port B
 19e:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 1a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	ldi		r16,0			//Clear r16
 1a4:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//Clear PortB
 1a6:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 1a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	call	UART_On			//Call subroutine UART_On to turn UART back on
 1ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//End of LCD_Write_Command
 1b0:	08 95       	ret

000001b2 <LCD_Delay>:

.global LCD_Delay
LCD_Delay:
	ldi		r16,0xFA		//Load constant 250 into r16
 1b2:	0a ef       	ldi	r16, 0xFA	; 250

000001b4 <D0>:
D0:	ldi		r17,0xFF		//Load constant 255 into r17
 1b4:	1f ef       	ldi	r17, 0xFF	; 255

000001b6 <D1>:
D1:	dec		r17				//Decrement r17
 1b6:	1a 95       	dec	r17
	brne	D1				//Branch back to D1 while it's still not 0.
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <D1>
	dec		r16				//Decrement r16
 1ba:	0a 95       	dec	r16
	brne	D0				//Branch back to D0 while it's still not 0.
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <D0>
	ret						//End of LCD_Delay
 1be:	08 95       	ret

000001c0 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 1c0:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0xFF		//Set r16
 1c4:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//Set Data Direction Register D
 1c6:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//Load contents of Label Data into r16
 1c8:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <__data_end>
	out		PORTD,r16		//Move contents of Label Data into Port D
 1cc:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			//Load constant 6 into r16
 1ce:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		//Move 6 from r16 into Port B
 1d0:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 1d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	ldi		r16,0			//Clear r16
 1d6:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//Clear PortB
 1d8:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//Call subroutine LCD_Delay to do nothing for a constant amount of clock cycles
 1da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	call	UART_On			//Call subroutine UART_On to turn UART back on
 1de:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//End of UART_Write_Data
 1e2:	08 95       	ret

000001e4 <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		//Call subroutine UART_off to temporarily turn UART off
 1e4:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0x00		//Clear r16
 1e8:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		//Clear Data Direction Register D
 1ea:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			//Load constant 4 into Port B 
 1ec:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		//Read contents of Port D Data Register into r16
 1ee:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		//Store the contents of Port D Data Register into label Data
 1f0:	00 93 06 02 	sts	0x0206, r16	; 0x800206 <__data_end>
	out		PORTB,0			//clear Port B
 1f4:	05 b8       	out	0x05, r0	; 5
	call	UART_On			//Call subroutine UART_On to turn UART back on
 1f6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//End of LCD_Read_Data
 1fa:	08 95       	ret

000001fc <UART_On>:

.global UART_On
UART_On:
	ldi		r16,2				//Load constant 2 into r16
 1fc:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			//Store 2 into Data Direction Register Port D
 1fe:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				//Load constant 24 into r16
 200:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			//Store 24 into USART Control and Status Register 0 B
 202:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//End of UART_On
 206:	08 95       	ret

00000208 <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					//Load constant 0 into r16
 208:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				//Move 0 from r16 into USART Control and Status Register 0 B
 20a:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret							//End of UART_Off
 20e:	08 95       	ret

00000210 <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r16
 210:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//Skips the next line if USART Receive Complete is set
 214:	07 ff       	sbrs	r16, 7
	ret							//End of UART_Clear
 216:	08 95       	ret
	lds		r16,UDR0			//Store the contents of USART I/O Data Register 0 into r16
 218:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	rjmp	UART_Clear			//Loop back to start while RXC0 = 1
 21c:	f9 cf       	rjmp	.-14     	; 0x210 <UART_Clear>

0000021e <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r16
 21e:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//Skips the next line if USART Receive Complete is set
 222:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			//Loop back to start while RXC0 = 1
 224:	fc cf       	rjmp	.-8      	; 0x21e <UART_Get>
	lds		r16,UDR0			//Store the contents of USART I/O Data Register 0 into r16
 226:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		ASCII,r16			//Move the contents of USART I/O Data Register 0 from r16 into label ASCII
 22a:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <ASCII>
	ret							//End of UART_Get
 22e:	08 95       	ret

00000230 <UART_Poll>:

.global UART_Poll
UART_Poll:
	lds		r16,UDR0			//Store the contents of USART I/O Data Register 0 into r16
 230:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		ASCII,r16			//Move the contents of USART I/O Data Register 0 from r16 into label ASCII
 234:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <ASCII>
	ret							//End of UART_Get
 238:	08 95       	ret

0000023a <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//Store the contents of USART Control and Status Register 0 A into r17
 23a:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r17,UDRE0			//Skips the next instruction if USART Data Register Empty is set
 23e:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put			//Loop back to start while UDRE0 = 1
 240:	fc cf       	rjmp	.-8      	; 0x23a <UART_Put>
	lds		r16,ASCII			//Load Label ASCII into r16
 242:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <ASCII>
	sts		UDR0,r16			//Move ASCII from r16 to USART Data Register
 246:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	ret							//End of UART_Put
 24a:	08 95       	ret

0000024c <ADC_Get>:

.global ADC_Get
ADC_Get:
		ldi		r16,0xE7			//Load 231 into r16
 24c:	07 ee       	ldi	r16, 0xE7	; 231
		sts		ADCSRA,r16			//Move 231 from r16 to ADC Control and Status Register A
 24e:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

00000252 <A2V1>:
A2V1:	lds		r16,ADCSRA			//Load the ADC Control and Status Register A into r16
 252:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbrc	r16,ADSC			//Skip the following instruction if the ADC Start Conversion bit is cleared
 256:	06 fd       	sbrc	r16, 6
		rjmp 	A2V1				//Loop back into A2V1, continually scanning for ADCSRA to be 1
 258:	fc cf       	rjmp	.-8      	; 0x252 <A2V1>
		lds		r16,ADCL			//ADCL must be read first, then ADCH, to ensure that the content of the Data Registers belongsto the same conversion
 25a:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		sts		LADC,r16			//Store ADCL into SRAM Label LADC
 25e:	00 93 0e 02 	sts	0x020E, r16	; 0x80020e <LADC>
		lds		r16,ADCH			//The rest of ADC is read
 262:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		sts		HADC,r16			//Store ADCH into SRAM Label HADC
 266:	00 93 07 02 	sts	0x0207, r16	; 0x800207 <HADC>
		ret							//End of ADC_Get				
 26a:	08 95       	ret

0000026c <EEPROM_Write>:


					
.global EEPROM_Write
EEPROM_Write:      
		sbic    EECR,EEPE
 26c:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Write		; Wait for completion of previous write
 26e:	fe cf       	rjmp	.-4      	; 0x26c <EEPROM_Write>
		ldi		r18,0x00			; Set up address (r18:r17) in address register
 270:	20 e0       	ldi	r18, 0x00	; 0
		ldi		r17,0x05 
 272:	15 e0       	ldi	r17, 0x05	; 5
		ldi		r16,'F'				; Set up data in r16    
 274:	06 e4       	ldi	r16, 0x46	; 70
		out     EEARH, r18      
 276:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17			      
 278:	11 bd       	out	0x21, r17	; 33
		out     EEDR,r16			; Write data (r16) to Data Register  
 27a:	00 bd       	out	0x20, r16	; 32
		sbi     EECR,EEMPE			; Write logical one to EEMPE
 27c:	fa 9a       	sbi	0x1f, 2	; 31
		sbi     EECR,EEPE			; Start eeprom write by setting EEPE
 27e:	f9 9a       	sbi	0x1f, 1	; 31
		ret 
 280:	08 95       	ret

00000282 <EEPROM_Read>:

.global EEPROM_Read
EEPROM_Read:					    
		sbic    EECR,EEPE    
 282:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Read		; Wait for completion of previous write
 284:	fe cf       	rjmp	.-4      	; 0x282 <EEPROM_Read>
		ldi		r18,0x00		; Set up address (r18:r17) in EEPROM address register
 286:	20 e0       	ldi	r18, 0x00	; 0
		ldi		r17,0x05
 288:	15 e0       	ldi	r17, 0x05	; 5
		ldi		r16,0x00   
 28a:	00 e0       	ldi	r16, 0x00	; 0
		out     EEARH, r18   
 28c:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17		   
 28e:	11 bd       	out	0x21, r17	; 33
		sbi     EECR,EERE		; Start eeprom read by writing EERE
 290:	f8 9a       	sbi	0x1f, 0	; 31
		in      r16,EEDR		; Read data from Data Register
 292:	00 b5       	in	r16, 0x20	; 32
		sts		ASCII,r16  
 294:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <ASCII>
		ret
 298:	08 95       	ret

0000029a <UART_Puts>:
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
 2a0:	89 91       	ld	r24, Y+
 2a2:	88 23       	and	r24, r24
 2a4:	29 f0       	breq	.+10     	; 0x2b0 <UART_Puts+0x16>
 2a6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ASCII>
 2aa:	0e 94 1d 01 	call	0x23a	; 0x23a <UART_Put>
 2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <UART_Puts+0x6>
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <LCD_Puts>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
 2bc:	89 91       	ld	r24, Y+
 2be:	88 23       	and	r24, r24
 2c0:	29 f0       	breq	.+10     	; 0x2cc <LCD_Puts+0x16>
 2c2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 2c6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Write_Data>
 2ca:	f8 cf       	rjmp	.-16     	; 0x2bc <LCD_Puts+0x6>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <Banner>:
 2d2:	89 ee       	ldi	r24, 0xE9	; 233
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 2da:	82 eb       	ldi	r24, 0xB2	; 178
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 2e2:	87 e8       	ldi	r24, 0x87	; 135
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0c 94 4d 01 	jmp	0x29a	; 0x29a <UART_Puts>

000002ea <HELP>:
 2ea:	81 e9       	ldi	r24, 0x91	; 145
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0c 94 4d 01 	jmp	0x29a	; 0x29a <UART_Puts>

000002f2 <substring>:
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	7c 01       	movw	r14, r24
 308:	8b 01       	movw	r16, r22
 30a:	ec 01       	movw	r28, r24
 30c:	09 90       	ld	r0, Y+
 30e:	00 20       	and	r0, r0
 310:	e9 f7       	brne	.-6      	; 0x30c <substring+0x1a>
 312:	21 97       	sbiw	r28, 0x01	; 1
 314:	c8 1b       	sub	r28, r24
 316:	d9 0b       	sbc	r29, r25
 318:	fb 01       	movw	r30, r22
 31a:	01 90       	ld	r0, Z+
 31c:	00 20       	and	r0, r0
 31e:	e9 f7       	brne	.-6      	; 0x31a <substring+0x28>
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	9f 01       	movw	r18, r30
 324:	26 1b       	sub	r18, r22
 326:	37 0b       	sbc	r19, r23
 328:	6b 01       	movw	r12, r22
 32a:	fa 01       	movw	r30, r20
 32c:	59 01       	movw	r10, r18
 32e:	a4 0e       	add	r10, r20
 330:	b5 1e       	adc	r11, r21
 332:	ea 15       	cp	r30, r10
 334:	fb 05       	cpc	r31, r11
 336:	6c f4       	brge	.+26     	; 0x352 <substring+0x60>
 338:	cf 01       	movw	r24, r30
 33a:	be 01       	movw	r22, r28
 33c:	0e 94 24 06 	call	0xc48	; 0xc48 <__divmodhi4>
 340:	d7 01       	movw	r26, r14
 342:	a8 0f       	add	r26, r24
 344:	b9 1f       	adc	r27, r25
 346:	8c 91       	ld	r24, X
 348:	d6 01       	movw	r26, r12
 34a:	8d 93       	st	X+, r24
 34c:	6d 01       	movw	r12, r26
 34e:	31 96       	adiw	r30, 0x01	; 1
 350:	f0 cf       	rjmp	.-32     	; 0x332 <substring+0x40>
 352:	f8 01       	movw	r30, r16
 354:	e2 0f       	add	r30, r18
 356:	f3 1f       	adc	r31, r19
 358:	10 82       	st	Z, r1
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	08 95       	ret

00000370 <scrollingLCD>:
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	61 97       	sbiw	r28, 0x11	; 17
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	6c 01       	movw	r12, r24
 392:	fc 01       	movw	r30, r24
 394:	01 90       	ld	r0, Z+
 396:	00 20       	and	r0, r0
 398:	e9 f7       	brne	.-6      	; 0x394 <scrollingLCD+0x24>
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	8f 01       	movw	r16, r30
 39e:	08 1b       	sub	r16, r24
 3a0:	19 0b       	sbc	r17, r25
 3a2:	e1 2c       	mov	r14, r1
 3a4:	f1 2c       	mov	r15, r1
 3a6:	81 e1       	ldi	r24, 0x11	; 17
 3a8:	e7 e3       	ldi	r30, 0x37	; 55
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	de 01       	movw	r26, r28
 3ae:	11 96       	adiw	r26, 0x01	; 1
 3b0:	01 90       	ld	r0, Z+
 3b2:	0d 92       	st	X+, r0
 3b4:	8a 95       	dec	r24
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <scrollingLCD+0x40>
 3b8:	c7 01       	movw	r24, r14
 3ba:	b8 01       	movw	r22, r16
 3bc:	0e 94 24 06 	call	0xc48	; 0xc48 <__divmodhi4>
 3c0:	ac 01       	movw	r20, r24
 3c2:	be 01       	movw	r22, r28
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	c6 01       	movw	r24, r12
 3ca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <substring>
 3ce:	ce 01       	movw	r24, r28
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Puts>
 3d6:	0e 94 18 01 	call	0x230	; 0x230 <UART_Poll>
 3da:	89 e1       	ldi	r24, 0x19	; 25
 3dc:	e8 16       	cp	r14, r24
 3de:	f1 04       	cpc	r15, r1
 3e0:	21 f0       	breq	.+8      	; 0x3ea <scrollingLCD+0x7a>
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	e8 1a       	sub	r14, r24
 3e6:	f8 0a       	sbc	r15, r24
 3e8:	de cf       	rjmp	.-68     	; 0x3a6 <scrollingLCD+0x36>
 3ea:	61 96       	adiw	r28, 0x11	; 17
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	08 95       	ret

00000408 <LCD>:
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	e2 97       	sbiw	r28, 0x32	; 50
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
 41c:	84 e3       	ldi	r24, 0x34	; 52
 41e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 422:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 42c:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 436:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 440:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 444:	8f e0       	ldi	r24, 0x0F	; 15
 446:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 44a:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 44e:	89 e2       	ldi	r24, 0x29	; 41
 450:	e5 e0       	ldi	r30, 0x05	; 5
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	de 01       	movw	r26, r28
 456:	11 96       	adiw	r26, 0x01	; 1
 458:	01 90       	ld	r0, Z+
 45a:	0d 92       	st	X+, r0
 45c:	8a 95       	dec	r24
 45e:	e1 f7       	brne	.-8      	; 0x458 <LCD+0x50>
 460:	fe 01       	movw	r30, r28
 462:	ba 96       	adiw	r30, 0x2a	; 42
 464:	89 e0       	ldi	r24, 0x09	; 9
 466:	df 01       	movw	r26, r30
 468:	1d 92       	st	X+, r1
 46a:	8a 95       	dec	r24
 46c:	e9 f7       	brne	.-6      	; 0x468 <LCD+0x60>
 46e:	ce 01       	movw	r24, r28
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	0e 94 b8 01 	call	0x370	; 0x370 <scrollingLCD>
 476:	e2 96       	adiw	r28, 0x32	; 50
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <ADC>:
 488:	8f 92       	push	r8
 48a:	9f 92       	push	r9
 48c:	af 92       	push	r10
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <isADC+0x1>
 4a0:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <isADC>
 4a4:	0e 94 26 01 	call	0x24c	; 0x24c <ADC_Get>
 4a8:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <HADC>
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	76 2f       	mov	r23, r22
 4b0:	66 27       	eor	r22, r22
 4b2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <LADC>
 4b6:	68 0f       	add	r22, r24
 4b8:	71 1d       	adc	r23, r1
 4ba:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <Acc+0x1>
 4be:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <Acc>
 4c2:	07 2e       	mov	r0, r23
 4c4:	00 0c       	add	r0, r0
 4c6:	88 0b       	sbc	r24, r24
 4c8:	99 0b       	sbc	r25, r25
 4ca:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatsisf>
 4ce:	6b 01       	movw	r12, r22
 4d0:	7c 01       	movw	r14, r24
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e4       	ldi	r19, 0x40	; 64
 4d6:	4c e1       	ldi	r20, 0x1C	; 28
 4d8:	56 e4       	ldi	r21, 0x46	; 70
 4da:	0e 94 90 05 	call	0xb20	; 0xb20 <__mulsf3>
 4de:	4b 01       	movw	r8, r22
 4e0:	5c 01       	movw	r10, r24
 4e2:	a7 01       	movw	r20, r14
 4e4:	96 01       	movw	r18, r12
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	80 e8       	ldi	r24, 0x80	; 128
 4ec:	94 e4       	ldi	r25, 0x44	; 68
 4ee:	0e 94 45 03 	call	0x68a	; 0x68a <__subsf3>
 4f2:	9b 01       	movw	r18, r22
 4f4:	ac 01       	movw	r20, r24
 4f6:	c5 01       	movw	r24, r10
 4f8:	b4 01       	movw	r22, r8
 4fa:	0e 94 b2 03 	call	0x764	; 0x764 <__divsf3>
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e4       	ldi	r19, 0x40	; 64
 502:	4c e1       	ldi	r20, 0x1C	; 28
 504:	56 e4       	ldi	r21, 0x46	; 70
 506:	0e 94 b2 03 	call	0x764	; 0x764 <__divsf3>
 50a:	0e 94 48 05 	call	0xa90	; 0xa90 <log>
 50e:	2c e5       	ldi	r18, 0x5C	; 92
 510:	3f ea       	ldi	r19, 0xAF	; 175
 512:	43 e9       	ldi	r20, 0x93	; 147
 514:	53 e4       	ldi	r21, 0x43	; 67
 516:	0e 94 90 05 	call	0xb20	; 0xb20 <__mulsf3>
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	30 ee       	ldi	r19, 0xE0	; 224
 51e:	46 e7       	ldi	r20, 0x76	; 118
 520:	55 e4       	ldi	r21, 0x45	; 69
 522:	0e 94 46 03 	call	0x68c	; 0x68c <__addsf3>
 526:	9b 01       	movw	r18, r22
 528:	ac 01       	movw	r20, r24
 52a:	6c eb       	ldi	r22, 0xBC	; 188
 52c:	7b e6       	ldi	r23, 0x6B	; 107
 52e:	8e e8       	ldi	r24, 0x8E	; 142
 530:	99 e4       	ldi	r25, 0x49	; 73
 532:	0e 94 b2 03 	call	0x764	; 0x764 <__divsf3>
 536:	23 e3       	ldi	r18, 0x33	; 51
 538:	33 e9       	ldi	r19, 0x93	; 147
 53a:	48 e8       	ldi	r20, 0x88	; 136
 53c:	53 e4       	ldi	r21, 0x43	; 67
 53e:	0e 94 45 03 	call	0x68a	; 0x68a <__subsf3>
 542:	26 e6       	ldi	r18, 0x66	; 102
 544:	36 e6       	ldi	r19, 0x66	; 102
 546:	46 ee       	ldi	r20, 0xE6	; 230
 548:	5f e3       	ldi	r21, 0x3F	; 63
 54a:	0e 94 90 05 	call	0xb20	; 0xb20 <__mulsf3>
 54e:	20 e0       	ldi	r18, 0x00	; 0
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	52 e4       	ldi	r21, 0x42	; 66
 556:	0e 94 46 03 	call	0x68c	; 0x68c <__addsf3>
 55a:	0e 94 97 04 	call	0x92e	; 0x92e <floor>
 55e:	0e 94 24 04 	call	0x848	; 0x848 <__fixsfsi>
 562:	cb 01       	movw	r24, r22
 564:	64 e6       	ldi	r22, 0x64	; 100
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	0e 94 24 06 	call	0xc48	; 0xc48 <__divmodhi4>
 56c:	20 e3       	ldi	r18, 0x30	; 48
 56e:	26 0f       	add	r18, r22
 570:	6a e0       	ldi	r22, 0x0A	; 10
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	0e 94 24 06 	call	0xc48	; 0xc48 <__divmodhi4>
 578:	60 5d       	subi	r22, 0xD0	; 208
 57a:	80 5d       	subi	r24, 0xD0	; 208
 57c:	20 33       	cpi	r18, 0x30	; 48
 57e:	09 f4       	brne	.+2      	; 0x582 <ADC+0xfa>
 580:	20 e2       	ldi	r18, 0x20	; 32
 582:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <temperature>
 586:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <temperature+0x1>
 58a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <temperature+0x2>
 58e:	87 ea       	ldi	r24, 0xA7	; 167
 590:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <temperature+0x3>
 594:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <temperature+0x4>
 598:	69 e0       	ldi	r22, 0x09	; 9
 59a:	72 e0       	ldi	r23, 0x02	; 2
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	0e 94 4c 06 	call	0xc98	; 0xc98 <strcmp>
 5a4:	89 2b       	or	r24, r25
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <ADC+0x13c>
 5a8:	89 e0       	ldi	r24, 0x09	; 9
 5aa:	92 e0       	ldi	r25, 0x02	; 2
 5ac:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 5b0:	88 e4       	ldi	r24, 0x48	; 72
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 5b8:	69 e0       	ldi	r22, 0x09	; 9
 5ba:	72 e0       	ldi	r23, 0x02	; 2
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 55 06 	call	0xcaa	; 0xcaa <strcpy>
 5c4:	0e 94 18 01 	call	0x230	; 0x230 <UART_Poll>
 5c8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ASCII>
 5cc:	88 37       	cpi	r24, 0x78	; 120
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <ADC+0x150>
 5d0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <isADC+0x1>
 5d4:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <isADC>
 5d8:	ff 90       	pop	r15
 5da:	ef 90       	pop	r14
 5dc:	df 90       	pop	r13
 5de:	cf 90       	pop	r12
 5e0:	bf 90       	pop	r11
 5e2:	af 90       	pop	r10
 5e4:	9f 90       	pop	r9
 5e6:	8f 90       	pop	r8
 5e8:	08 95       	ret

000005ea <EEPROM>:
 5ea:	8c e4       	ldi	r24, 0x4C	; 76
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 5f2:	85 e6       	ldi	r24, 0x65	; 101
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 5fa:	0e 94 36 01 	call	0x26c	; 0x26c <EEPROM_Write>
 5fe:	85 e6       	ldi	r24, 0x65	; 101
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 606:	0e 94 41 01 	call	0x282	; 0x282 <EEPROM_Read>
 60a:	0e 94 1d 01 	call	0x23a	; 0x23a <UART_Put>
 60e:	85 e6       	ldi	r24, 0x65	; 101
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	0c 94 4d 01 	jmp	0x29a	; 0x29a <UART_Puts>

00000616 <Command>:
 616:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <isADC>
 61a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <isADC+0x1>
 61e:	89 2b       	or	r24, r25
 620:	69 f4       	brne	.+26     	; 0x63c <Command+0x26>
 622:	81 e9       	ldi	r24, 0x91	; 145
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 62a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ASCII>
 62e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ASCII>
 632:	81 11       	cpse	r24, r1
 634:	06 c0       	rjmp	.+12     	; 0x642 <Command+0x2c>
 636:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>
 63a:	f9 cf       	rjmp	.-14     	; 0x62e <Command+0x18>
 63c:	81 e6       	ldi	r24, 0x61	; 97
 63e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ASCII>
 642:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ASCII>
 646:	85 36       	cpi	r24, 0x65	; 101
 648:	61 f0       	breq	.+24     	; 0x662 <Command+0x4c>
 64a:	20 f4       	brcc	.+8      	; 0x654 <Command+0x3e>
 64c:	81 36       	cpi	r24, 0x61	; 97
 64e:	59 f4       	brne	.+22     	; 0x666 <Command+0x50>
 650:	0c 94 44 02 	jmp	0x488	; 0x488 <ADC>
 654:	8c 36       	cpi	r24, 0x6C	; 108
 656:	19 f0       	breq	.+6      	; 0x65e <Command+0x48>
 658:	88 37       	cpi	r24, 0x78	; 120
 65a:	59 f0       	breq	.+22     	; 0x672 <Command+0x5c>
 65c:	04 c0       	rjmp	.+8      	; 0x666 <Command+0x50>
 65e:	0c 94 04 02 	jmp	0x408	; 0x408 <LCD>
 662:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <EEPROM>
 666:	88 e6       	ldi	r24, 0x68	; 104
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Puts>
 66e:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <HELP>
 672:	08 95       	ret

00000674 <main>:
 674:	0e 94 a6 00 	call	0x14c	; 0x14c <Mega328P_Init>
 678:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Banner>
 67c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <isADC+0x1>
 680:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <isADC>
 684:	0e 94 0b 03 	call	0x616	; 0x616 <Command>
 688:	fd cf       	rjmp	.-6      	; 0x684 <main+0x10>

0000068a <__subsf3>:
 68a:	50 58       	subi	r21, 0x80	; 128

0000068c <__addsf3>:
 68c:	bb 27       	eor	r27, r27
 68e:	aa 27       	eor	r26, r26
 690:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__addsf3x>
 694:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_round>
 698:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fp_pscA>
 69c:	38 f0       	brcs	.+14     	; 0x6ac <__addsf3+0x20>
 69e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_pscB>
 6a2:	20 f0       	brcs	.+8      	; 0x6ac <__addsf3+0x20>
 6a4:	39 f4       	brne	.+14     	; 0x6b4 <__addsf3+0x28>
 6a6:	9f 3f       	cpi	r25, 0xFF	; 255
 6a8:	19 f4       	brne	.+6      	; 0x6b0 <__addsf3+0x24>
 6aa:	26 f4       	brtc	.+8      	; 0x6b4 <__addsf3+0x28>
 6ac:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__fp_nan>
 6b0:	0e f4       	brtc	.+2      	; 0x6b4 <__addsf3+0x28>
 6b2:	e0 95       	com	r30
 6b4:	e7 fb       	bst	r30, 7
 6b6:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>

000006ba <__addsf3x>:
 6ba:	e9 2f       	mov	r30, r25
 6bc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__fp_split3>
 6c0:	58 f3       	brcs	.-42     	; 0x698 <__addsf3+0xc>
 6c2:	ba 17       	cp	r27, r26
 6c4:	62 07       	cpc	r22, r18
 6c6:	73 07       	cpc	r23, r19
 6c8:	84 07       	cpc	r24, r20
 6ca:	95 07       	cpc	r25, r21
 6cc:	20 f0       	brcs	.+8      	; 0x6d6 <__addsf3x+0x1c>
 6ce:	79 f4       	brne	.+30     	; 0x6ee <__addsf3x+0x34>
 6d0:	a6 f5       	brtc	.+104    	; 0x73a <__addsf3x+0x80>
 6d2:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_zero>
 6d6:	0e f4       	brtc	.+2      	; 0x6da <__addsf3x+0x20>
 6d8:	e0 95       	com	r30
 6da:	0b 2e       	mov	r0, r27
 6dc:	ba 2f       	mov	r27, r26
 6de:	a0 2d       	mov	r26, r0
 6e0:	0b 01       	movw	r0, r22
 6e2:	b9 01       	movw	r22, r18
 6e4:	90 01       	movw	r18, r0
 6e6:	0c 01       	movw	r0, r24
 6e8:	ca 01       	movw	r24, r20
 6ea:	a0 01       	movw	r20, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	ff 27       	eor	r31, r31
 6f0:	59 1b       	sub	r21, r25
 6f2:	99 f0       	breq	.+38     	; 0x71a <__addsf3x+0x60>
 6f4:	59 3f       	cpi	r21, 0xF9	; 249
 6f6:	50 f4       	brcc	.+20     	; 0x70c <__addsf3x+0x52>
 6f8:	50 3e       	cpi	r21, 0xE0	; 224
 6fa:	68 f1       	brcs	.+90     	; 0x756 <__addsf3x+0x9c>
 6fc:	1a 16       	cp	r1, r26
 6fe:	f0 40       	sbci	r31, 0x00	; 0
 700:	a2 2f       	mov	r26, r18
 702:	23 2f       	mov	r18, r19
 704:	34 2f       	mov	r19, r20
 706:	44 27       	eor	r20, r20
 708:	58 5f       	subi	r21, 0xF8	; 248
 70a:	f3 cf       	rjmp	.-26     	; 0x6f2 <__addsf3x+0x38>
 70c:	46 95       	lsr	r20
 70e:	37 95       	ror	r19
 710:	27 95       	ror	r18
 712:	a7 95       	ror	r26
 714:	f0 40       	sbci	r31, 0x00	; 0
 716:	53 95       	inc	r21
 718:	c9 f7       	brne	.-14     	; 0x70c <__addsf3x+0x52>
 71a:	7e f4       	brtc	.+30     	; 0x73a <__addsf3x+0x80>
 71c:	1f 16       	cp	r1, r31
 71e:	ba 0b       	sbc	r27, r26
 720:	62 0b       	sbc	r22, r18
 722:	73 0b       	sbc	r23, r19
 724:	84 0b       	sbc	r24, r20
 726:	ba f0       	brmi	.+46     	; 0x756 <__addsf3x+0x9c>
 728:	91 50       	subi	r25, 0x01	; 1
 72a:	a1 f0       	breq	.+40     	; 0x754 <__addsf3x+0x9a>
 72c:	ff 0f       	add	r31, r31
 72e:	bb 1f       	adc	r27, r27
 730:	66 1f       	adc	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	c2 f7       	brpl	.-16     	; 0x728 <__addsf3x+0x6e>
 738:	0e c0       	rjmp	.+28     	; 0x756 <__addsf3x+0x9c>
 73a:	ba 0f       	add	r27, r26
 73c:	62 1f       	adc	r22, r18
 73e:	73 1f       	adc	r23, r19
 740:	84 1f       	adc	r24, r20
 742:	48 f4       	brcc	.+18     	; 0x756 <__addsf3x+0x9c>
 744:	87 95       	ror	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b7 95       	ror	r27
 74c:	f7 95       	ror	r31
 74e:	9e 3f       	cpi	r25, 0xFE	; 254
 750:	08 f0       	brcs	.+2      	; 0x754 <__addsf3x+0x9a>
 752:	b0 cf       	rjmp	.-160    	; 0x6b4 <__addsf3+0x28>
 754:	93 95       	inc	r25
 756:	88 0f       	add	r24, r24
 758:	08 f0       	brcs	.+2      	; 0x75c <__addsf3x+0xa2>
 75a:	99 27       	eor	r25, r25
 75c:	ee 0f       	add	r30, r30
 75e:	97 95       	ror	r25
 760:	87 95       	ror	r24
 762:	08 95       	ret

00000764 <__divsf3>:
 764:	0e 94 c6 03 	call	0x78c	; 0x78c <__divsf3x>
 768:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_round>
 76c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_pscB>
 770:	58 f0       	brcs	.+22     	; 0x788 <__divsf3+0x24>
 772:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fp_pscA>
 776:	40 f0       	brcs	.+16     	; 0x788 <__divsf3+0x24>
 778:	29 f4       	brne	.+10     	; 0x784 <__divsf3+0x20>
 77a:	5f 3f       	cpi	r21, 0xFF	; 255
 77c:	29 f0       	breq	.+10     	; 0x788 <__divsf3+0x24>
 77e:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>
 782:	51 11       	cpse	r21, r1
 784:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_szero>
 788:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__fp_nan>

0000078c <__divsf3x>:
 78c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__fp_split3>
 790:	68 f3       	brcs	.-38     	; 0x76c <__divsf3+0x8>

00000792 <__divsf3_pse>:
 792:	99 23       	and	r25, r25
 794:	b1 f3       	breq	.-20     	; 0x782 <__divsf3+0x1e>
 796:	55 23       	and	r21, r21
 798:	91 f3       	breq	.-28     	; 0x77e <__divsf3+0x1a>
 79a:	95 1b       	sub	r25, r21
 79c:	55 0b       	sbc	r21, r21
 79e:	bb 27       	eor	r27, r27
 7a0:	aa 27       	eor	r26, r26
 7a2:	62 17       	cp	r22, r18
 7a4:	73 07       	cpc	r23, r19
 7a6:	84 07       	cpc	r24, r20
 7a8:	38 f0       	brcs	.+14     	; 0x7b8 <__divsf3_pse+0x26>
 7aa:	9f 5f       	subi	r25, 0xFF	; 255
 7ac:	5f 4f       	sbci	r21, 0xFF	; 255
 7ae:	22 0f       	add	r18, r18
 7b0:	33 1f       	adc	r19, r19
 7b2:	44 1f       	adc	r20, r20
 7b4:	aa 1f       	adc	r26, r26
 7b6:	a9 f3       	breq	.-22     	; 0x7a2 <__divsf3_pse+0x10>
 7b8:	35 d0       	rcall	.+106    	; 0x824 <__divsf3_pse+0x92>
 7ba:	0e 2e       	mov	r0, r30
 7bc:	3a f0       	brmi	.+14     	; 0x7cc <__divsf3_pse+0x3a>
 7be:	e0 e8       	ldi	r30, 0x80	; 128
 7c0:	32 d0       	rcall	.+100    	; 0x826 <__divsf3_pse+0x94>
 7c2:	91 50       	subi	r25, 0x01	; 1
 7c4:	50 40       	sbci	r21, 0x00	; 0
 7c6:	e6 95       	lsr	r30
 7c8:	00 1c       	adc	r0, r0
 7ca:	ca f7       	brpl	.-14     	; 0x7be <__divsf3_pse+0x2c>
 7cc:	2b d0       	rcall	.+86     	; 0x824 <__divsf3_pse+0x92>
 7ce:	fe 2f       	mov	r31, r30
 7d0:	29 d0       	rcall	.+82     	; 0x824 <__divsf3_pse+0x92>
 7d2:	66 0f       	add	r22, r22
 7d4:	77 1f       	adc	r23, r23
 7d6:	88 1f       	adc	r24, r24
 7d8:	bb 1f       	adc	r27, r27
 7da:	26 17       	cp	r18, r22
 7dc:	37 07       	cpc	r19, r23
 7de:	48 07       	cpc	r20, r24
 7e0:	ab 07       	cpc	r26, r27
 7e2:	b0 e8       	ldi	r27, 0x80	; 128
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <__divsf3_pse+0x56>
 7e6:	bb 0b       	sbc	r27, r27
 7e8:	80 2d       	mov	r24, r0
 7ea:	bf 01       	movw	r22, r30
 7ec:	ff 27       	eor	r31, r31
 7ee:	93 58       	subi	r25, 0x83	; 131
 7f0:	5f 4f       	sbci	r21, 0xFF	; 255
 7f2:	3a f0       	brmi	.+14     	; 0x802 <__divsf3_pse+0x70>
 7f4:	9e 3f       	cpi	r25, 0xFE	; 254
 7f6:	51 05       	cpc	r21, r1
 7f8:	78 f0       	brcs	.+30     	; 0x818 <__divsf3_pse+0x86>
 7fa:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>
 7fe:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_szero>
 802:	5f 3f       	cpi	r21, 0xFF	; 255
 804:	e4 f3       	brlt	.-8      	; 0x7fe <__divsf3_pse+0x6c>
 806:	98 3e       	cpi	r25, 0xE8	; 232
 808:	d4 f3       	brlt	.-12     	; 0x7fe <__divsf3_pse+0x6c>
 80a:	86 95       	lsr	r24
 80c:	77 95       	ror	r23
 80e:	67 95       	ror	r22
 810:	b7 95       	ror	r27
 812:	f7 95       	ror	r31
 814:	9f 5f       	subi	r25, 0xFF	; 255
 816:	c9 f7       	brne	.-14     	; 0x80a <__divsf3_pse+0x78>
 818:	88 0f       	add	r24, r24
 81a:	91 1d       	adc	r25, r1
 81c:	96 95       	lsr	r25
 81e:	87 95       	ror	r24
 820:	97 f9       	bld	r25, 7
 822:	08 95       	ret
 824:	e1 e0       	ldi	r30, 0x01	; 1
 826:	66 0f       	add	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	bb 1f       	adc	r27, r27
 82e:	62 17       	cp	r22, r18
 830:	73 07       	cpc	r23, r19
 832:	84 07       	cpc	r24, r20
 834:	ba 07       	cpc	r27, r26
 836:	20 f0       	brcs	.+8      	; 0x840 <__divsf3_pse+0xae>
 838:	62 1b       	sub	r22, r18
 83a:	73 0b       	sbc	r23, r19
 83c:	84 0b       	sbc	r24, r20
 83e:	ba 0b       	sbc	r27, r26
 840:	ee 1f       	adc	r30, r30
 842:	88 f7       	brcc	.-30     	; 0x826 <__divsf3_pse+0x94>
 844:	e0 95       	com	r30
 846:	08 95       	ret

00000848 <__fixsfsi>:
 848:	0e 94 2b 04 	call	0x856	; 0x856 <__fixunssfsi>
 84c:	68 94       	set
 84e:	b1 11       	cpse	r27, r1
 850:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_szero>
 854:	08 95       	ret

00000856 <__fixunssfsi>:
 856:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_splitA>
 85a:	88 f0       	brcs	.+34     	; 0x87e <__fixunssfsi+0x28>
 85c:	9f 57       	subi	r25, 0x7F	; 127
 85e:	98 f0       	brcs	.+38     	; 0x886 <__fixunssfsi+0x30>
 860:	b9 2f       	mov	r27, r25
 862:	99 27       	eor	r25, r25
 864:	b7 51       	subi	r27, 0x17	; 23
 866:	b0 f0       	brcs	.+44     	; 0x894 <__fixunssfsi+0x3e>
 868:	e1 f0       	breq	.+56     	; 0x8a2 <__fixunssfsi+0x4c>
 86a:	66 0f       	add	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	1a f0       	brmi	.+6      	; 0x87a <__fixunssfsi+0x24>
 874:	ba 95       	dec	r27
 876:	c9 f7       	brne	.-14     	; 0x86a <__fixunssfsi+0x14>
 878:	14 c0       	rjmp	.+40     	; 0x8a2 <__fixunssfsi+0x4c>
 87a:	b1 30       	cpi	r27, 0x01	; 1
 87c:	91 f0       	breq	.+36     	; 0x8a2 <__fixunssfsi+0x4c>
 87e:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_zero>
 882:	b1 e0       	ldi	r27, 0x01	; 1
 884:	08 95       	ret
 886:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_zero>
 88a:	67 2f       	mov	r22, r23
 88c:	78 2f       	mov	r23, r24
 88e:	88 27       	eor	r24, r24
 890:	b8 5f       	subi	r27, 0xF8	; 248
 892:	39 f0       	breq	.+14     	; 0x8a2 <__fixunssfsi+0x4c>
 894:	b9 3f       	cpi	r27, 0xF9	; 249
 896:	cc f3       	brlt	.-14     	; 0x88a <__fixunssfsi+0x34>
 898:	86 95       	lsr	r24
 89a:	77 95       	ror	r23
 89c:	67 95       	ror	r22
 89e:	b3 95       	inc	r27
 8a0:	d9 f7       	brne	.-10     	; 0x898 <__fixunssfsi+0x42>
 8a2:	3e f4       	brtc	.+14     	; 0x8b2 <__fixunssfsi+0x5c>
 8a4:	90 95       	com	r25
 8a6:	80 95       	com	r24
 8a8:	70 95       	com	r23
 8aa:	61 95       	neg	r22
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	08 95       	ret

000008b4 <__floatunsisf>:
 8b4:	e8 94       	clt
 8b6:	09 c0       	rjmp	.+18     	; 0x8ca <__floatsisf+0x12>

000008b8 <__floatsisf>:
 8b8:	97 fb       	bst	r25, 7
 8ba:	3e f4       	brtc	.+14     	; 0x8ca <__floatsisf+0x12>
 8bc:	90 95       	com	r25
 8be:	80 95       	com	r24
 8c0:	70 95       	com	r23
 8c2:	61 95       	neg	r22
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	99 23       	and	r25, r25
 8cc:	a9 f0       	breq	.+42     	; 0x8f8 <__floatsisf+0x40>
 8ce:	f9 2f       	mov	r31, r25
 8d0:	96 e9       	ldi	r25, 0x96	; 150
 8d2:	bb 27       	eor	r27, r27
 8d4:	93 95       	inc	r25
 8d6:	f6 95       	lsr	r31
 8d8:	87 95       	ror	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b7 95       	ror	r27
 8e0:	f1 11       	cpse	r31, r1
 8e2:	f8 cf       	rjmp	.-16     	; 0x8d4 <__floatsisf+0x1c>
 8e4:	fa f4       	brpl	.+62     	; 0x924 <__stack+0x25>
 8e6:	bb 0f       	add	r27, r27
 8e8:	11 f4       	brne	.+4      	; 0x8ee <__floatsisf+0x36>
 8ea:	60 ff       	sbrs	r22, 0
 8ec:	1b c0       	rjmp	.+54     	; 0x924 <__stack+0x25>
 8ee:	6f 5f       	subi	r22, 0xFF	; 255
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	16 c0       	rjmp	.+44     	; 0x924 <__stack+0x25>
 8f8:	88 23       	and	r24, r24
 8fa:	11 f0       	breq	.+4      	; 0x900 <__stack+0x1>
 8fc:	96 e9       	ldi	r25, 0x96	; 150
 8fe:	11 c0       	rjmp	.+34     	; 0x922 <__stack+0x23>
 900:	77 23       	and	r23, r23
 902:	21 f0       	breq	.+8      	; 0x90c <__stack+0xd>
 904:	9e e8       	ldi	r25, 0x8E	; 142
 906:	87 2f       	mov	r24, r23
 908:	76 2f       	mov	r23, r22
 90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
 90c:	66 23       	and	r22, r22
 90e:	71 f0       	breq	.+28     	; 0x92c <__stack+0x2d>
 910:	96 e8       	ldi	r25, 0x86	; 134
 912:	86 2f       	mov	r24, r22
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	60 e0       	ldi	r22, 0x00	; 0
 918:	2a f0       	brmi	.+10     	; 0x924 <__stack+0x25>
 91a:	9a 95       	dec	r25
 91c:	66 0f       	add	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	da f7       	brpl	.-10     	; 0x91a <__stack+0x1b>
 924:	88 0f       	add	r24, r24
 926:	96 95       	lsr	r25
 928:	87 95       	ror	r24
 92a:	97 f9       	bld	r25, 7
 92c:	08 95       	ret

0000092e <floor>:
 92e:	0e 94 21 05 	call	0xa42	; 0xa42 <__fp_trunc>
 932:	90 f0       	brcs	.+36     	; 0x958 <floor+0x2a>
 934:	9f 37       	cpi	r25, 0x7F	; 127
 936:	48 f4       	brcc	.+18     	; 0x94a <floor+0x1c>
 938:	91 11       	cpse	r25, r1
 93a:	16 f0       	brts	.+4      	; 0x940 <floor+0x12>
 93c:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_szero>
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	80 e8       	ldi	r24, 0x80	; 128
 946:	9f eb       	ldi	r25, 0xBF	; 191
 948:	08 95       	ret
 94a:	26 f4       	brtc	.+8      	; 0x954 <floor+0x26>
 94c:	1b 16       	cp	r1, r27
 94e:	61 1d       	adc	r22, r1
 950:	71 1d       	adc	r23, r1
 952:	81 1d       	adc	r24, r1
 954:	0c 94 b4 04 	jmp	0x968	; 0x968 <__fp_mintl>
 958:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_mpack>

0000095c <__fp_inf>:
 95c:	97 f9       	bld	r25, 7
 95e:	9f 67       	ori	r25, 0x7F	; 127
 960:	80 e8       	ldi	r24, 0x80	; 128
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	08 95       	ret

00000968 <__fp_mintl>:
 968:	88 23       	and	r24, r24
 96a:	71 f4       	brne	.+28     	; 0x988 <__fp_mintl+0x20>
 96c:	77 23       	and	r23, r23
 96e:	21 f0       	breq	.+8      	; 0x978 <__fp_mintl+0x10>
 970:	98 50       	subi	r25, 0x08	; 8
 972:	87 2b       	or	r24, r23
 974:	76 2f       	mov	r23, r22
 976:	07 c0       	rjmp	.+14     	; 0x986 <__fp_mintl+0x1e>
 978:	66 23       	and	r22, r22
 97a:	11 f4       	brne	.+4      	; 0x980 <__fp_mintl+0x18>
 97c:	99 27       	eor	r25, r25
 97e:	0d c0       	rjmp	.+26     	; 0x99a <__fp_mintl+0x32>
 980:	90 51       	subi	r25, 0x10	; 16
 982:	86 2b       	or	r24, r22
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	2a f0       	brmi	.+10     	; 0x994 <__fp_mintl+0x2c>
 98a:	9a 95       	dec	r25
 98c:	66 0f       	add	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	da f7       	brpl	.-10     	; 0x98a <__fp_mintl+0x22>
 994:	88 0f       	add	r24, r24
 996:	96 95       	lsr	r25
 998:	87 95       	ror	r24
 99a:	97 f9       	bld	r25, 7
 99c:	08 95       	ret

0000099e <__fp_mpack>:
 99e:	9f 3f       	cpi	r25, 0xFF	; 255
 9a0:	31 f0       	breq	.+12     	; 0x9ae <__fp_mpack_finite+0xc>

000009a2 <__fp_mpack_finite>:
 9a2:	91 50       	subi	r25, 0x01	; 1
 9a4:	20 f4       	brcc	.+8      	; 0x9ae <__fp_mpack_finite+0xc>
 9a6:	87 95       	ror	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b7 95       	ror	r27
 9ae:	88 0f       	add	r24, r24
 9b0:	91 1d       	adc	r25, r1
 9b2:	96 95       	lsr	r25
 9b4:	87 95       	ror	r24
 9b6:	97 f9       	bld	r25, 7
 9b8:	08 95       	ret

000009ba <__fp_nan>:
 9ba:	9f ef       	ldi	r25, 0xFF	; 255
 9bc:	80 ec       	ldi	r24, 0xC0	; 192
 9be:	08 95       	ret

000009c0 <__fp_pscA>:
 9c0:	00 24       	eor	r0, r0
 9c2:	0a 94       	dec	r0
 9c4:	16 16       	cp	r1, r22
 9c6:	17 06       	cpc	r1, r23
 9c8:	18 06       	cpc	r1, r24
 9ca:	09 06       	cpc	r0, r25
 9cc:	08 95       	ret

000009ce <__fp_pscB>:
 9ce:	00 24       	eor	r0, r0
 9d0:	0a 94       	dec	r0
 9d2:	12 16       	cp	r1, r18
 9d4:	13 06       	cpc	r1, r19
 9d6:	14 06       	cpc	r1, r20
 9d8:	05 06       	cpc	r0, r21
 9da:	08 95       	ret

000009dc <__fp_round>:
 9dc:	09 2e       	mov	r0, r25
 9de:	03 94       	inc	r0
 9e0:	00 0c       	add	r0, r0
 9e2:	11 f4       	brne	.+4      	; 0x9e8 <__fp_round+0xc>
 9e4:	88 23       	and	r24, r24
 9e6:	52 f0       	brmi	.+20     	; 0x9fc <__fp_round+0x20>
 9e8:	bb 0f       	add	r27, r27
 9ea:	40 f4       	brcc	.+16     	; 0x9fc <__fp_round+0x20>
 9ec:	bf 2b       	or	r27, r31
 9ee:	11 f4       	brne	.+4      	; 0x9f4 <__fp_round+0x18>
 9f0:	60 ff       	sbrs	r22, 0
 9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__fp_round+0x20>
 9f4:	6f 5f       	subi	r22, 0xFF	; 255
 9f6:	7f 4f       	sbci	r23, 0xFF	; 255
 9f8:	8f 4f       	sbci	r24, 0xFF	; 255
 9fa:	9f 4f       	sbci	r25, 0xFF	; 255
 9fc:	08 95       	ret

000009fe <__fp_split3>:
 9fe:	57 fd       	sbrc	r21, 7
 a00:	90 58       	subi	r25, 0x80	; 128
 a02:	44 0f       	add	r20, r20
 a04:	55 1f       	adc	r21, r21
 a06:	59 f0       	breq	.+22     	; 0xa1e <__fp_splitA+0x10>
 a08:	5f 3f       	cpi	r21, 0xFF	; 255
 a0a:	71 f0       	breq	.+28     	; 0xa28 <__fp_splitA+0x1a>
 a0c:	47 95       	ror	r20

00000a0e <__fp_splitA>:
 a0e:	88 0f       	add	r24, r24
 a10:	97 fb       	bst	r25, 7
 a12:	99 1f       	adc	r25, r25
 a14:	61 f0       	breq	.+24     	; 0xa2e <__fp_splitA+0x20>
 a16:	9f 3f       	cpi	r25, 0xFF	; 255
 a18:	79 f0       	breq	.+30     	; 0xa38 <__fp_splitA+0x2a>
 a1a:	87 95       	ror	r24
 a1c:	08 95       	ret
 a1e:	12 16       	cp	r1, r18
 a20:	13 06       	cpc	r1, r19
 a22:	14 06       	cpc	r1, r20
 a24:	55 1f       	adc	r21, r21
 a26:	f2 cf       	rjmp	.-28     	; 0xa0c <__fp_split3+0xe>
 a28:	46 95       	lsr	r20
 a2a:	f1 df       	rcall	.-30     	; 0xa0e <__fp_splitA>
 a2c:	08 c0       	rjmp	.+16     	; 0xa3e <__fp_splitA+0x30>
 a2e:	16 16       	cp	r1, r22
 a30:	17 06       	cpc	r1, r23
 a32:	18 06       	cpc	r1, r24
 a34:	99 1f       	adc	r25, r25
 a36:	f1 cf       	rjmp	.-30     	; 0xa1a <__fp_splitA+0xc>
 a38:	86 95       	lsr	r24
 a3a:	71 05       	cpc	r23, r1
 a3c:	61 05       	cpc	r22, r1
 a3e:	08 94       	sec
 a40:	08 95       	ret

00000a42 <__fp_trunc>:
 a42:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_splitA>
 a46:	a0 f0       	brcs	.+40     	; 0xa70 <__fp_trunc+0x2e>
 a48:	be e7       	ldi	r27, 0x7E	; 126
 a4a:	b9 17       	cp	r27, r25
 a4c:	88 f4       	brcc	.+34     	; 0xa70 <__fp_trunc+0x2e>
 a4e:	bb 27       	eor	r27, r27
 a50:	9f 38       	cpi	r25, 0x8F	; 143
 a52:	60 f4       	brcc	.+24     	; 0xa6c <__fp_trunc+0x2a>
 a54:	16 16       	cp	r1, r22
 a56:	b1 1d       	adc	r27, r1
 a58:	67 2f       	mov	r22, r23
 a5a:	78 2f       	mov	r23, r24
 a5c:	88 27       	eor	r24, r24
 a5e:	98 5f       	subi	r25, 0xF8	; 248
 a60:	f7 cf       	rjmp	.-18     	; 0xa50 <__fp_trunc+0xe>
 a62:	86 95       	lsr	r24
 a64:	77 95       	ror	r23
 a66:	67 95       	ror	r22
 a68:	b1 1d       	adc	r27, r1
 a6a:	93 95       	inc	r25
 a6c:	96 39       	cpi	r25, 0x96	; 150
 a6e:	c8 f3       	brcs	.-14     	; 0xa62 <__fp_trunc+0x20>
 a70:	08 95       	ret

00000a72 <__fp_zero>:
 a72:	e8 94       	clt

00000a74 <__fp_szero>:
 a74:	bb 27       	eor	r27, r27
 a76:	66 27       	eor	r22, r22
 a78:	77 27       	eor	r23, r23
 a7a:	cb 01       	movw	r24, r22
 a7c:	97 f9       	bld	r25, 7
 a7e:	08 95       	ret
 a80:	16 f0       	brts	.+4      	; 0xa86 <__fp_szero+0x12>
 a82:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_mpack>
 a86:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__fp_nan>
 a8a:	68 94       	set
 a8c:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>

00000a90 <log>:
 a90:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_splitA>
 a94:	a8 f3       	brcs	.-22     	; 0xa80 <__fp_szero+0xc>
 a96:	99 23       	and	r25, r25
 a98:	c1 f3       	breq	.-16     	; 0xa8a <__fp_szero+0x16>
 a9a:	ae f3       	brts	.-22     	; 0xa86 <__fp_szero+0x12>
 a9c:	df 93       	push	r29
 a9e:	cf 93       	push	r28
 aa0:	1f 93       	push	r17
 aa2:	0f 93       	push	r16
 aa4:	ff 92       	push	r15
 aa6:	c9 2f       	mov	r28, r25
 aa8:	dd 27       	eor	r29, r29
 aaa:	88 23       	and	r24, r24
 aac:	2a f0       	brmi	.+10     	; 0xab8 <log+0x28>
 aae:	21 97       	sbiw	r28, 0x01	; 1
 ab0:	66 0f       	add	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	da f7       	brpl	.-10     	; 0xaae <log+0x1e>
 ab8:	20 e0       	ldi	r18, 0x00	; 0
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	40 e8       	ldi	r20, 0x80	; 128
 abe:	5f eb       	ldi	r21, 0xBF	; 191
 ac0:	9f e3       	ldi	r25, 0x3F	; 63
 ac2:	88 39       	cpi	r24, 0x98	; 152
 ac4:	20 f0       	brcs	.+8      	; 0xace <log+0x3e>
 ac6:	80 3e       	cpi	r24, 0xE0	; 224
 ac8:	38 f0       	brcs	.+14     	; 0xad8 <log+0x48>
 aca:	21 96       	adiw	r28, 0x01	; 1
 acc:	8f 77       	andi	r24, 0x7F	; 127
 ace:	0e 94 46 03 	call	0x68c	; 0x68c <__addsf3>
 ad2:	e4 eb       	ldi	r30, 0xB4	; 180
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	04 c0       	rjmp	.+8      	; 0xae0 <log+0x50>
 ad8:	0e 94 46 03 	call	0x68c	; 0x68c <__addsf3>
 adc:	e1 ee       	ldi	r30, 0xE1	; 225
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_powser>
 ae4:	8b 01       	movw	r16, r22
 ae6:	be 01       	movw	r22, r28
 ae8:	ec 01       	movw	r28, r24
 aea:	fb 2e       	mov	r15, r27
 aec:	6f 57       	subi	r22, 0x7F	; 127
 aee:	71 09       	sbc	r23, r1
 af0:	75 95       	asr	r23
 af2:	77 1f       	adc	r23, r23
 af4:	88 0b       	sbc	r24, r24
 af6:	99 0b       	sbc	r25, r25
 af8:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatsisf>
 afc:	28 e1       	ldi	r18, 0x18	; 24
 afe:	32 e7       	ldi	r19, 0x72	; 114
 b00:	41 e3       	ldi	r20, 0x31	; 49
 b02:	5f e3       	ldi	r21, 0x3F	; 63
 b04:	0e 94 a3 05 	call	0xb46	; 0xb46 <__mulsf3x>
 b08:	af 2d       	mov	r26, r15
 b0a:	98 01       	movw	r18, r16
 b0c:	ae 01       	movw	r20, r28
 b0e:	ff 90       	pop	r15
 b10:	0f 91       	pop	r16
 b12:	1f 91       	pop	r17
 b14:	cf 91       	pop	r28
 b16:	df 91       	pop	r29
 b18:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__addsf3x>
 b1c:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_round>

00000b20 <__mulsf3>:
 b20:	0e 94 a3 05 	call	0xb46	; 0xb46 <__mulsf3x>
 b24:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_round>
 b28:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fp_pscA>
 b2c:	38 f0       	brcs	.+14     	; 0xb3c <__mulsf3+0x1c>
 b2e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_pscB>
 b32:	20 f0       	brcs	.+8      	; 0xb3c <__mulsf3+0x1c>
 b34:	95 23       	and	r25, r21
 b36:	11 f0       	breq	.+4      	; 0xb3c <__mulsf3+0x1c>
 b38:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>
 b3c:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__fp_nan>
 b40:	11 24       	eor	r1, r1
 b42:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_szero>

00000b46 <__mulsf3x>:
 b46:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__fp_split3>
 b4a:	70 f3       	brcs	.-36     	; 0xb28 <__mulsf3+0x8>

00000b4c <__mulsf3_pse>:
 b4c:	95 9f       	mul	r25, r21
 b4e:	c1 f3       	breq	.-16     	; 0xb40 <__mulsf3+0x20>
 b50:	95 0f       	add	r25, r21
 b52:	50 e0       	ldi	r21, 0x00	; 0
 b54:	55 1f       	adc	r21, r21
 b56:	62 9f       	mul	r22, r18
 b58:	f0 01       	movw	r30, r0
 b5a:	72 9f       	mul	r23, r18
 b5c:	bb 27       	eor	r27, r27
 b5e:	f0 0d       	add	r31, r0
 b60:	b1 1d       	adc	r27, r1
 b62:	63 9f       	mul	r22, r19
 b64:	aa 27       	eor	r26, r26
 b66:	f0 0d       	add	r31, r0
 b68:	b1 1d       	adc	r27, r1
 b6a:	aa 1f       	adc	r26, r26
 b6c:	64 9f       	mul	r22, r20
 b6e:	66 27       	eor	r22, r22
 b70:	b0 0d       	add	r27, r0
 b72:	a1 1d       	adc	r26, r1
 b74:	66 1f       	adc	r22, r22
 b76:	82 9f       	mul	r24, r18
 b78:	22 27       	eor	r18, r18
 b7a:	b0 0d       	add	r27, r0
 b7c:	a1 1d       	adc	r26, r1
 b7e:	62 1f       	adc	r22, r18
 b80:	73 9f       	mul	r23, r19
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	62 1f       	adc	r22, r18
 b88:	83 9f       	mul	r24, r19
 b8a:	a0 0d       	add	r26, r0
 b8c:	61 1d       	adc	r22, r1
 b8e:	22 1f       	adc	r18, r18
 b90:	74 9f       	mul	r23, r20
 b92:	33 27       	eor	r19, r19
 b94:	a0 0d       	add	r26, r0
 b96:	61 1d       	adc	r22, r1
 b98:	23 1f       	adc	r18, r19
 b9a:	84 9f       	mul	r24, r20
 b9c:	60 0d       	add	r22, r0
 b9e:	21 1d       	adc	r18, r1
 ba0:	82 2f       	mov	r24, r18
 ba2:	76 2f       	mov	r23, r22
 ba4:	6a 2f       	mov	r22, r26
 ba6:	11 24       	eor	r1, r1
 ba8:	9f 57       	subi	r25, 0x7F	; 127
 baa:	50 40       	sbci	r21, 0x00	; 0
 bac:	9a f0       	brmi	.+38     	; 0xbd4 <__mulsf3_pse+0x88>
 bae:	f1 f0       	breq	.+60     	; 0xbec <__mulsf3_pse+0xa0>
 bb0:	88 23       	and	r24, r24
 bb2:	4a f0       	brmi	.+18     	; 0xbc6 <__mulsf3_pse+0x7a>
 bb4:	ee 0f       	add	r30, r30
 bb6:	ff 1f       	adc	r31, r31
 bb8:	bb 1f       	adc	r27, r27
 bba:	66 1f       	adc	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	91 50       	subi	r25, 0x01	; 1
 bc2:	50 40       	sbci	r21, 0x00	; 0
 bc4:	a9 f7       	brne	.-22     	; 0xbb0 <__mulsf3_pse+0x64>
 bc6:	9e 3f       	cpi	r25, 0xFE	; 254
 bc8:	51 05       	cpc	r21, r1
 bca:	80 f0       	brcs	.+32     	; 0xbec <__mulsf3_pse+0xa0>
 bcc:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>
 bd0:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_szero>
 bd4:	5f 3f       	cpi	r21, 0xFF	; 255
 bd6:	e4 f3       	brlt	.-8      	; 0xbd0 <__mulsf3_pse+0x84>
 bd8:	98 3e       	cpi	r25, 0xE8	; 232
 bda:	d4 f3       	brlt	.-12     	; 0xbd0 <__mulsf3_pse+0x84>
 bdc:	86 95       	lsr	r24
 bde:	77 95       	ror	r23
 be0:	67 95       	ror	r22
 be2:	b7 95       	ror	r27
 be4:	f7 95       	ror	r31
 be6:	e7 95       	ror	r30
 be8:	9f 5f       	subi	r25, 0xFF	; 255
 bea:	c1 f7       	brne	.-16     	; 0xbdc <__mulsf3_pse+0x90>
 bec:	fe 2b       	or	r31, r30
 bee:	88 0f       	add	r24, r24
 bf0:	91 1d       	adc	r25, r1
 bf2:	96 95       	lsr	r25
 bf4:	87 95       	ror	r24
 bf6:	97 f9       	bld	r25, 7
 bf8:	08 95       	ret

00000bfa <__fp_powser>:
 bfa:	df 93       	push	r29
 bfc:	cf 93       	push	r28
 bfe:	1f 93       	push	r17
 c00:	0f 93       	push	r16
 c02:	ff 92       	push	r15
 c04:	ef 92       	push	r14
 c06:	df 92       	push	r13
 c08:	7b 01       	movw	r14, r22
 c0a:	8c 01       	movw	r16, r24
 c0c:	68 94       	set
 c0e:	06 c0       	rjmp	.+12     	; 0xc1c <__fp_powser+0x22>
 c10:	da 2e       	mov	r13, r26
 c12:	ef 01       	movw	r28, r30
 c14:	0e 94 a3 05 	call	0xb46	; 0xb46 <__mulsf3x>
 c18:	fe 01       	movw	r30, r28
 c1a:	e8 94       	clt
 c1c:	a5 91       	lpm	r26, Z+
 c1e:	25 91       	lpm	r18, Z+
 c20:	35 91       	lpm	r19, Z+
 c22:	45 91       	lpm	r20, Z+
 c24:	55 91       	lpm	r21, Z+
 c26:	a6 f3       	brts	.-24     	; 0xc10 <__fp_powser+0x16>
 c28:	ef 01       	movw	r28, r30
 c2a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__addsf3x>
 c2e:	fe 01       	movw	r30, r28
 c30:	97 01       	movw	r18, r14
 c32:	a8 01       	movw	r20, r16
 c34:	da 94       	dec	r13
 c36:	69 f7       	brne	.-38     	; 0xc12 <__fp_powser+0x18>
 c38:	df 90       	pop	r13
 c3a:	ef 90       	pop	r14
 c3c:	ff 90       	pop	r15
 c3e:	0f 91       	pop	r16
 c40:	1f 91       	pop	r17
 c42:	cf 91       	pop	r28
 c44:	df 91       	pop	r29
 c46:	08 95       	ret

00000c48 <__divmodhi4>:
 c48:	97 fb       	bst	r25, 7
 c4a:	07 2e       	mov	r0, r23
 c4c:	16 f4       	brtc	.+4      	; 0xc52 <__divmodhi4+0xa>
 c4e:	00 94       	com	r0
 c50:	07 d0       	rcall	.+14     	; 0xc60 <__divmodhi4_neg1>
 c52:	77 fd       	sbrc	r23, 7
 c54:	09 d0       	rcall	.+18     	; 0xc68 <__divmodhi4_neg2>
 c56:	0e 94 38 06 	call	0xc70	; 0xc70 <__udivmodhi4>
 c5a:	07 fc       	sbrc	r0, 7
 c5c:	05 d0       	rcall	.+10     	; 0xc68 <__divmodhi4_neg2>
 c5e:	3e f4       	brtc	.+14     	; 0xc6e <__divmodhi4_exit>

00000c60 <__divmodhi4_neg1>:
 c60:	90 95       	com	r25
 c62:	81 95       	neg	r24
 c64:	9f 4f       	sbci	r25, 0xFF	; 255
 c66:	08 95       	ret

00000c68 <__divmodhi4_neg2>:
 c68:	70 95       	com	r23
 c6a:	61 95       	neg	r22
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c6e <__divmodhi4_exit>:
 c6e:	08 95       	ret

00000c70 <__udivmodhi4>:
 c70:	aa 1b       	sub	r26, r26
 c72:	bb 1b       	sub	r27, r27
 c74:	51 e1       	ldi	r21, 0x11	; 17
 c76:	07 c0       	rjmp	.+14     	; 0xc86 <__udivmodhi4_ep>

00000c78 <__udivmodhi4_loop>:
 c78:	aa 1f       	adc	r26, r26
 c7a:	bb 1f       	adc	r27, r27
 c7c:	a6 17       	cp	r26, r22
 c7e:	b7 07       	cpc	r27, r23
 c80:	10 f0       	brcs	.+4      	; 0xc86 <__udivmodhi4_ep>
 c82:	a6 1b       	sub	r26, r22
 c84:	b7 0b       	sbc	r27, r23

00000c86 <__udivmodhi4_ep>:
 c86:	88 1f       	adc	r24, r24
 c88:	99 1f       	adc	r25, r25
 c8a:	5a 95       	dec	r21
 c8c:	a9 f7       	brne	.-22     	; 0xc78 <__udivmodhi4_loop>
 c8e:	80 95       	com	r24
 c90:	90 95       	com	r25
 c92:	bc 01       	movw	r22, r24
 c94:	cd 01       	movw	r24, r26
 c96:	08 95       	ret

00000c98 <strcmp>:
 c98:	fb 01       	movw	r30, r22
 c9a:	dc 01       	movw	r26, r24
 c9c:	8d 91       	ld	r24, X+
 c9e:	01 90       	ld	r0, Z+
 ca0:	80 19       	sub	r24, r0
 ca2:	01 10       	cpse	r0, r1
 ca4:	d9 f3       	breq	.-10     	; 0xc9c <strcmp+0x4>
 ca6:	99 0b       	sbc	r25, r25
 ca8:	08 95       	ret

00000caa <strcpy>:
 caa:	fb 01       	movw	r30, r22
 cac:	dc 01       	movw	r26, r24
 cae:	01 90       	ld	r0, Z+
 cb0:	0d 92       	st	X+, r0
 cb2:	00 20       	and	r0, r0
 cb4:	e1 f7       	brne	.-8      	; 0xcae <strcpy+0x4>
 cb6:	08 95       	ret

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>
